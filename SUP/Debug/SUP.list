
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003330  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c380  0800c380  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c380  0800c380  0001c380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c388  0800c388  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c388  0800c388  0001c388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c38c  0800c38c  0001c38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800c390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b94  2000007c  0800c40c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006c10  0800c40c  00026c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e358  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000403c  00000000  00000000  0003e404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00042440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  00043d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b0a  00000000  00000000  00045518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf45  00000000  00000000  0004a022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b256  00000000  00000000  00066f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001021bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dd0  00000000  00000000  00102210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009038 	.word	0x08009038

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009038 	.word	0x08009038

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	4608      	mov	r0, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	461a      	mov	r2, r3
 80004f2:	4603      	mov	r3, r0
 80004f4:	807b      	strh	r3, [r7, #2]
 80004f6:	460b      	mov	r3, r1
 80004f8:	707b      	strb	r3, [r7, #1]
 80004fa:	4613      	mov	r3, r2
 80004fc:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 80004fe:	783b      	ldrb	r3, [r7, #0]
 8000500:	787a      	ldrb	r2, [r7, #1]
 8000502:	8879      	ldrh	r1, [r7, #2]
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f000 f822 	bl	800054e <MCP4725_writeComand>
 800050a:	4603      	mov	r3, r0
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 800051c:	2101      	movs	r1, #1
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f000 f895 	bl	800064e <MCP4725_readRegister>
 8000524:	4603      	mov	r3, r0
 8000526:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8000528:	89fb      	ldrh	r3, [r7, #14]
 800052a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800052e:	4293      	cmp	r3, r2
 8000530:	d008      	beq.n	8000544 <MCP4725_getEepromBusyFlag+0x30>
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	e000      	b.n	8000546 <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af02      	add	r7, sp, #8
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	4608      	mov	r0, r1
 8000558:	4611      	mov	r1, r2
 800055a:	461a      	mov	r2, r3
 800055c:	4603      	mov	r3, r0
 800055e:	807b      	strh	r3, [r7, #2]
 8000560:	460b      	mov	r3, r1
 8000562:	707b      	strb	r3, [r7, #1]
 8000564:	4613      	mov	r3, r2
 8000566:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8000568:	787b      	ldrb	r3, [r7, #1]
 800056a:	2b60      	cmp	r3, #96	; 0x60
 800056c:	d028      	beq.n	80005c0 <MCP4725_writeComand+0x72>
 800056e:	2b60      	cmp	r3, #96	; 0x60
 8000570:	dc4a      	bgt.n	8000608 <MCP4725_writeComand+0xba>
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <MCP4725_writeComand+0x2e>
 8000576:	2b40      	cmp	r3, #64	; 0x40
 8000578:	d022      	beq.n	80005c0 <MCP4725_writeComand+0x72>
 800057a:	e045      	b.n	8000608 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 800057c:	783b      	ldrb	r3, [r7, #0]
 800057e:	011b      	lsls	r3, r3, #4
 8000580:	b25a      	sxtb	r2, r3
 8000582:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000586:	4313      	orrs	r3, r2
 8000588:	b25a      	sxtb	r2, r3
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	b29b      	uxth	r3, r3
 8000590:	b25b      	sxtb	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b25b      	sxtb	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 800059a:	887b      	ldrh	r3, [r7, #2]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6818      	ldr	r0, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	b299      	uxth	r1, r3
 80005aa:	f107 020c 	add.w	r2, r7, #12
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2302      	movs	r3, #2
 80005b6:	f002 fb3b 	bl	8002c30 <HAL_I2C_Master_Transmit>
 80005ba:	4603      	mov	r3, r0
 80005bc:	73fb      	strb	r3, [r7, #15]
		
      break;
 80005be:	e023      	b.n	8000608 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 80005c6:	783b      	ldrb	r3, [r7, #0]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 80005d8:	887b      	ldrh	r3, [r7, #2]
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	b29b      	uxth	r3, r3
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 80005e2:	887b      	ldrh	r3, [r7, #2]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	b299      	uxth	r1, r3
 80005f2:	f107 020c 	add.w	r2, r7, #12
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2303      	movs	r3, #3
 80005fe:	f002 fb17 	bl	8002c30 <HAL_I2C_Master_Transmit>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
		
			break;
 8000606:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MCP4725_writeComand+0xc4>
 800060e:	2300      	movs	r3, #0
 8000610:	e019      	b.n	8000646 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 8000612:	787b      	ldrb	r3, [r7, #1]
 8000614:	2b60      	cmp	r3, #96	; 0x60
 8000616:	d115      	bne.n	8000644 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ff7b 	bl	8000514 <MCP4725_getEepromBusyFlag>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d101      	bne.n	8000628 <MCP4725_writeComand+0xda>
 8000624:	2301      	movs	r3, #1
 8000626:	e00e      	b.n	8000646 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 8000628:	2019      	movs	r0, #25
 800062a:	f001 fb6f 	bl	8001d0c <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ff70 	bl	8000514 <MCP4725_getEepromBusyFlag>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d101      	bne.n	800063e <MCP4725_writeComand+0xf0>
 800063a:	2301      	movs	r3, #1
 800063c:	e003      	b.n	8000646 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 800063e:	2019      	movs	r0, #25
 8000640:	f001 fb64 	bl	8001d0c <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8000644:	2301      	movs	r3, #1
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 800064e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000652:	b089      	sub	sp, #36	; 0x24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]
 800065c:	466b      	mov	r3, sp
 800065e:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8000664:	2300      	movs	r3, #0
 8000666:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8000668:	78f9      	ldrb	r1, [r7, #3]
 800066a:	460b      	mov	r3, r1
 800066c:	3b01      	subs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	b2cb      	uxtb	r3, r1
 8000672:	2200      	movs	r2, #0
 8000674:	4698      	mov	r8, r3
 8000676:	4691      	mov	r9, r2
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	f04f 0300 	mov.w	r3, #0
 8000680:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000684:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000688:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800068c:	b2cb      	uxtb	r3, r1
 800068e:	2200      	movs	r2, #0
 8000690:	461c      	mov	r4, r3
 8000692:	4615      	mov	r5, r2
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	00eb      	lsls	r3, r5, #3
 800069e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006a2:	00e2      	lsls	r2, r4, #3
 80006a4:	460b      	mov	r3, r1
 80006a6:	3307      	adds	r3, #7
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	ebad 0d03 	sub.w	sp, sp, r3
 80006b0:	ab02      	add	r3, sp, #8
 80006b2:	3300      	adds	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	b299      	uxth	r1, r3
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c8:	9200      	str	r2, [sp, #0]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	f002 fbae 	bl	8002e2c <HAL_I2C_Master_Receive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 80006d4:	7afb      	ldrb	r3, [r7, #11]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <MCP4725_readRegister+0x92>
 80006da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006de:	e01f      	b.n	8000720 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b05      	cmp	r3, #5
 80006e4:	d00a      	beq.n	80006fc <MCP4725_readRegister+0xae>
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	dc19      	bgt.n	800071e <MCP4725_readRegister+0xd0>
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d002      	beq.n	80006f4 <MCP4725_readRegister+0xa6>
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d004      	beq.n	80006fc <MCP4725_readRegister+0xae>
 80006f2:	e014      	b.n	800071e <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	82fb      	strh	r3, [r7, #22]

      break;
 80006fa:	e010      	b.n	800071e <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 80006fc:	8abb      	ldrh	r3, [r7, #20]
 80006fe:	3b02      	subs	r3, #2
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	5cd3      	ldrb	r3, [r2, r3]
 8000704:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 8000706:	8afb      	ldrh	r3, [r7, #22]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	b21a      	sxth	r2, r3
 800070c:	8abb      	ldrh	r3, [r7, #20]
 800070e:	3b01      	subs	r3, #1
 8000710:	68f9      	ldr	r1, [r7, #12]
 8000712:	5ccb      	ldrb	r3, [r1, r3]
 8000714:	b21b      	sxth	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b21b      	sxth	r3, r3
 800071a:	82fb      	strh	r3, [r7, #22]
      break;
 800071c:	bf00      	nop
  }

  return ret_val;
 800071e:	8afb      	ldrh	r3, [r7, #22]
 8000720:	46b5      	mov	sp, r6
}
 8000722:	4618      	mov	r0, r3
 8000724:	371c      	adds	r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800072c <driver_delay_xms>:
#include "Display/e-ink/epaper.h"

void driver_delay_xms(unsigned long xms)	
{	
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
HAL_Delay(xms);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f001 fae9 	bl	8001d0c <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <Epaper_Spi_WriteByte>:


void Epaper_Spi_WriteByte(unsigned char TxData)
{				   			 
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	extern SPI_HandleTypeDef hspi1;
	HAL_StatusTypeDef st;
	st = HAL_SPI_Receive(&hspi1, &TxData, sizeof(TxData), 10);
 800074e:	1df9      	adds	r1, r7, #7
 8000750:	230a      	movs	r3, #10
 8000752:	2201      	movs	r2, #1
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <Epaper_Spi_WriteByte+0x24>)
 8000756:	f003 ff60 	bl	800461a <HAL_SPI_Receive>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]


}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200020a8 	.word	0x200020a8

0800076c <Epaper_READBUSY>:

void Epaper_READBUSY(void)
{ 
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  while(1)
  {	 //=1 BUSY
     if(isEPD_W21_BUSY==0) break;;
 8000770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <Epaper_READBUSY+0x1c>)
 8000776:	f002 f8e5 	bl	8002944 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d000      	beq.n	8000782 <Epaper_READBUSY+0x16>
 8000780:	e7f6      	b.n	8000770 <Epaper_READBUSY+0x4>
 8000782:	bf00      	nop
  }  
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40020400 	.word	0x40020400

0800078c <Epaper_Write_Command>:

void Epaper_Write_Command(unsigned char cmd)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 8000796:	2201      	movs	r2, #1
 8000798:	2101      	movs	r1, #1
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <Epaper_Write_Command+0x44>)
 800079c:	f002 f8ea 	bl	8002974 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 80007a0:	2200      	movs	r2, #0
 80007a2:	2101      	movs	r1, #1
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <Epaper_Write_Command+0x44>)
 80007a6:	f002 f8e5 	bl	8002974 <HAL_GPIO_WritePin>
	EPD_W21_DC_0;  // D/C#   0:command  1:data
 80007aa:	2200      	movs	r2, #0
 80007ac:	2104      	movs	r1, #4
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <Epaper_Write_Command+0x44>)
 80007b0:	f002 f8e0 	bl	8002974 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(cmd);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ffc4 	bl	8000744 <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <Epaper_Write_Command+0x44>)
 80007c2:	f002 f8d7 	bl	8002974 <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020400 	.word	0x40020400

080007d4 <Epaper_Write_Data>:

void Epaper_Write_Data(unsigned char data)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	EPD_W21_CS_1;
 80007de:	2201      	movs	r2, #1
 80007e0:	2101      	movs	r1, #1
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <Epaper_Write_Data+0x44>)
 80007e4:	f002 f8c6 	bl	8002974 <HAL_GPIO_WritePin>
	EPD_W21_CS_0;
 80007e8:	2200      	movs	r2, #0
 80007ea:	2101      	movs	r1, #1
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <Epaper_Write_Data+0x44>)
 80007ee:	f002 f8c1 	bl	8002974 <HAL_GPIO_WritePin>
	EPD_W21_DC_1;  // D/C#   0:command  1:data
 80007f2:	2201      	movs	r2, #1
 80007f4:	2104      	movs	r1, #4
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <Epaper_Write_Data+0x44>)
 80007f8:	f002 f8bc 	bl	8002974 <HAL_GPIO_WritePin>

	Epaper_Spi_WriteByte(data);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ffa0 	bl	8000744 <Epaper_Spi_WriteByte>
	EPD_W21_CS_1;
 8000804:	2201      	movs	r2, #1
 8000806:	2101      	movs	r1, #1
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <Epaper_Write_Data+0x44>)
 800080a:	f002 f8b3 	bl	8002974 <HAL_GPIO_WritePin>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40020400 	.word	0x40020400

0800081c <EPD_HW_Init>:
	
/////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

void EPD_HW_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	EPD_W21_RST_0;  // Module reset   
 8000820:	2200      	movs	r2, #0
 8000822:	2102      	movs	r1, #2
 8000824:	4833      	ldr	r0, [pc, #204]	; (80008f4 <EPD_HW_Init+0xd8>)
 8000826:	f002 f8a5 	bl	8002974 <HAL_GPIO_WritePin>
	driver_delay_xms(100);//At least 10ms delay 
 800082a:	2064      	movs	r0, #100	; 0x64
 800082c:	f7ff ff7e 	bl	800072c <driver_delay_xms>
	EPD_W21_RST_1;
 8000830:	2201      	movs	r2, #1
 8000832:	2102      	movs	r1, #2
 8000834:	482f      	ldr	r0, [pc, #188]	; (80008f4 <EPD_HW_Init+0xd8>)
 8000836:	f002 f89d 	bl	8002974 <HAL_GPIO_WritePin>
	driver_delay_xms(100); //At least 10ms delay 
 800083a:	2064      	movs	r0, #100	; 0x64
 800083c:	f7ff ff76 	bl	800072c <driver_delay_xms>
	
	Epaper_READBUSY();   
 8000840:	f7ff ff94 	bl	800076c <Epaper_READBUSY>
	Epaper_Write_Command(0x12);  //SWRESET
 8000844:	2012      	movs	r0, #18
 8000846:	f7ff ffa1 	bl	800078c <Epaper_Write_Command>
	Epaper_READBUSY();   
 800084a:	f7ff ff8f 	bl	800076c <Epaper_READBUSY>
		
	Epaper_Write_Command(0x01); //Driver output control      
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff9c 	bl	800078c <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 8000854:	2027      	movs	r0, #39	; 0x27
 8000856:	f7ff ffbd 	bl	80007d4 <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff ffba 	bl	80007d4 <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff ffb7 	bl	80007d4 <Epaper_Write_Data>

	Epaper_Write_Command(0x11); //data entry mode       
 8000866:	2011      	movs	r0, #17
 8000868:	f7ff ff90 	bl	800078c <Epaper_Write_Command>
	Epaper_Write_Data(0x01);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ffb1 	bl	80007d4 <Epaper_Write_Data>

	Epaper_Write_Command(0x44); //set Ram-X address start/end position   
 8000872:	2044      	movs	r0, #68	; 0x44
 8000874:	f7ff ff8a 	bl	800078c <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff ffab 	bl	80007d4 <Epaper_Write_Data>
	Epaper_Write_Data(0x0F);    //0x0F-->(15+1)*8=128
 800087e:	200f      	movs	r0, #15
 8000880:	f7ff ffa8 	bl	80007d4 <Epaper_Write_Data>

	Epaper_Write_Command(0x45); //set Ram-Y address start/end position          
 8000884:	2045      	movs	r0, #69	; 0x45
 8000886:	f7ff ff81 	bl	800078c <Epaper_Write_Command>
	Epaper_Write_Data(0x27);   //0x0127-->(295+1)=296
 800088a:	2027      	movs	r0, #39	; 0x27
 800088c:	f7ff ffa2 	bl	80007d4 <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff ff9f 	bl	80007d4 <Epaper_Write_Data>
	Epaper_Write_Data(0x00);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ff9c 	bl	80007d4 <Epaper_Write_Data>
	Epaper_Write_Data(0x00); 
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff ff99 	bl	80007d4 <Epaper_Write_Data>

	Epaper_Write_Command(0x3C); //BorderWavefrom
 80008a2:	203c      	movs	r0, #60	; 0x3c
 80008a4:	f7ff ff72 	bl	800078c <Epaper_Write_Command>
	Epaper_Write_Data(0x05);	
 80008a8:	2005      	movs	r0, #5
 80008aa:	f7ff ff93 	bl	80007d4 <Epaper_Write_Data>
	  	
  Epaper_Write_Command(0x18); //Read built-in temperature sensor
 80008ae:	2018      	movs	r0, #24
 80008b0:	f7ff ff6c 	bl	800078c <Epaper_Write_Command>
	Epaper_Write_Data(0x80);	
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	f7ff ff8d 	bl	80007d4 <Epaper_Write_Data>
	
	Epaper_Write_Command(0x21); //  Display update control
 80008ba:	2021      	movs	r0, #33	; 0x21
 80008bc:	f7ff ff66 	bl	800078c <Epaper_Write_Command>
  Epaper_Write_Data(0x00);	
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff87 	bl	80007d4 <Epaper_Write_Data>
	Epaper_Write_Data(0x80);	
 80008c6:	2080      	movs	r0, #128	; 0x80
 80008c8:	f7ff ff84 	bl	80007d4 <Epaper_Write_Data>

	Epaper_Write_Command(0x4E);   // set RAM x address count to 0;
 80008cc:	204e      	movs	r0, #78	; 0x4e
 80008ce:	f7ff ff5d 	bl	800078c <Epaper_Write_Command>
	Epaper_Write_Data(0x00);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff ff7e 	bl	80007d4 <Epaper_Write_Data>
	Epaper_Write_Command(0x4F);   // set RAM y address count to 0X199;    
 80008d8:	204f      	movs	r0, #79	; 0x4f
 80008da:	f7ff ff57 	bl	800078c <Epaper_Write_Command>
	Epaper_Write_Data(0x27);
 80008de:	2027      	movs	r0, #39	; 0x27
 80008e0:	f7ff ff78 	bl	80007d4 <Epaper_Write_Data>
	Epaper_Write_Data(0x01);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff ff75 	bl	80007d4 <Epaper_Write_Data>
  Epaper_READBUSY();
 80008ea:	f7ff ff3f 	bl	800076c <Epaper_READBUSY>
	
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40020400 	.word	0x40020400

080008f8 <EPD_Update>:
/////////////////////////////////////////////////////////////////////////////////////////
void EPD_Update(void)
{   
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  Epaper_Write_Command(0x22); //Display Update Control
 80008fc:	2022      	movs	r0, #34	; 0x22
 80008fe:	f7ff ff45 	bl	800078c <Epaper_Write_Command>
  Epaper_Write_Data(0xF7);   
 8000902:	20f7      	movs	r0, #247	; 0xf7
 8000904:	f7ff ff66 	bl	80007d4 <Epaper_Write_Data>
  Epaper_Write_Command(0x20);  //Activate Display Update Sequence
 8000908:	2020      	movs	r0, #32
 800090a:	f7ff ff3f 	bl	800078c <Epaper_Write_Command>
  Epaper_READBUSY();   
 800090e:	f7ff ff2d 	bl	800076c <Epaper_READBUSY>

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}

08000916 <EPD_WhiteScreen_ALL>:
//////////////////////////////All screen update////////////////////////////////////////////
void EPD_WhiteScreen_ALL(const unsigned char *BW_datas,const unsigned char *R_datas)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
   unsigned int i;	
  Epaper_Write_Command(0x24);   //write RAM for black(0)/white (1)
 8000920:	2024      	movs	r0, #36	; 0x24
 8000922:	f7ff ff33 	bl	800078c <Epaper_Write_Command>
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	e00a      	b.n	8000942 <EPD_WhiteScreen_ALL+0x2c>
   {               
     Epaper_Write_Data(*BW_datas);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff4f 	bl	80007d4 <Epaper_Write_Data>
			BW_datas++;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3301      	adds	r3, #1
 800093a:	607b      	str	r3, [r7, #4]
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3301      	adds	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000948:	d3f0      	bcc.n	800092c <EPD_WhiteScreen_ALL+0x16>
   }
	Epaper_Write_Command(0x26);   //write RAM for black(0)/white (1)
 800094a:	2026      	movs	r0, #38	; 0x26
 800094c:	f7ff ff1e 	bl	800078c <Epaper_Write_Command>
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e00c      	b.n	8000970 <EPD_WhiteScreen_ALL+0x5a>
   {               
     Epaper_Write_Data(~(*R_datas));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	43db      	mvns	r3, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff38 	bl	80007d4 <Epaper_Write_Data>
			R_datas++;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	603b      	str	r3, [r7, #0]
   for(i=0;i<ALLSCREEN_GRAGHBYTES;i++)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000976:	d3ee      	bcc.n	8000956 <EPD_WhiteScreen_ALL+0x40>
   }
   EPD_Update();	 
 8000978:	f7ff ffbe 	bl	80008f8 <EPD_Update>
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <EPD_DeepSleep>:
     Epaper_Write_Data(0x00);
   }
   EPD_Update();	 
}
void EPD_DeepSleep(void)
{  	
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  Epaper_Write_Command(0x10); //enter deep sleep
 8000988:	2010      	movs	r0, #16
 800098a:	f7ff feff 	bl	800078c <Epaper_Write_Command>
  Epaper_Write_Data(0x01); 
 800098e:	2001      	movs	r0, #1
 8000990:	f7ff ff20 	bl	80007d4 <Epaper_Write_Data>
  driver_delay_xms(100);
 8000994:	2064      	movs	r0, #100	; 0x64
 8000996:	f7ff fec9 	bl	800072c <driver_delay_xms>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}

0800099e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af04      	add	r7, sp, #16
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2301      	movs	r3, #1
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2301      	movs	r3, #1
 80009c6:	2200      	movs	r2, #0
 80009c8:	2178      	movs	r1, #120	; 0x78
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <ssd1306_WriteCommand+0x2c>)
 80009cc:	f002 fc54 	bl	8003278 <HAL_I2C_Mem_Write>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20002054 	.word	0x20002054

080009dc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af04      	add	r7, sp, #16
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	f04f 32ff 	mov.w	r2, #4294967295
 80009ee:	9202      	str	r2, [sp, #8]
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2301      	movs	r3, #1
 80009f8:	2240      	movs	r2, #64	; 0x40
 80009fa:	2178      	movs	r1, #120	; 0x78
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <ssd1306_WriteData+0x30>)
 80009fe:	f002 fc3b 	bl	8003278 <HAL_I2C_Mem_Write>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20002054 	.word	0x20002054

08000a10 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000a14:	f7ff ffc3 	bl	800099e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000a18:	2064      	movs	r0, #100	; 0x64
 8000a1a:	f001 f977 	bl	8001d0c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f9da 	bl	8000dd8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000a24:	2020      	movs	r0, #32
 8000a26:	f7ff ffc1 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff ffbe 	bl	80009ac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a30:	20b0      	movs	r0, #176	; 0xb0
 8000a32:	f7ff ffbb 	bl	80009ac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000a36:	20c8      	movs	r0, #200	; 0xc8
 8000a38:	f7ff ffb8 	bl	80009ac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff ffb5 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000a42:	2010      	movs	r0, #16
 8000a44:	f7ff ffb2 	bl	80009ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000a48:	2040      	movs	r0, #64	; 0x40
 8000a4a:	f7ff ffaf 	bl	80009ac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000a4e:	20ff      	movs	r0, #255	; 0xff
 8000a50:	f000 f9ae 	bl	8000db0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000a54:	20a1      	movs	r0, #161	; 0xa1
 8000a56:	f7ff ffa9 	bl	80009ac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000a5a:	20a6      	movs	r0, #166	; 0xa6
 8000a5c:	f7ff ffa6 	bl	80009ac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000a60:	20a8      	movs	r0, #168	; 0xa8
 8000a62:	f7ff ffa3 	bl	80009ac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000a66:	203f      	movs	r0, #63	; 0x3f
 8000a68:	f7ff ffa0 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a6c:	20a4      	movs	r0, #164	; 0xa4
 8000a6e:	f7ff ff9d 	bl	80009ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000a72:	20d3      	movs	r0, #211	; 0xd3
 8000a74:	f7ff ff9a 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff ff97 	bl	80009ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a7e:	20d5      	movs	r0, #213	; 0xd5
 8000a80:	f7ff ff94 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000a84:	20f0      	movs	r0, #240	; 0xf0
 8000a86:	f7ff ff91 	bl	80009ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000a8a:	20d9      	movs	r0, #217	; 0xd9
 8000a8c:	f7ff ff8e 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000a90:	2022      	movs	r0, #34	; 0x22
 8000a92:	f7ff ff8b 	bl	80009ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000a96:	20da      	movs	r0, #218	; 0xda
 8000a98:	f7ff ff88 	bl	80009ac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000a9c:	2012      	movs	r0, #18
 8000a9e:	f7ff ff85 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000aa2:	20db      	movs	r0, #219	; 0xdb
 8000aa4:	f7ff ff82 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000aa8:	2020      	movs	r0, #32
 8000aaa:	f7ff ff7f 	bl	80009ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000aae:	208d      	movs	r0, #141	; 0x8d
 8000ab0:	f7ff ff7c 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000ab4:	2014      	movs	r0, #20
 8000ab6:	f7ff ff79 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000aba:	2001      	movs	r0, #1
 8000abc:	f000 f98c 	bl	8000dd8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f80f 	bl	8000ae4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000ac6:	f000 f831 	bl	8000b2c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <ssd1306_Init+0xd0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <ssd1306_Init+0xd0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000ad6:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <ssd1306_Init+0xd0>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	711a      	strb	r2, [r3, #4]
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000498 	.word	0x20000498

08000ae4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e00d      	b.n	8000b10 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <ssd1306_Fill+0x1a>
 8000afa:	2100      	movs	r1, #0
 8000afc:	e000      	b.n	8000b00 <ssd1306_Fill+0x1c>
 8000afe:	21ff      	movs	r1, #255	; 0xff
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <ssd1306_Fill+0x44>)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	460a      	mov	r2, r1
 8000b08:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b16:	d3ed      	bcc.n	8000af4 <ssd1306_Fill+0x10>
    }
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000098 	.word	0x20000098

08000b2c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	e016      	b.n	8000b66 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	3b50      	subs	r3, #80	; 0x50
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff34 	bl	80009ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff ff31 	bl	80009ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000b4a:	2010      	movs	r0, #16
 8000b4c:	f7ff ff2e 	bl	80009ac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	01db      	lsls	r3, r3, #7
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <ssd1306_UpdateScreen+0x4c>)
 8000b56:	4413      	add	r3, r2
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff3e 	bl	80009dc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	3301      	adds	r3, #1
 8000b64:	71fb      	strb	r3, [r7, #7]
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d9e5      	bls.n	8000b38 <ssd1306_UpdateScreen+0xc>
    }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000098 	.word	0x20000098

08000b7c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	460b      	mov	r3, r1
 8000b88:	71bb      	strb	r3, [r7, #6]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db3d      	blt.n	8000c12 <ssd1306_DrawPixel+0x96>
 8000b96:	79bb      	ldrb	r3, [r7, #6]
 8000b98:	2b3f      	cmp	r3, #63	; 0x3f
 8000b9a:	d83a      	bhi.n	8000c12 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000b9c:	797b      	ldrb	r3, [r7, #5]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d11a      	bne.n	8000bd8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	b2d8      	uxtb	r0, r3
 8000baa:	4603      	mov	r3, r0
 8000bac:	01db      	lsls	r3, r3, #7
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <ssd1306_DrawPixel+0xa4>)
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	b25a      	sxtb	r2, r3
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	f003 0307 	and.w	r3, r3, #7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b259      	sxtb	r1, r3
 8000bc8:	79fa      	ldrb	r2, [r7, #7]
 8000bca:	4603      	mov	r3, r0
 8000bcc:	01db      	lsls	r3, r3, #7
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2c9      	uxtb	r1, r1
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <ssd1306_DrawPixel+0xa4>)
 8000bd4:	54d1      	strb	r1, [r2, r3]
 8000bd6:	e01d      	b.n	8000c14 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	79bb      	ldrb	r3, [r7, #6]
 8000bdc:	08db      	lsrs	r3, r3, #3
 8000bde:	b2d8      	uxtb	r0, r3
 8000be0:	4603      	mov	r3, r0
 8000be2:	01db      	lsls	r3, r3, #7
 8000be4:	4413      	add	r3, r2
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <ssd1306_DrawPixel+0xa4>)
 8000be8:	5cd3      	ldrb	r3, [r2, r3]
 8000bea:	b25a      	sxtb	r2, r3
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	4013      	ands	r3, r2
 8000c00:	b259      	sxtb	r1, r3
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	4603      	mov	r3, r0
 8000c06:	01db      	lsls	r3, r3, #7
 8000c08:	4413      	add	r3, r2
 8000c0a:	b2c9      	uxtb	r1, r1
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <ssd1306_DrawPixel+0xa4>)
 8000c0e:	54d1      	strb	r1, [r2, r3]
 8000c10:	e000      	b.n	8000c14 <ssd1306_DrawPixel+0x98>
        return;
 8000c12:	bf00      	nop
    }
}
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000098 	.word	0x20000098

08000c24 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	1d38      	adds	r0, r7, #4
 8000c2e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c32:	461a      	mov	r2, r3
 8000c34:	4623      	mov	r3, r4
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b1f      	cmp	r3, #31
 8000c40:	d902      	bls.n	8000c48 <ssd1306_WriteChar+0x24>
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	2b7e      	cmp	r3, #126	; 0x7e
 8000c46:	d901      	bls.n	8000c4c <ssd1306_WriteChar+0x28>
        return 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e06d      	b.n	8000d28 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000c4c:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <ssd1306_WriteChar+0x10c>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	793b      	ldrb	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	2b80      	cmp	r3, #128	; 0x80
 8000c58:	dc06      	bgt.n	8000c68 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000c5a:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <ssd1306_WriteChar+0x10c>)
 8000c5c:	885b      	ldrh	r3, [r3, #2]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	797b      	ldrb	r3, [r7, #5]
 8000c62:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000c64:	2b40      	cmp	r3, #64	; 0x40
 8000c66:	dd01      	ble.n	8000c6c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e05d      	b.n	8000d28 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
 8000c70:	e04c      	b.n	8000d0c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	3b20      	subs	r3, #32
 8000c78:	7979      	ldrb	r1, [r7, #5]
 8000c7a:	fb01 f303 	mul.w	r3, r1, r3
 8000c7e:	4619      	mov	r1, r3
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	440b      	add	r3, r1
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	e034      	b.n	8000cfc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d012      	beq.n	8000cc8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <ssd1306_WriteChar+0x10c>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	b2d8      	uxtb	r0, r3
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <ssd1306_WriteChar+0x10c>)
 8000cb2:	885b      	ldrh	r3, [r3, #2]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	7bba      	ldrb	r2, [r7, #14]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f7ff ff5b 	bl	8000b7c <ssd1306_DrawPixel>
 8000cc6:	e016      	b.n	8000cf6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <ssd1306_WriteChar+0x10c>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2d8      	uxtb	r0, r3
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <ssd1306_WriteChar+0x10c>)
 8000cd8:	885b      	ldrh	r3, [r3, #2]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b2d9      	uxtb	r1, r3
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bf0c      	ite	eq
 8000cea:	2301      	moveq	r3, #1
 8000cec:	2300      	movne	r3, #0
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	f7ff ff43 	bl	8000b7c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	793b      	ldrb	r3, [r7, #4]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d3c5      	bcc.n	8000c92 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
 8000d0c:	797b      	ldrb	r3, [r7, #5]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d3ad      	bcc.n	8000c72 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <ssd1306_WriteChar+0x10c>)
 8000d18:	881a      	ldrh	r2, [r3, #0]
 8000d1a:	793b      	ldrb	r3, [r7, #4]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4413      	add	r3, r2
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <ssd1306_WriteChar+0x10c>)
 8000d24:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3724      	adds	r7, #36	; 0x24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	20000498 	.word	0x20000498

08000d34 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	1d38      	adds	r0, r7, #4
 8000d3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d42:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000d44:	e012      	b.n	8000d6c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	7818      	ldrb	r0, [r3, #0]
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	1d3a      	adds	r2, r7, #4
 8000d4e:	ca06      	ldmia	r2, {r1, r2}
 8000d50:	f7ff ff68 	bl	8000c24 <ssd1306_WriteChar>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d002      	beq.n	8000d66 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	e008      	b.n	8000d78 <ssd1306_WriteString+0x44>
        }
        str++;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1e8      	bne.n	8000d46 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	781b      	ldrb	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <ssd1306_SetCursor+0x2c>)
 8000d96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <ssd1306_SetCursor+0x2c>)
 8000d9e:	805a      	strh	r2, [r3, #2]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20000498 	.word	0x20000498

08000db0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000dba:	2381      	movs	r3, #129	; 0x81
 8000dbc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fdf3 	bl	80009ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fdef 	bl	80009ac <ssd1306_WriteCommand>
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000de8:	23af      	movs	r3, #175	; 0xaf
 8000dea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <ssd1306_SetDisplayOn+0x38>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	715a      	strb	r2, [r3, #5]
 8000df2:	e004      	b.n	8000dfe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000df4:	23ae      	movs	r3, #174	; 0xae
 8000df6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <ssd1306_SetDisplayOn+0x38>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fdd3 	bl	80009ac <ssd1306_WriteCommand>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000498 	.word	0x20000498

08000e14 <ws2812_init>:
uint16_t BUF_DMA [ARRAY_LEN] = {0};
uint8_t rgb_temp[12][3];
uint16_t DMA_BUF_TEMP[24];
//------------------------------------------------------------------
void ws2812_init(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++) BUF_DMA[i] = LOW;
 8000e1a:	2330      	movs	r3, #48	; 0x30
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	e007      	b.n	8000e30 <ws2812_init+0x1c>
 8000e20:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <ws2812_init+0x34>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	211a      	movs	r1, #26
 8000e26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f5b3 6f5b 	cmp.w	r3, #3504	; 0xdb0
 8000e36:	dbf3      	blt.n	8000e20 <ws2812_init+0xc>
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200004a0 	.word	0x200004a0

08000e4c <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8000e4c:	b490      	push	{r4, r7}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71bb      	strb	r3, [r7, #6]
 8000e62:	460b      	mov	r3, r1
 8000e64:	717b      	strb	r3, [r7, #5]
 8000e66:	4613      	mov	r3, r2
 8000e68:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	81fb      	strh	r3, [r7, #14]
 8000e6e:	e07a      	b.n	8000f66 <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 8000e70:	79fa      	ldrb	r2, [r7, #7]
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	fa42 f303 	asr.w	r3, r2, r3
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00e      	beq.n	8000ea4 <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	3330      	adds	r3, #48	; 0x30
 8000e92:	89fa      	ldrh	r2, [r7, #14]
 8000e94:	b292      	uxth	r2, r2
 8000e96:	4413      	add	r3, r2
 8000e98:	3308      	adds	r3, #8
 8000e9a:	4a38      	ldr	r2, [pc, #224]	; (8000f7c <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000e9c:	2141      	movs	r1, #65	; 0x41
 8000e9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ea2:	e00d      	b.n	8000ec0 <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 8000ea4:	887a      	ldrh	r2, [r7, #2]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	3330      	adds	r3, #48	; 0x30
 8000eb0:	89fa      	ldrh	r2, [r7, #14]
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	3308      	adds	r3, #8
 8000eb8:	4a30      	ldr	r2, [pc, #192]	; (8000f7c <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000eba:	211a      	movs	r1, #26
 8000ebc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 8000ec0:	79ba      	ldrb	r2, [r7, #6]
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	fa42 f303 	asr.w	r3, r2, r3
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00d      	beq.n	8000ef2 <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	3330      	adds	r3, #48	; 0x30
 8000ee2:	89fa      	ldrh	r2, [r7, #14]
 8000ee4:	b292      	uxth	r2, r2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000eea:	2141      	movs	r1, #65	; 0x41
 8000eec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ef0:	e00c      	b.n	8000f0c <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	3330      	adds	r3, #48	; 0x30
 8000efe:	89fa      	ldrh	r2, [r7, #14]
 8000f00:	b292      	uxth	r2, r2
 8000f02:	4413      	add	r3, r2
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000f06:	211a      	movs	r1, #26
 8000f08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 8000f0c:	797a      	ldrb	r2, [r7, #5]
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	fa42 f303 	asr.w	r3, r2, r3
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00e      	beq.n	8000f40 <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	3330      	adds	r3, #48	; 0x30
 8000f2e:	89fa      	ldrh	r2, [r7, #14]
 8000f30:	b292      	uxth	r2, r2
 8000f32:	4413      	add	r3, r2
 8000f34:	3310      	adds	r3, #16
 8000f36:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000f38:	2141      	movs	r1, #65	; 0x41
 8000f3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f3e:	e00d      	b.n	8000f5c <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 8000f40:	887a      	ldrh	r2, [r7, #2]
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	3330      	adds	r3, #48	; 0x30
 8000f4c:	89fa      	ldrh	r2, [r7, #14]
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	4413      	add	r3, r2
 8000f52:	3310      	adds	r3, #16
 8000f54:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000f56:	211a      	movs	r1, #26
 8000f58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	81fb      	strh	r3, [r7, #14]
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	d980      	bls.n	8000e70 <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc90      	pop	{r4, r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200004a0 	.word	0x200004a0

08000f80 <ws2812_prepareValue>:
    uint8_t r07, uint8_t g07, uint8_t b07,
    uint8_t r08, uint8_t g08, uint8_t b08,
    uint8_t r09, uint8_t g09, uint8_t b09,
    uint8_t r10, uint8_t g10, uint8_t b10,
    uint8_t r11, uint8_t g11, uint8_t b11)
  {
 8000f80:	b490      	push	{r4, r7}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	4603      	mov	r3, r0
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	460b      	mov	r3, r1
 8000f98:	717b      	strb	r3, [r7, #5]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	713b      	strb	r3, [r7, #4]
  rgb_temp[0][0]=r00; rgb_temp[0][1]=g00; rgb_temp[0][2]=b00;
 8000f9e:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	7013      	strb	r3, [r2, #0]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	7053      	strb	r3, [r2, #1]
 8000faa:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fac:	797b      	ldrb	r3, [r7, #5]
 8000fae:	7093      	strb	r3, [r2, #2]
  rgb_temp[1][0]=r01; rgb_temp[1][1]=g01; rgb_temp[1][2]=b01;
 8000fb0:	4a43      	ldr	r2, [pc, #268]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fb2:	793b      	ldrb	r3, [r7, #4]
 8000fb4:	70d3      	strb	r3, [r2, #3]
 8000fb6:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fb8:	7c3b      	ldrb	r3, [r7, #16]
 8000fba:	7113      	strb	r3, [r2, #4]
 8000fbc:	4a40      	ldr	r2, [pc, #256]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fbe:	7d3b      	ldrb	r3, [r7, #20]
 8000fc0:	7153      	strb	r3, [r2, #5]
  rgb_temp[2][0]=r02; rgb_temp[2][1]=g02; rgb_temp[2][2]=b02;
 8000fc2:	4a3f      	ldr	r2, [pc, #252]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fc4:	7e3b      	ldrb	r3, [r7, #24]
 8000fc6:	7193      	strb	r3, [r2, #6]
 8000fc8:	4a3d      	ldr	r2, [pc, #244]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fca:	7f3b      	ldrb	r3, [r7, #28]
 8000fcc:	71d3      	strb	r3, [r2, #7]
 8000fce:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd4:	7213      	strb	r3, [r2, #8]
  rgb_temp[3][0]=r03; rgb_temp[3][1]=g03; rgb_temp[3][2]=b03;
 8000fd6:	4a3a      	ldr	r2, [pc, #232]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fdc:	7253      	strb	r3, [r2, #9]
 8000fde:	4a38      	ldr	r2, [pc, #224]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fe0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fe4:	7293      	strb	r3, [r2, #10]
 8000fe6:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000fe8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fec:	72d3      	strb	r3, [r2, #11]
  rgb_temp[4][0]=r04; rgb_temp[4][1]=g04; rgb_temp[4][2]=b04;
 8000fee:	4a34      	ldr	r2, [pc, #208]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000ff0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ff4:	7313      	strb	r3, [r2, #12]
 8000ff6:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <ws2812_prepareValue+0x140>)
 8000ff8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ffc:	7353      	strb	r3, [r2, #13]
 8000ffe:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001000:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001004:	7393      	strb	r3, [r2, #14]
  rgb_temp[5][0]=r05; rgb_temp[5][1]=g05; rgb_temp[5][2]=b05;
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001008:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800100c:	73d3      	strb	r3, [r2, #15]
 800100e:	4a2c      	ldr	r2, [pc, #176]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001010:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001014:	7413      	strb	r3, [r2, #16]
 8001016:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001018:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800101c:	7453      	strb	r3, [r2, #17]
  rgb_temp[6][0]=r06; rgb_temp[6][1]=g06; rgb_temp[6][2]=b06;
 800101e:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001020:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001024:	7493      	strb	r3, [r2, #18]
 8001026:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001028:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800102c:	74d3      	strb	r3, [r2, #19]
 800102e:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001030:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001034:	7513      	strb	r3, [r2, #20]
  rgb_temp[7][0]=r07; rgb_temp[7][1]=g07; rgb_temp[7][2]=b07;
 8001036:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001038:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800103c:	7553      	strb	r3, [r2, #21]
 800103e:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001040:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001044:	7593      	strb	r3, [r2, #22]
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001048:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800104c:	75d3      	strb	r3, [r2, #23]
  rgb_temp[8][0]=r08; rgb_temp[8][1]=g08; rgb_temp[8][2]=b08;
 800104e:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001050:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001054:	7613      	strb	r3, [r2, #24]
 8001056:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001058:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800105c:	7653      	strb	r3, [r2, #25]
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001060:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001064:	7693      	strb	r3, [r2, #26]
  rgb_temp[9][0]=r09; rgb_temp[9][1]=g09; rgb_temp[9][2]=b09;
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001068:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800106c:	76d3      	strb	r3, [r2, #27]
 800106e:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001070:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001074:	7713      	strb	r3, [r2, #28]
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001078:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800107c:	7753      	strb	r3, [r2, #29]
  rgb_temp[10][0]=r10;rgb_temp[10][1]=g10;rgb_temp[10][2]=b10;
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001080:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001084:	7793      	strb	r3, [r2, #30]
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001088:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800108c:	77d3      	strb	r3, [r2, #31]
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <ws2812_prepareValue+0x140>)
 8001090:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001094:	f882 3020 	strb.w	r3, [r2, #32]
  rgb_temp[11][0]=r11;rgb_temp[11][1]=g11;rgb_temp[11][2]=b11;
 8001098:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <ws2812_prepareValue+0x140>)
 800109a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800109e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <ws2812_prepareValue+0x140>)
 80010a4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80010a8:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <ws2812_prepareValue+0x140>)
 80010ae:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80010b2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc90      	pop	{r4, r7}
 80010be:	4770      	bx	lr
 80010c0:	20002000 	.word	0x20002000

080010c4 <ws2812_setValue>:
//------------------------------------------------------------------
void ws2812_setValue(void)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
  uint8_t n=0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
  for(n=0;n<12;n++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	e0d0      	b.n	8001276 <ws2812_setValue+0x1b2>
  {
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[0][0], rgb_temp[0][1], rgb_temp[0][2], n*12);
 80010d4:	4b6c      	ldr	r3, [pc, #432]	; (8001288 <ws2812_setValue+0x1c4>)
 80010d6:	7818      	ldrb	r0, [r3, #0]
 80010d8:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <ws2812_setValue+0x1c4>)
 80010da:	7859      	ldrb	r1, [r3, #1]
 80010dc:	4b6a      	ldr	r3, [pc, #424]	; (8001288 <ws2812_setValue+0x1c4>)
 80010de:	789a      	ldrb	r2, [r3, #2]
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461c      	mov	r4, r3
 80010e6:	0064      	lsls	r4, r4, #1
 80010e8:	4423      	add	r3, r4
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	f7ff fead 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[1][0], rgb_temp[1][1], rgb_temp[1][2], n*12+1);
 80010f2:	4b65      	ldr	r3, [pc, #404]	; (8001288 <ws2812_setValue+0x1c4>)
 80010f4:	78d8      	ldrb	r0, [r3, #3]
 80010f6:	4b64      	ldr	r3, [pc, #400]	; (8001288 <ws2812_setValue+0x1c4>)
 80010f8:	7919      	ldrb	r1, [r3, #4]
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <ws2812_setValue+0x1c4>)
 80010fc:	795a      	ldrb	r2, [r3, #5]
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	b29b      	uxth	r3, r3
 8001102:	461c      	mov	r4, r3
 8001104:	0064      	lsls	r4, r4, #1
 8001106:	4423      	add	r3, r4
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	b29b      	uxth	r3, r3
 800110c:	3301      	adds	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	f7ff fe9c 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[2][0], rgb_temp[2][1], rgb_temp[2][2], n*12+2);
 8001114:	4b5c      	ldr	r3, [pc, #368]	; (8001288 <ws2812_setValue+0x1c4>)
 8001116:	7998      	ldrb	r0, [r3, #6]
 8001118:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <ws2812_setValue+0x1c4>)
 800111a:	79d9      	ldrb	r1, [r3, #7]
 800111c:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <ws2812_setValue+0x1c4>)
 800111e:	7a1a      	ldrb	r2, [r3, #8]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b29b      	uxth	r3, r3
 8001124:	461c      	mov	r4, r3
 8001126:	0064      	lsls	r4, r4, #1
 8001128:	4423      	add	r3, r4
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	b29b      	uxth	r3, r3
 800112e:	3302      	adds	r3, #2
 8001130:	b29b      	uxth	r3, r3
 8001132:	f7ff fe8b 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[3][0], rgb_temp[3][1], rgb_temp[3][2], n*12+3);
 8001136:	4b54      	ldr	r3, [pc, #336]	; (8001288 <ws2812_setValue+0x1c4>)
 8001138:	7a58      	ldrb	r0, [r3, #9]
 800113a:	4b53      	ldr	r3, [pc, #332]	; (8001288 <ws2812_setValue+0x1c4>)
 800113c:	7a99      	ldrb	r1, [r3, #10]
 800113e:	4b52      	ldr	r3, [pc, #328]	; (8001288 <ws2812_setValue+0x1c4>)
 8001140:	7ada      	ldrb	r2, [r3, #11]
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	b29b      	uxth	r3, r3
 8001146:	461c      	mov	r4, r3
 8001148:	0064      	lsls	r4, r4, #1
 800114a:	4423      	add	r3, r4
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	b29b      	uxth	r3, r3
 8001150:	3303      	adds	r3, #3
 8001152:	b29b      	uxth	r3, r3
 8001154:	f7ff fe7a 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[4][0], rgb_temp[4][1], rgb_temp[4][2], n*12+4);
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <ws2812_setValue+0x1c4>)
 800115a:	7b18      	ldrb	r0, [r3, #12]
 800115c:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <ws2812_setValue+0x1c4>)
 800115e:	7b59      	ldrb	r1, [r3, #13]
 8001160:	4b49      	ldr	r3, [pc, #292]	; (8001288 <ws2812_setValue+0x1c4>)
 8001162:	7b9a      	ldrb	r2, [r3, #14]
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	b29b      	uxth	r3, r3
 8001168:	461c      	mov	r4, r3
 800116a:	0064      	lsls	r4, r4, #1
 800116c:	4423      	add	r3, r4
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	b29b      	uxth	r3, r3
 8001172:	3304      	adds	r3, #4
 8001174:	b29b      	uxth	r3, r3
 8001176:	f7ff fe69 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[5][0], rgb_temp[5][1], rgb_temp[5][2], n*12+5);
 800117a:	4b43      	ldr	r3, [pc, #268]	; (8001288 <ws2812_setValue+0x1c4>)
 800117c:	7bd8      	ldrb	r0, [r3, #15]
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <ws2812_setValue+0x1c4>)
 8001180:	7c19      	ldrb	r1, [r3, #16]
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <ws2812_setValue+0x1c4>)
 8001184:	7c5a      	ldrb	r2, [r3, #17]
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	b29b      	uxth	r3, r3
 800118a:	461c      	mov	r4, r3
 800118c:	0064      	lsls	r4, r4, #1
 800118e:	4423      	add	r3, r4
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	b29b      	uxth	r3, r3
 8001194:	3305      	adds	r3, #5
 8001196:	b29b      	uxth	r3, r3
 8001198:	f7ff fe58 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[6][0], rgb_temp[6][1], rgb_temp[6][2], n*12+6);
 800119c:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <ws2812_setValue+0x1c4>)
 800119e:	7c98      	ldrb	r0, [r3, #18]
 80011a0:	4b39      	ldr	r3, [pc, #228]	; (8001288 <ws2812_setValue+0x1c4>)
 80011a2:	7cd9      	ldrb	r1, [r3, #19]
 80011a4:	4b38      	ldr	r3, [pc, #224]	; (8001288 <ws2812_setValue+0x1c4>)
 80011a6:	7d1a      	ldrb	r2, [r3, #20]
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	461c      	mov	r4, r3
 80011ae:	0064      	lsls	r4, r4, #1
 80011b0:	4423      	add	r3, r4
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3306      	adds	r3, #6
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	f7ff fe47 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[7][0], rgb_temp[7][1], rgb_temp[7][2], n*12+7);
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <ws2812_setValue+0x1c4>)
 80011c0:	7d58      	ldrb	r0, [r3, #21]
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <ws2812_setValue+0x1c4>)
 80011c4:	7d99      	ldrb	r1, [r3, #22]
 80011c6:	4b30      	ldr	r3, [pc, #192]	; (8001288 <ws2812_setValue+0x1c4>)
 80011c8:	7dda      	ldrb	r2, [r3, #23]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	461c      	mov	r4, r3
 80011d0:	0064      	lsls	r4, r4, #1
 80011d2:	4423      	add	r3, r4
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3307      	adds	r3, #7
 80011da:	b29b      	uxth	r3, r3
 80011dc:	f7ff fe36 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[8][0], rgb_temp[8][1], rgb_temp[8][2], n*12+8);
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <ws2812_setValue+0x1c4>)
 80011e2:	7e18      	ldrb	r0, [r3, #24]
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <ws2812_setValue+0x1c4>)
 80011e6:	7e59      	ldrb	r1, [r3, #25]
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <ws2812_setValue+0x1c4>)
 80011ea:	7e9a      	ldrb	r2, [r3, #26]
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461c      	mov	r4, r3
 80011f2:	0064      	lsls	r4, r4, #1
 80011f4:	4423      	add	r3, r4
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3308      	adds	r3, #8
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f7ff fe25 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[9][0], rgb_temp[9][1], rgb_temp[9][2], n*12+9);
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <ws2812_setValue+0x1c4>)
 8001204:	7ed8      	ldrb	r0, [r3, #27]
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <ws2812_setValue+0x1c4>)
 8001208:	7f19      	ldrb	r1, [r3, #28]
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <ws2812_setValue+0x1c4>)
 800120c:	7f5a      	ldrb	r2, [r3, #29]
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	b29b      	uxth	r3, r3
 8001212:	461c      	mov	r4, r3
 8001214:	0064      	lsls	r4, r4, #1
 8001216:	4423      	add	r3, r4
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	b29b      	uxth	r3, r3
 800121c:	3309      	adds	r3, #9
 800121e:	b29b      	uxth	r3, r3
 8001220:	f7ff fe14 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma(rgb_temp[10][0],rgb_temp[10][1],rgb_temp[10][2],n*12+10);
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <ws2812_setValue+0x1c4>)
 8001226:	7f98      	ldrb	r0, [r3, #30]
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <ws2812_setValue+0x1c4>)
 800122a:	7fd9      	ldrb	r1, [r3, #31]
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <ws2812_setValue+0x1c4>)
 800122e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	b29b      	uxth	r3, r3
 8001236:	461c      	mov	r4, r3
 8001238:	0064      	lsls	r4, r4, #1
 800123a:	4423      	add	r3, r4
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	b29b      	uxth	r3, r3
 8001240:	330a      	adds	r3, #10
 8001242:	b29b      	uxth	r3, r3
 8001244:	f7ff fe02 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma(rgb_temp[11][0],rgb_temp[11][1],rgb_temp[11][2],n*12+11);
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <ws2812_setValue+0x1c4>)
 800124a:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <ws2812_setValue+0x1c4>)
 8001250:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <ws2812_setValue+0x1c4>)
 8001256:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	b29b      	uxth	r3, r3
 800125e:	461c      	mov	r4, r3
 8001260:	0064      	lsls	r4, r4, #1
 8001262:	4423      	add	r3, r4
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	b29b      	uxth	r3, r3
 8001268:	330b      	adds	r3, #11
 800126a:	b29b      	uxth	r3, r3
 800126c:	f7ff fdee 	bl	8000e4c <ws2812_pixel_rgb_to_buf_dma>
  for(n=0;n<12;n++)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	3301      	adds	r3, #1
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b0b      	cmp	r3, #11
 800127a:	f67f af2b 	bls.w	80010d4 <ws2812_setValue+0x10>
  }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	20002000 	.word	0x20002000

0800128c <ws2812_light>:
//------------------------------------------------------------------
void ws2812_light(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA,ARRAY_LEN);
 8001290:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <ws2812_light+0x18>)
 8001296:	2104      	movs	r1, #4
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <ws2812_light+0x1c>)
 800129a:	f003 fead 	bl	8004ff8 <HAL_TIM_PWM_Start_DMA>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200004a0 	.word	0x200004a0
 80012a8:	20002100 	.word	0x20002100

080012ac <ws2812_test01>:
//------------------------------------------------------------------
void ws2812_test01(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0a2      	sub	sp, #136	; 0x88
 80012b0:	af20      	add	r7, sp, #128	; 0x80
  uint8_t i,j;
  ws2812_prepareValue(128, 0, 0, 0, 128, 0, 0, 0, 128, 64, 64, 0,
 80012b2:	2360      	movs	r3, #96	; 0x60
 80012b4:	931f      	str	r3, [sp, #124]	; 0x7c
 80012b6:	2300      	movs	r3, #0
 80012b8:	931e      	str	r3, [sp, #120]	; 0x78
 80012ba:	2320      	movs	r3, #32
 80012bc:	931d      	str	r3, [sp, #116]	; 0x74
 80012be:	2360      	movs	r3, #96	; 0x60
 80012c0:	931c      	str	r3, [sp, #112]	; 0x70
 80012c2:	2320      	movs	r3, #32
 80012c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80012c6:	2300      	movs	r3, #0
 80012c8:	931a      	str	r3, [sp, #104]	; 0x68
 80012ca:	2320      	movs	r3, #32
 80012cc:	9319      	str	r3, [sp, #100]	; 0x64
 80012ce:	2360      	movs	r3, #96	; 0x60
 80012d0:	9318      	str	r3, [sp, #96]	; 0x60
 80012d2:	2300      	movs	r3, #0
 80012d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80012d6:	2300      	movs	r3, #0
 80012d8:	9316      	str	r3, [sp, #88]	; 0x58
 80012da:	2360      	movs	r3, #96	; 0x60
 80012dc:	9315      	str	r3, [sp, #84]	; 0x54
 80012de:	2320      	movs	r3, #32
 80012e0:	9314      	str	r3, [sp, #80]	; 0x50
 80012e2:	2320      	movs	r3, #32
 80012e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80012e6:	2300      	movs	r3, #0
 80012e8:	9312      	str	r3, [sp, #72]	; 0x48
 80012ea:	2360      	movs	r3, #96	; 0x60
 80012ec:	9311      	str	r3, [sp, #68]	; 0x44
 80012ee:	2300      	movs	r3, #0
 80012f0:	9310      	str	r3, [sp, #64]	; 0x40
 80012f2:	2320      	movs	r3, #32
 80012f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80012f6:	2360      	movs	r3, #96	; 0x60
 80012f8:	930e      	str	r3, [sp, #56]	; 0x38
 80012fa:	2340      	movs	r3, #64	; 0x40
 80012fc:	930d      	str	r3, [sp, #52]	; 0x34
 80012fe:	2300      	movs	r3, #0
 8001300:	930c      	str	r3, [sp, #48]	; 0x30
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	930b      	str	r3, [sp, #44]	; 0x2c
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	930a      	str	r3, [sp, #40]	; 0x28
 800130a:	2340      	movs	r3, #64	; 0x40
 800130c:	9309      	str	r3, [sp, #36]	; 0x24
 800130e:	2300      	movs	r3, #0
 8001310:	9308      	str	r3, [sp, #32]
 8001312:	2300      	movs	r3, #0
 8001314:	9307      	str	r3, [sp, #28]
 8001316:	2340      	movs	r3, #64	; 0x40
 8001318:	9306      	str	r3, [sp, #24]
 800131a:	2340      	movs	r3, #64	; 0x40
 800131c:	9305      	str	r3, [sp, #20]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	9304      	str	r3, [sp, #16]
 8001322:	2300      	movs	r3, #0
 8001324:	9303      	str	r3, [sp, #12]
 8001326:	2300      	movs	r3, #0
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2300      	movs	r3, #0
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2080      	movs	r0, #128	; 0x80
 800133a:	f7ff fe21 	bl	8000f80 <ws2812_prepareValue>
      0, 64, 64, 64, 0, 64, 96, 32, 0, 96, 0, 32,
      32, 96, 0, 0, 96, 32, 0, 32, 96, 32, 0, 96);
  ws2812_setValue();
 800133e:	f7ff fec1 	bl	80010c4 <ws2812_setValue>
  for(j=0;j<50;j++)
 8001342:	2300      	movs	r3, #0
 8001344:	71bb      	strb	r3, [r7, #6]
 8001346:	e030      	b.n	80013aa <ws2812_test01+0xfe>
  {
    memcpy((void*)DMA_BUF_TEMP,(void*)(BUF_DMA+48),48);
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <ws2812_test01+0x110>)
 800134a:	2230      	movs	r2, #48	; 0x30
 800134c:	4619      	mov	r1, r3
 800134e:	481c      	ldr	r0, [pc, #112]	; (80013c0 <ws2812_test01+0x114>)
 8001350:	f007 fd9a 	bl	8008e88 <memcpy>
    for(i=0;i<143;i++)
 8001354:	2300      	movs	r3, #0
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	e016      	b.n	8001388 <ws2812_test01+0xdc>
    {
      memcpy((void*)(i*24+BUF_DMA+48),(void*)(i*24+BUF_DMA+72),48);
 800135a:	79fa      	ldrb	r2, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	3360      	adds	r3, #96	; 0x60
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <ws2812_test01+0x118>)
 8001368:	1898      	adds	r0, r3, r2
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	3390      	adds	r3, #144	; 0x90
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <ws2812_test01+0x118>)
 8001378:	4413      	add	r3, r2
 800137a:	2230      	movs	r2, #48	; 0x30
 800137c:	4619      	mov	r1, r3
 800137e:	f007 fd83 	bl	8008e88 <memcpy>
    for(i=0;i<143;i++)
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	3301      	adds	r3, #1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b8e      	cmp	r3, #142	; 0x8e
 800138c:	d9e5      	bls.n	800135a <ws2812_test01+0xae>
    }
    memcpy((void*)(BUF_DMA+48+3432),(void*)DMA_BUF_TEMP,48);
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <ws2812_test01+0x11c>)
 8001390:	2230      	movs	r2, #48	; 0x30
 8001392:	490b      	ldr	r1, [pc, #44]	; (80013c0 <ws2812_test01+0x114>)
 8001394:	4618      	mov	r0, r3
 8001396:	f007 fd77 	bl	8008e88 <memcpy>
    ws2812_light();
 800139a:	f7ff ff77 	bl	800128c <ws2812_light>
    HAL_Delay(100);
 800139e:	2064      	movs	r0, #100	; 0x64
 80013a0:	f000 fcb4 	bl	8001d0c <HAL_Delay>
  for(j=0;j<50;j++)
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	3301      	adds	r3, #1
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	2b31      	cmp	r3, #49	; 0x31
 80013ae:	d9cb      	bls.n	8001348 <ws2812_test01+0x9c>
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000500 	.word	0x20000500
 80013c0:	20002024 	.word	0x20002024
 80013c4:	200004a0 	.word	0x200004a0
 80013c8:	20001fd0 	.word	0x20001fd0

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fc59 	bl	8001c88 <HAL_Init>

  /* USER CODE BEGIN Init */
  MCP4725 myMCP4725;
  MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80013d6:	4638      	mov	r0, r7
 80013d8:	2300      	movs	r3, #0
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e0:	f7ff f880 	bl	80004e4 <MCP4725_setValue>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e4:	f000 f848 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e8:	f000 f9a6 	bl	8001738 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ec:	f000 f984 	bl	80016f8 <MX_DMA_Init>
  MX_I2C1_Init();
 80013f0:	f000 f8aa 	bl	8001548 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013f4:	f000 f8d6 	bl	80015a4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80013f8:	f000 f90a 	bl	8001610 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ws2812_init();
 80013fc:	f7ff fd0a 	bl	8000e14 <ws2812_init>
  	  ws2812_test01();
 8001400:	f7ff ff54 	bl	80012ac <ws2812_test01>
  	  ws2812_light();
 8001404:	f7ff ff42 	bl	800128c <ws2812_light>
  ssd1306_Init();
 8001408:	f7ff fb02 	bl	8000a10 <ssd1306_Init>
  //extern  unsigned char *gImage_BW;
  //extern  unsigned char *gImage_R;
  ssd1306_Fill(Black);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff fb69 	bl	8000ae4 <ssd1306_Fill>
  ssd1306_SetCursor(5, 10);
 8001412:	210a      	movs	r1, #10
 8001414:	2005      	movs	r0, #5
 8001416:	f7ff fcb3 	bl	8000d80 <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <main+0x90>)
 800141c:	2301      	movs	r3, #1
 800141e:	ca06      	ldmia	r2, {r1, r2}
 8001420:	480f      	ldr	r0, [pc, #60]	; (8001460 <main+0x94>)
 8001422:	f7ff fc87 	bl	8000d34 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001426:	f7ff fb81 	bl	8000b2c <ssd1306_UpdateScreen>
  EPD_HW_Init(); //Electronic paper initialization
 800142a:	f7ff f9f7 	bl	800081c <EPD_HW_Init>
  EPD_WhiteScreen_ALL(gqImage_BW,gqImage_R); //Refresh the picture in full screen
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <main+0x98>)
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <main+0x9c>)
 8001432:	f7ff fa70 	bl	8000916 <EPD_WhiteScreen_ALL>
  EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
 8001436:	f7ff faa5 	bl	8000984 <EPD_DeepSleep>
  driver_delay_xms(5000);
 800143a:	f241 3088 	movw	r0, #5000	; 0x1388
 800143e:	f7ff f975 	bl	800072c <driver_delay_xms>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001442:	f004 ff7f 	bl	8006344 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <main+0xa0>)
 8001448:	2100      	movs	r1, #0
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <main+0xa4>)
 800144c:	f004 ffc4 	bl	80063d8 <osThreadNew>
 8001450:	4603      	mov	r3, r0
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <main+0xa8>)
 8001454:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001456:	f004 ff99 	bl	800638c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800145a:	e7fe      	b.n	800145a <main+0x8e>
 800145c:	20000000 	.word	0x20000000
 8001460:	0800905c 	.word	0x0800905c
 8001464:	0800b05c 	.word	0x0800b05c
 8001468:	08009ddc 	.word	0x08009ddc
 800146c:	0800c2dc 	.word	0x0800c2dc
 8001470:	080017f5 	.word	0x080017f5
 8001474:	200021a8 	.word	0x200021a8

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2230      	movs	r2, #48	; 0x30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f007 fd0c 	bl	8008ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <SystemClock_Config+0xc8>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <SystemClock_Config+0xc8>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <SystemClock_Config+0xc8>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <SystemClock_Config+0xcc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a20      	ldr	r2, [pc, #128]	; (8001544 <SystemClock_Config+0xcc>)
 80014c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <SystemClock_Config+0xcc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d4:	2301      	movs	r3, #1
 80014d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014e8:	2319      	movs	r3, #25
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014ec:	23c0      	movs	r3, #192	; 0xc0
 80014ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fb79 	bl	8003bf4 <HAL_RCC_OscConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001508:	f000 f98e 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150c:	230f      	movs	r3, #15
 800150e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001510:	2302      	movs	r3, #2
 8001512:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2103      	movs	r1, #3
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fddb 	bl	80040e4 <HAL_RCC_ClockConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001534:	f000 f978 	bl	8001828 <Error_Handler>
  }
}
 8001538:	bf00      	nop
 800153a:	3750      	adds	r7, #80	; 0x50
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000

08001548 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_I2C1_Init+0x50>)
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <MX_I2C1_Init+0x54>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_I2C1_Init+0x50>)
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <MX_I2C1_Init+0x58>)
 8001556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_I2C1_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_I2C1_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_I2C1_Init+0x50>)
 8001566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <MX_I2C1_Init+0x50>)
 8001586:	f001 fa0f 	bl	80029a8 <HAL_I2C_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001590:	f000 f94a 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20002054 	.word	0x20002054
 800159c:	40005400 	.word	0x40005400
 80015a0:	000186a0 	.word	0x000186a0

080015a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_SPI1_Init+0x64>)
 80015aa:	4a18      	ldr	r2, [pc, #96]	; (800160c <MX_SPI1_Init+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_SPI1_Init+0x64>)
 80015b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_SPI1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_SPI1_Init+0x64>)
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_SPI1_Init+0x64>)
 80015d8:	2230      	movs	r2, #48	; 0x30
 80015da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_SPI1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_SPI1_Init+0x64>)
 80015f0:	220a      	movs	r2, #10
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_SPI1_Init+0x64>)
 80015f6:	f002 ff87 	bl	8004508 <HAL_SPI_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001600:	f000 f912 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200020a8 	.word	0x200020a8
 800160c:	40013000 	.word	0x40013000

08001610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	f107 0320 	add.w	r3, r7, #32
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001640:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001646:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <MX_TIM2_Init+0xe4>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001656:	2277      	movs	r2, #119	; 0x77
 8001658:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <MX_TIM2_Init+0xe4>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001666:	4823      	ldr	r0, [pc, #140]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001668:	f003 fbba 	bl	8004de0 <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001672:	f000 f8d9 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001680:	4619      	mov	r1, r3
 8001682:	481c      	ldr	r0, [pc, #112]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001684:	f004 f8f8 	bl	8005878 <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800168e:	f000 f8cb 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001692:	4818      	ldr	r0, [pc, #96]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001694:	f003 fc56 	bl	8004f44 <HAL_TIM_PWM_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800169e:	f000 f8c3 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	4619      	mov	r1, r3
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <MX_TIM2_Init+0xe4>)
 80016b2:	f004 fd81 	bl	80061b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016bc:	f000 f8b4 	bl	8001828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c0:	2360      	movs	r3, #96	; 0x60
 80016c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2204      	movs	r2, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM2_Init+0xe4>)
 80016d8:	f004 f80c 	bl	80056f4 <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80016e2:	f000 f8a1 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM2_Init+0xe4>)
 80016e8:	f000 f9b8 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 80016ec:	bf00      	nop
 80016ee:	3738      	adds	r7, #56	; 0x38
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20002100 	.word	0x20002100

080016f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_DMA_Init+0x3c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <MX_DMA_Init+0x3c>)
 8001708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_DMA_Init+0x3c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2105      	movs	r1, #5
 800171e:	2011      	movs	r0, #17
 8001720:	f000 fbd0 	bl	8001ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001724:	2011      	movs	r0, #17
 8001726:	f000 fbe9 	bl	8001efc <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <MX_GPIO_Init+0xb4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a25      	ldr	r2, [pc, #148]	; (80017ec <MX_GPIO_Init+0xb4>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <MX_GPIO_Init+0xb4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MX_GPIO_Init+0xb4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <MX_GPIO_Init+0xb4>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_GPIO_Init+0xb4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MX_GPIO_Init+0xb4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <MX_GPIO_Init+0xb4>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_GPIO_Init+0xb4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2107      	movs	r1, #7
 80017a6:	4812      	ldr	r0, [pc, #72]	; (80017f0 <MX_GPIO_Init+0xb8>)
 80017a8:	f001 f8e4 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 80017ac:	2307      	movs	r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4619      	mov	r1, r3
 80017c2:	480b      	ldr	r0, [pc, #44]	; (80017f0 <MX_GPIO_Init+0xb8>)
 80017c4:	f000 ff3a 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 80017c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017d2:	2302      	movs	r3, #2
 80017d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_GPIO_Init+0xb8>)
 80017de:	f000 ff2d 	bl	800263c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e2:	bf00      	nop
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020400 	.word	0x40020400

080017f4 <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f004 fe7d 	bl	80064fc <osDelay>
 8001802:	e7fb      	b.n	80017fc <StartInitTask+0x8>

08001804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001816:	f000 fa59 	bl	8001ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40014000 	.word	0x40014000

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_MspInit+0x54>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_MspInit+0x54>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_MspInit+0x54>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_MspInit+0x54>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_MspInit+0x54>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_MspInit+0x54>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	210f      	movs	r1, #15
 8001876:	f06f 0001 	mvn.w	r0, #1
 800187a:	f000 fb23 	bl	8001ec4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_I2C_MspInit+0x84>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12b      	bne.n	8001906 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018ca:	23c0      	movs	r3, #192	; 0xc0
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ce:	2312      	movs	r3, #18
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018da:	2304      	movs	r3, #4
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <HAL_I2C_MspInit+0x8c>)
 80018e6:	f000 fea9 	bl	800263c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40005400 	.word	0x40005400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020400 	.word	0x40020400

0800191c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_SPI_MspInit+0x84>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001976:	23a0      	movs	r3, #160	; 0xa0
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001986:	2305      	movs	r3, #5
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_SPI_MspInit+0x8c>)
 8001992:	f000 fe53 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40013000 	.word	0x40013000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000

080019ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019bc:	d143      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_TIM_Base_MspInit+0xa4>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a22      	ldr	r2, [pc, #136]	; (8001a50 <HAL_TIM_Base_MspInit+0xa4>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_TIM_Base_MspInit+0xa4>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 80019dc:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <HAL_TIM_Base_MspInit+0xac>)
 80019de:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 80019e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019e6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 80019f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 80019fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a02:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 8001a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 8001a20:	f000 fa7a 	bl	8001f18 <HAL_DMA_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001a2a:	f7ff fefd 	bl	8001828 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_TIM_Base_MspInit+0xa8>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	20002148 	.word	0x20002148
 8001a58:	400260a0 	.word	0x400260a0

08001a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d11d      	bne.n	8001aba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_TIM_MspPostInit+0x68>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_TIM_MspPostInit+0x68>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_TIM_MspPostInit+0x68>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <HAL_TIM_MspPostInit+0x6c>)
 8001ab6:	f000 fdc1 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020400 	.word	0x40020400

08001acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_InitTick+0xd0>)
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	4a2d      	ldr	r2, [pc, #180]	; (8001b9c <HAL_InitTick+0xd0>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6453      	str	r3, [r2, #68]	; 0x44
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_InitTick+0xd0>)
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af8:	f107 020c 	add.w	r2, r7, #12
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 fcce 	bl	80044a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b08:	f002 fcb8 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 8001b0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_InitTick+0xd4>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9b      	lsrs	r3, r3, #18
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001b1c:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <HAL_InitTick+0xd8>)
 8001b1e:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_InitTick+0xdc>)
 8001b20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_InitTick+0xd8>)
 8001b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b28:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_InitTick+0xd8>)
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_InitTick+0xd8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_InitTick+0xd8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_InitTick+0xd8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001b42:	4818      	ldr	r0, [pc, #96]	; (8001ba4 <HAL_InitTick+0xd8>)
 8001b44:	f003 f94c 	bl	8004de0 <HAL_TIM_Base_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d11b      	bne.n	8001b8e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001b56:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <HAL_InitTick+0xd8>)
 8001b58:	f003 f992 	bl	8004e80 <HAL_TIM_Base_Start_IT>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d111      	bne.n	8001b8e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b6a:	2018      	movs	r0, #24
 8001b6c:	f000 f9c6 	bl	8001efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d808      	bhi.n	8001b88 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001b76:	2200      	movs	r2, #0
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	2018      	movs	r0, #24
 8001b7c:	f000 f9a2 	bl	8001ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_InitTick+0xe0>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e002      	b.n	8001b8e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3730      	adds	r7, #48	; 0x30
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	431bde83 	.word	0x431bde83
 8001ba4:	200021ac 	.word	0x200021ac
 8001ba8:	40014000 	.word	0x40014000
 8001bac:	2000000c 	.word	0x2000000c

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_2);
 8001be0:	2104      	movs	r1, #4
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <DMA1_Stream6_IRQHandler+0x18>)
 8001be4:	f003 fbb8 	bl	8005358 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <DMA1_Stream6_IRQHandler+0x1c>)
 8001bea:	f000 fabd 	bl	8002168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20002100 	.word	0x20002100
 8001bf8:	20002148 	.word	0x20002148

08001bfc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c02:	f003 fc6f 	bl	80054e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200021ac 	.word	0x200021ac

08001c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <SystemInit+0x20>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <SystemInit+0x20>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c3a:	490e      	ldr	r1, [pc, #56]	; (8001c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c50:	4c0b      	ldr	r4, [pc, #44]	; (8001c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c5e:	f7ff ffd7 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c62:	f007 f8eb 	bl	8008e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c66:	f7ff fbb1 	bl	80013cc <main>
  bx  lr    
 8001c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c74:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c78:	0800c390 	.word	0x0800c390
  ldr r2, =_sbss
 8001c7c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c80:	20006c10 	.word	0x20006c10

08001c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c84:	e7fe      	b.n	8001c84 <ADC_IRQHandler>
	...

08001c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <HAL_Init+0x40>)
 8001c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <HAL_Init+0x40>)
 8001c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_Init+0x40>)
 8001caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 f8fc 	bl	8001eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff ff08 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cbc:	f7ff fdba 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x20>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000010 	.word	0x20000010
 8001cf0:	200021f4 	.word	0x200021f4

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	200021f4 	.word	0x200021f4

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff ffee 	bl	8001cf4 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_Delay+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffde 	bl	8001cf4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000010 	.word	0x20000010

08001d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <__NVIC_GetPriorityGrouping+0x18>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f003 0307 	and.w	r3, r3, #7
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	db0b      	blt.n	8001de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	f003 021f 	and.w	r2, r3, #31
 8001dd0:	4907      	ldr	r1, [pc, #28]	; (8001df0 <__NVIC_EnableIRQ+0x38>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	2001      	movs	r0, #1
 8001dda:	fa00 f202 	lsl.w	r2, r0, r2
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100

08001df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	; (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	; (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	bf28      	it	cs
 8001e66:	2304      	movcs	r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d902      	bls.n	8001e78 <NVIC_EncodePriority+0x30>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b03      	subs	r3, #3
 8001e76:	e000      	b.n	8001e7a <NVIC_EncodePriority+0x32>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4313      	orrs	r3, r2
         );
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff4c 	bl	8001d54 <__NVIC_SetPriorityGrouping>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed6:	f7ff ff61 	bl	8001d9c <__NVIC_GetPriorityGrouping>
 8001eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	6978      	ldr	r0, [r7, #20]
 8001ee2:	f7ff ffb1 	bl	8001e48 <NVIC_EncodePriority>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff80 	bl	8001df4 <__NVIC_SetPriority>
}
 8001ef4:	bf00      	nop
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff54 	bl	8001db8 <__NVIC_EnableIRQ>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff fee6 	bl	8001cf4 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e099      	b.n	8002068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f54:	e00f      	b.n	8001f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f56:	f7ff fecd 	bl	8001cf4 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d908      	bls.n	8001f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e078      	b.n	8002068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1e8      	bne.n	8001f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	4b38      	ldr	r3, [pc, #224]	; (8002070 <HAL_DMA_Init+0x158>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d107      	bne.n	8001fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f023 0307 	bic.w	r3, r3, #7
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	2b04      	cmp	r3, #4
 8002008:	d117      	bne.n	800203a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00e      	beq.n	800203a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fa91 	bl	8002544 <DMA_CheckFifoParam>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2240      	movs	r2, #64	; 0x40
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002036:	2301      	movs	r3, #1
 8002038:	e016      	b.n	8002068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fa48 	bl	80024d8 <DMA_CalcBaseAndBitshift>
 8002048:	4603      	mov	r3, r0
 800204a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	223f      	movs	r2, #63	; 0x3f
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	f010803f 	.word	0xf010803f

08002074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_DMA_Start_IT+0x26>
 8002096:	2302      	movs	r3, #2
 8002098:	e040      	b.n	800211c <HAL_DMA_Start_IT+0xa8>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d12f      	bne.n	800210e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2202      	movs	r2, #2
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f9da 	bl	800247c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	223f      	movs	r2, #63	; 0x3f
 80020ce:	409a      	lsls	r2, r3
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0216 	orr.w	r2, r2, #22
 80020e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0208 	orr.w	r2, r2, #8
 80020fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e005      	b.n	800211a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002116:	2302      	movs	r3, #2
 8002118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800211a:	7dfb      	ldrb	r3, [r7, #23]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d004      	beq.n	8002142 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00c      	b.n	800215c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2205      	movs	r2, #5
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002174:	4b8e      	ldr	r3, [pc, #568]	; (80023b0 <HAL_DMA_IRQHandler+0x248>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a8e      	ldr	r2, [pc, #568]	; (80023b4 <HAL_DMA_IRQHandler+0x24c>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0a9b      	lsrs	r3, r3, #10
 8002180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	2208      	movs	r2, #8
 8002194:	409a      	lsls	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d01a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0204 	bic.w	r2, r2, #4
 80021ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2208      	movs	r2, #8
 80021c2:	409a      	lsls	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2201      	movs	r2, #1
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d012      	beq.n	800220a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	2201      	movs	r2, #1
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f043 0202 	orr.w	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	2204      	movs	r2, #4
 8002210:	409a      	lsls	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d012      	beq.n	8002240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00b      	beq.n	8002240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	2204      	movs	r2, #4
 800222e:	409a      	lsls	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	2210      	movs	r2, #16
 8002246:	409a      	lsls	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d043      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d03c      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	2210      	movs	r2, #16
 8002264:	409a      	lsls	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d018      	beq.n	80022aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d024      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
 8002296:	e01f      	b.n	80022d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
 80022a8:	e016      	b.n	80022d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0208 	bic.w	r2, r2, #8
 80022c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2220      	movs	r2, #32
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 808f 	beq.w	8002408 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8087 	beq.w	8002408 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	2220      	movs	r2, #32
 8002300:	409a      	lsls	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b05      	cmp	r3, #5
 8002310:	d136      	bne.n	8002380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0216 	bic.w	r2, r2, #22
 8002320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <HAL_DMA_IRQHandler+0x1da>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0208 	bic.w	r2, r2, #8
 8002350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	223f      	movs	r2, #63	; 0x3f
 8002358:	409a      	lsls	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002372:	2b00      	cmp	r3, #0
 8002374:	d07e      	beq.n	8002474 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
        }
        return;
 800237e:	e079      	b.n	8002474 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01d      	beq.n	80023ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d031      	beq.n	8002408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
 80023ac:	e02c      	b.n	8002408 <HAL_DMA_IRQHandler+0x2a0>
 80023ae:	bf00      	nop
 80023b0:	20000008 	.word	0x20000008
 80023b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d023      	beq.n	8002408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3
 80023c8:	e01e      	b.n	8002408 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10f      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0210 	bic.w	r2, r2, #16
 80023e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	2b00      	cmp	r3, #0
 800240e:	d032      	beq.n	8002476 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d022      	beq.n	8002462 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2205      	movs	r2, #5
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	3301      	adds	r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	d307      	bcc.n	8002450 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f2      	bne.n	8002434 <HAL_DMA_IRQHandler+0x2cc>
 800244e:	e000      	b.n	8002452 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002450:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	4798      	blx	r3
 8002472:	e000      	b.n	8002476 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002474:	bf00      	nop
    }
  }
}
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d108      	bne.n	80024bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ba:	e007      	b.n	80024cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3b10      	subs	r3, #16
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <DMA_CalcBaseAndBitshift+0x64>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <DMA_CalcBaseAndBitshift+0x68>)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d909      	bls.n	800251a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800250e:	f023 0303 	bic.w	r3, r3, #3
 8002512:	1d1a      	adds	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	659a      	str	r2, [r3, #88]	; 0x58
 8002518:	e007      	b.n	800252a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	aaaaaaab 	.word	0xaaaaaaab
 8002540:	0800c318 	.word	0x0800c318

08002544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d11f      	bne.n	800259e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d856      	bhi.n	8002612 <DMA_CheckFifoParam+0xce>
 8002564:	a201      	add	r2, pc, #4	; (adr r2, 800256c <DMA_CheckFifoParam+0x28>)
 8002566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256a:	bf00      	nop
 800256c:	0800257d 	.word	0x0800257d
 8002570:	0800258f 	.word	0x0800258f
 8002574:	0800257d 	.word	0x0800257d
 8002578:	08002613 	.word	0x08002613
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d046      	beq.n	8002616 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258c:	e043      	b.n	8002616 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002596:	d140      	bne.n	800261a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259c:	e03d      	b.n	800261a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a6:	d121      	bne.n	80025ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d837      	bhi.n	800261e <DMA_CheckFifoParam+0xda>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <DMA_CheckFifoParam+0x70>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025cb 	.word	0x080025cb
 80025bc:	080025c5 	.word	0x080025c5
 80025c0:	080025dd 	.word	0x080025dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      break;
 80025c8:	e030      	b.n	800262c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d025      	beq.n	8002622 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025da:	e022      	b.n	8002622 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025e4:	d11f      	bne.n	8002626 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ea:	e01c      	b.n	8002626 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d903      	bls.n	80025fa <DMA_CheckFifoParam+0xb6>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d003      	beq.n	8002600 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025f8:	e018      	b.n	800262c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
      break;
 80025fe:	e015      	b.n	800262c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00e      	beq.n	800262a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e00b      	b.n	800262a <DMA_CheckFifoParam+0xe6>
      break;
 8002612:	bf00      	nop
 8002614:	e00a      	b.n	800262c <DMA_CheckFifoParam+0xe8>
      break;
 8002616:	bf00      	nop
 8002618:	e008      	b.n	800262c <DMA_CheckFifoParam+0xe8>
      break;
 800261a:	bf00      	nop
 800261c:	e006      	b.n	800262c <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e004      	b.n	800262c <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e002      	b.n	800262c <DMA_CheckFifoParam+0xe8>
      break;   
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
    }
  } 
  
  return status; 
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e159      	b.n	800290c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	429a      	cmp	r2, r3
 8002672:	f040 8148 	bne.w	8002906 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d005      	beq.n	800268e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	2b02      	cmp	r3, #2
 800268c:	d130      	bne.n	80026f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0201 	and.w	r2, r3, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d017      	beq.n	800272c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d123      	bne.n	8002780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a2 	beq.w	8002906 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b57      	ldr	r3, [pc, #348]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027de:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_GPIO_Init+0x2ec>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a49      	ldr	r2, [pc, #292]	; (800292c <HAL_GPIO_Init+0x2f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d019      	beq.n	800283e <HAL_GPIO_Init+0x202>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_GPIO_Init+0x2f4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0x1fe>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a47      	ldr	r2, [pc, #284]	; (8002934 <HAL_GPIO_Init+0x2f8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00d      	beq.n	8002836 <HAL_GPIO_Init+0x1fa>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a46      	ldr	r2, [pc, #280]	; (8002938 <HAL_GPIO_Init+0x2fc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <HAL_GPIO_Init+0x1f6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a45      	ldr	r2, [pc, #276]	; (800293c <HAL_GPIO_Init+0x300>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_GPIO_Init+0x1f2>
 800282a:	2304      	movs	r3, #4
 800282c:	e008      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800282e:	2307      	movs	r3, #7
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x204>
 8002832:	2303      	movs	r3, #3
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x204>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800283e:	2300      	movs	r3, #0
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f002 0203 	and.w	r2, r2, #3
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002850:	4935      	ldr	r1, [pc, #212]	; (8002928 <HAL_GPIO_Init+0x2ec>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_GPIO_Init+0x304>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ac:	4a24      	ldr	r2, [pc, #144]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002900:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3301      	adds	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	f67f aea2 	bls.w	8002658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40013800 	.word	0x40013800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021000 	.word	0x40021000
 8002940:	40013c00 	.word	0x40013c00

08002944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e001      	b.n	8002966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
 8002980:	4613      	mov	r3, r2
 8002982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002990:	e003      	b.n	800299a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	041a      	lsls	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	619a      	str	r2, [r3, #24]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e12b      	b.n	8002c12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe ff5c 	bl	800188c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	; 0x24
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f001 fd22 	bl	8004454 <HAL_RCC_GetPCLK1Freq>
 8002a10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a81      	ldr	r2, [pc, #516]	; (8002c1c <HAL_I2C_Init+0x274>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d807      	bhi.n	8002a2c <HAL_I2C_Init+0x84>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a80      	ldr	r2, [pc, #512]	; (8002c20 <HAL_I2C_Init+0x278>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bf94      	ite	ls
 8002a24:	2301      	movls	r3, #1
 8002a26:	2300      	movhi	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e006      	b.n	8002a3a <HAL_I2C_Init+0x92>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a7d      	ldr	r2, [pc, #500]	; (8002c24 <HAL_I2C_Init+0x27c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	bf94      	ite	ls
 8002a34:	2301      	movls	r3, #1
 8002a36:	2300      	movhi	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0e7      	b.n	8002c12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a78      	ldr	r2, [pc, #480]	; (8002c28 <HAL_I2C_Init+0x280>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	0c9b      	lsrs	r3, r3, #18
 8002a4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a6a      	ldr	r2, [pc, #424]	; (8002c1c <HAL_I2C_Init+0x274>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d802      	bhi.n	8002a7c <HAL_I2C_Init+0xd4>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	e009      	b.n	8002a90 <HAL_I2C_Init+0xe8>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	4a69      	ldr	r2, [pc, #420]	; (8002c2c <HAL_I2C_Init+0x284>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	3301      	adds	r3, #1
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	495c      	ldr	r1, [pc, #368]	; (8002c1c <HAL_I2C_Init+0x274>)
 8002aac:	428b      	cmp	r3, r1
 8002aae:	d819      	bhi.n	8002ae4 <HAL_I2C_Init+0x13c>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1e59      	subs	r1, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abe:	1c59      	adds	r1, r3, #1
 8002ac0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ac4:	400b      	ands	r3, r1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_I2C_Init+0x138>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1e59      	subs	r1, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ade:	e051      	b.n	8002b84 <HAL_I2C_Init+0x1dc>
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	e04f      	b.n	8002b84 <HAL_I2C_Init+0x1dc>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d111      	bne.n	8002b10 <HAL_I2C_Init+0x168>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	440b      	add	r3, r1
 8002afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e012      	b.n	8002b36 <HAL_I2C_Init+0x18e>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1e58      	subs	r0, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	0099      	lsls	r1, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Init+0x196>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e022      	b.n	8002b84 <HAL_I2C_Init+0x1dc>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10e      	bne.n	8002b64 <HAL_I2C_Init+0x1bc>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1e58      	subs	r0, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	440b      	add	r3, r1
 8002b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b62:	e00f      	b.n	8002b84 <HAL_I2C_Init+0x1dc>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1e58      	subs	r0, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	0099      	lsls	r1, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	6809      	ldr	r1, [r1, #0]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6911      	ldr	r1, [r2, #16]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68d2      	ldr	r2, [r2, #12]
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	000186a0 	.word	0x000186a0
 8002c20:	001e847f 	.word	0x001e847f
 8002c24:	003d08ff 	.word	0x003d08ff
 8002c28:	431bde83 	.word	0x431bde83
 8002c2c:	10624dd3 	.word	0x10624dd3

08002c30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	817b      	strh	r3, [r7, #10]
 8002c40:	4613      	mov	r3, r2
 8002c42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff f856 	bl	8001cf4 <HAL_GetTick>
 8002c48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	f040 80e0 	bne.w	8002e18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2319      	movs	r3, #25
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4970      	ldr	r1, [pc, #448]	; (8002e24 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fde8 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e0d3      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_I2C_Master_Transmit+0x50>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0cc      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x1ea>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d007      	beq.n	8002ca6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2221      	movs	r2, #33	; 0x21
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	893a      	ldrh	r2, [r7, #8]
 8002cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a50      	ldr	r2, [pc, #320]	; (8002e28 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ce8:	8979      	ldrh	r1, [r7, #10]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fbbc 	bl	800346c <I2C_MasterRequestWrite>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e08d      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d14:	e066      	b.n	8002de4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	6a39      	ldr	r1, [r7, #32]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fe62 	bl	80039e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d107      	bne.n	8002d3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11b      	bne.n	8002db8 <HAL_I2C_Master_Transmit+0x188>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d017      	beq.n	8002db8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	6a39      	ldr	r1, [r7, #32]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fe52 	bl	8003a66 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d107      	bne.n	8002de0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e01a      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d194      	bne.n	8002d16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	00100002 	.word	0x00100002
 8002e28:	ffff0000 	.word	0xffff0000

08002e2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	461a      	mov	r2, r3
 8002e38:	460b      	mov	r3, r1
 8002e3a:	817b      	strh	r3, [r7, #10]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e40:	f7fe ff58 	bl	8001cf4 <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	f040 820b 	bne.w	800326a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2319      	movs	r3, #25
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	497c      	ldr	r1, [pc, #496]	; (8003050 <HAL_I2C_Master_Receive+0x224>)
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fcea 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e1fe      	b.n	800326c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_I2C_Master_Receive+0x50>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e1f7      	b.n	800326c <HAL_I2C_Master_Receive+0x440>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d007      	beq.n	8002ea2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2222      	movs	r2, #34	; 0x22
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	893a      	ldrh	r2, [r7, #8]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a5c      	ldr	r2, [pc, #368]	; (8003054 <HAL_I2C_Master_Receive+0x228>)
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ee4:	8979      	ldrh	r1, [r7, #10]
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fb40 	bl	8003570 <I2C_MasterRequestRead>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e1b8      	b.n	800326c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d113      	bne.n	8002f2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e18c      	b.n	8003244 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d11b      	bne.n	8002f6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e16c      	b.n	8003244 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d11b      	bne.n	8002faa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f92:	2300      	movs	r3, #0
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	e14c      	b.n	8003244 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fd0:	e138      	b.n	8003244 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	f200 80f1 	bhi.w	80031be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d123      	bne.n	800302c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fd7d 	bl	8003ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e139      	b.n	800326c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
 800302a:	e10b      	b.n	8003244 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	2b02      	cmp	r3, #2
 8003032:	d14e      	bne.n	80030d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	4906      	ldr	r1, [pc, #24]	; (8003058 <HAL_I2C_Master_Receive+0x22c>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fbfa 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e10e      	b.n	800326c <HAL_I2C_Master_Receive+0x440>
 800304e:	bf00      	nop
 8003050:	00100002 	.word	0x00100002
 8003054:	ffff0000 	.word	0xffff0000
 8003058:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d0:	e0b8      	b.n	8003244 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	2200      	movs	r2, #0
 80030da:	4966      	ldr	r1, [pc, #408]	; (8003274 <HAL_I2C_Master_Receive+0x448>)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fbab 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0bf      	b.n	800326c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	2200      	movs	r2, #0
 8003136:	494f      	ldr	r1, [pc, #316]	; (8003274 <HAL_I2C_Master_Receive+0x448>)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fb7d 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e091      	b.n	800326c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003156:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031bc:	e042      	b.n	8003244 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fc90 	bl	8003ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e04c      	b.n	800326c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d118      	bne.n	8003244 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	f47f aec2 	bne.w	8002fd2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3728      	adds	r7, #40	; 0x28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	00010004 	.word	0x00010004

08003278 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	817b      	strh	r3, [r7, #10]
 800328a:	460b      	mov	r3, r1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003292:	f7fe fd2f 	bl	8001cf4 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	f040 80d9 	bne.w	8003458 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2319      	movs	r3, #25
 80032ac:	2201      	movs	r2, #1
 80032ae:	496d      	ldr	r1, [pc, #436]	; (8003464 <HAL_I2C_Mem_Write+0x1ec>)
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fac1 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
 80032be:	e0cc      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Mem_Write+0x56>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0c5      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d007      	beq.n	80032f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2221      	movs	r2, #33	; 0x21
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2240      	movs	r2, #64	; 0x40
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a3a      	ldr	r2, [r7, #32]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a4d      	ldr	r2, [pc, #308]	; (8003468 <HAL_I2C_Mem_Write+0x1f0>)
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003336:	88f8      	ldrh	r0, [r7, #6]
 8003338:	893a      	ldrh	r2, [r7, #8]
 800333a:	8979      	ldrh	r1, [r7, #10]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4603      	mov	r3, r0
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f9e0 	bl	800370c <I2C_RequestMemoryWrite>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d052      	beq.n	80033f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e081      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fb42 	bl	80039e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e06b      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11b      	bne.n	80033f8 <HAL_I2C_Mem_Write+0x180>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d017      	beq.n	80033f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1aa      	bne.n	8003356 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fb2e 	bl	8003a66 <I2C_WaitOnBTFFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00d      	beq.n	800342c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2b04      	cmp	r3, #4
 8003416:	d107      	bne.n	8003428 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003426:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e016      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	00100002 	.word	0x00100002
 8003468:	ffff0000 	.word	0xffff0000

0800346c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	460b      	mov	r3, r1
 800347a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d006      	beq.n	8003496 <I2C_MasterRequestWrite+0x2a>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d003      	beq.n	8003496 <I2C_MasterRequestWrite+0x2a>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003494:	d108      	bne.n	80034a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e00b      	b.n	80034c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	2b12      	cmp	r3, #18
 80034ae:	d107      	bne.n	80034c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f9b3 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e6:	d103      	bne.n	80034f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e035      	b.n	8003560 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fc:	d108      	bne.n	8003510 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034fe:	897b      	ldrh	r3, [r7, #10]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800350c:	611a      	str	r2, [r3, #16]
 800350e:	e01b      	b.n	8003548 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	11db      	asrs	r3, r3, #7
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 0306 	and.w	r3, r3, #6
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f063 030f 	orn	r3, r3, #15
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	490e      	ldr	r1, [pc, #56]	; (8003568 <I2C_MasterRequestWrite+0xfc>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f9d9 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e010      	b.n	8003560 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800353e:	897b      	ldrh	r3, [r7, #10]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4907      	ldr	r1, [pc, #28]	; (800356c <I2C_MasterRequestWrite+0x100>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f9c9 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	00010008 	.word	0x00010008
 800356c:	00010002 	.word	0x00010002

08003570 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	460b      	mov	r3, r1
 800357e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003594:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d006      	beq.n	80035aa <I2C_MasterRequestRead+0x3a>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d003      	beq.n	80035aa <I2C_MasterRequestRead+0x3a>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035a8:	d108      	bne.n	80035bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e00b      	b.n	80035d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	2b11      	cmp	r3, #17
 80035c2:	d107      	bne.n	80035d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f929 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fa:	d103      	bne.n	8003604 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e079      	b.n	80036fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003610:	d108      	bne.n	8003624 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	611a      	str	r2, [r3, #16]
 8003622:	e05f      	b.n	80036e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003624:	897b      	ldrh	r3, [r7, #10]
 8003626:	11db      	asrs	r3, r3, #7
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0306 	and.w	r3, r3, #6
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f063 030f 	orn	r3, r3, #15
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4930      	ldr	r1, [pc, #192]	; (8003704 <I2C_MasterRequestRead+0x194>)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f94f 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e054      	b.n	80036fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003652:	897b      	ldrh	r3, [r7, #10]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4929      	ldr	r1, [pc, #164]	; (8003708 <I2C_MasterRequestRead+0x198>)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f93f 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e044      	b.n	80036fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003696:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f8c7 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00d      	beq.n	80036cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036be:	d103      	bne.n	80036c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e017      	b.n	80036fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80036cc:	897b      	ldrh	r3, [r7, #10]
 80036ce:	11db      	asrs	r3, r3, #7
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 0306 	and.w	r3, r3, #6
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f063 030e 	orn	r3, r3, #14
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4907      	ldr	r1, [pc, #28]	; (8003708 <I2C_MasterRequestRead+0x198>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8fb 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	00010008 	.word	0x00010008
 8003708:	00010002 	.word	0x00010002

0800370c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	2200      	movs	r2, #0
 800373e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f878 	bl	8003838 <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375c:	d103      	bne.n	8003766 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e05f      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003778:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	492d      	ldr	r1, [pc, #180]	; (8003834 <I2C_RequestMemoryWrite+0x128>)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f8b0 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e04c      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f91a 	bl	80039e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d107      	bne.n	80037ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e02b      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d8:	893b      	ldrh	r3, [r7, #8]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	611a      	str	r2, [r3, #16]
 80037e2:	e021      	b.n	8003828 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037e4:	893b      	ldrh	r3, [r7, #8]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	6a39      	ldr	r1, [r7, #32]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f8f4 	bl	80039e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b04      	cmp	r3, #4
 8003808:	d107      	bne.n	800381a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003818:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e005      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800381e:	893b      	ldrh	r3, [r7, #8]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	00010002 	.word	0x00010002

08003838 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003848:	e025      	b.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d021      	beq.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7fe fa4f 	bl	8001cf4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d302      	bcc.n	8003868 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d116      	bne.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e023      	b.n	80038de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10d      	bne.n	80038bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4013      	ands	r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	e00c      	b.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d0b6      	beq.n	800384a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038f4:	e051      	b.n	800399a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003904:	d123      	bne.n	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003914:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800391e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f043 0204 	orr.w	r2, r3, #4
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e046      	b.n	80039dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d021      	beq.n	800399a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fe f9cd 	bl	8001cf4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e020      	b.n	80039dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10c      	bne.n	80039be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	e00b      	b.n	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	43da      	mvns	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4013      	ands	r3, r2
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d18d      	bne.n	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f0:	e02d      	b.n	8003a4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f8ce 	bl	8003b94 <I2C_IsAcknowledgeFailed>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e02d      	b.n	8003a5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d021      	beq.n	8003a4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fe f973 	bl	8001cf4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d116      	bne.n	8003a4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e007      	b.n	8003a5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b80      	cmp	r3, #128	; 0x80
 8003a5a:	d1ca      	bne.n	80039f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a72:	e02d      	b.n	8003ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f88d 	bl	8003b94 <I2C_IsAcknowledgeFailed>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e02d      	b.n	8003ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d021      	beq.n	8003ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8c:	f7fe f932 	bl	8001cf4 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e007      	b.n	8003ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d1ca      	bne.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003af4:	e042      	b.n	8003b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	d119      	bne.n	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0210 	mvn.w	r2, #16
 8003b0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e029      	b.n	8003b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b38:	f7fe f8dc 	bl	8001cf4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d302      	bcc.n	8003b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d116      	bne.n	8003b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f043 0220 	orr.w	r2, r3, #32
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e007      	b.n	8003b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d1b5      	bne.n	8003af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003baa:	d11b      	bne.n	8003be4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e267      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d075      	beq.n	8003cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c12:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d00c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4b85      	ldr	r3, [pc, #532]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d112      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4b82      	ldr	r3, [pc, #520]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	4b7e      	ldr	r3, [pc, #504]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05b      	beq.n	8003cfc <HAL_RCC_OscConfig+0x108>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d157      	bne.n	8003cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e242      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d106      	bne.n	8003c68 <HAL_RCC_OscConfig+0x74>
 8003c5a:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a75      	ldr	r2, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x98>
 8003c72:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6f      	ldr	r2, [pc, #444]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b6d      	ldr	r3, [pc, #436]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6c      	ldr	r2, [pc, #432]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c8c:	4b69      	ldr	r3, [pc, #420]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a68      	ldr	r2, [pc, #416]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b66      	ldr	r3, [pc, #408]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a65      	ldr	r2, [pc, #404]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe f822 	bl	8001cf4 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f81e 	bl	8001cf4 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e207      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b5b      	ldr	r3, [pc, #364]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xc0>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe f80e 	bl	8001cf4 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe f80a 	bl	8001cf4 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1f3      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0xe8>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b44      	ldr	r3, [pc, #272]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b41      	ldr	r3, [pc, #260]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1c7      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4937      	ldr	r1, [pc, #220]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e03a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <HAL_RCC_OscConfig+0x244>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fd ffc3 	bl	8001cf4 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fd ffbf 	bl	8001cf4 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1a8      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4925      	ldr	r1, [pc, #148]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x244>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd ffa2 	bl	8001cf4 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db4:	f7fd ff9e 	bl	8001cf4 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e187      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d036      	beq.n	8003e4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x248>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fd ff82 	bl	8001cf4 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fd ff7e 	bl	8001cf4 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e167      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x200>
 8003e12:	e01b      	b.n	8003e4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_OscConfig+0x248>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fd ff6b 	bl	8001cf4 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	e00e      	b.n	8003e40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fd ff67 	bl	8001cf4 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d907      	bls.n	8003e40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e150      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
 8003e34:	40023800 	.word	0x40023800
 8003e38:	42470000 	.word	0x42470000
 8003e3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ea      	bne.n	8003e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8097 	beq.w	8003f88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5e:	4b81      	ldr	r3, [pc, #516]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a7c      	ldr	r2, [pc, #496]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	4b7a      	ldr	r3, [pc, #488]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b77      	ldr	r3, [pc, #476]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d118      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e96:	4b74      	ldr	r3, [pc, #464]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a73      	ldr	r2, [pc, #460]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea2:	f7fd ff27 	bl	8001cf4 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eaa:	f7fd ff23 	bl	8001cf4 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e10c      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x2ea>
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a63      	ldr	r2, [pc, #396]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	e01c      	b.n	8003f18 <HAL_RCC_OscConfig+0x324>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x30c>
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a5e      	ldr	r2, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a5b      	ldr	r2, [pc, #364]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0x324>
 8003f00:	4b58      	ldr	r3, [pc, #352]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a57      	ldr	r2, [pc, #348]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	4b55      	ldr	r3, [pc, #340]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a54      	ldr	r2, [pc, #336]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f023 0304 	bic.w	r3, r3, #4
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d015      	beq.n	8003f4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd fee8 	bl	8001cf4 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fd fee4 	bl	8001cf4 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0cb      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	4b49      	ldr	r3, [pc, #292]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ee      	beq.n	8003f28 <HAL_RCC_OscConfig+0x334>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4c:	f7fd fed2 	bl	8001cf4 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f54:	f7fd fece 	bl	8001cf4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e0b5      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ee      	bne.n	8003f54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b39      	ldr	r3, [pc, #228]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	4a38      	ldr	r2, [pc, #224]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a1 	beq.w	80040d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f92:	4b34      	ldr	r3, [pc, #208]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d05c      	beq.n	8004058 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d141      	bne.n	800402a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b31      	ldr	r3, [pc, #196]	; (800406c <HAL_RCC_OscConfig+0x478>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd fea2 	bl	8001cf4 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fd fe9e 	bl	8001cf4 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e087      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	3b01      	subs	r3, #1
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	491b      	ldr	r1, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_OscConfig+0x478>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fd fe77 	bl	8001cf4 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400a:	f7fd fe73 	bl	8001cf4 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e05c      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x416>
 8004028:	e054      	b.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_RCC_OscConfig+0x478>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fd fe60 	bl	8001cf4 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd fe5c 	bl	8001cf4 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e045      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x444>
 8004056:	e03d      	b.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e038      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
 8004064:	40023800 	.word	0x40023800
 8004068:	40007000 	.word	0x40007000
 800406c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d028      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d121      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d11a      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d111      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	3b01      	subs	r3, #1
 80040ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800

080040e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cc      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b68      	ldr	r3, [pc, #416]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d90c      	bls.n	8004120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b65      	ldr	r3, [pc, #404]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b63      	ldr	r3, [pc, #396]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0b8      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004138:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004150:	4b53      	ldr	r3, [pc, #332]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a52      	ldr	r2, [pc, #328]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	494d      	ldr	r1, [pc, #308]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d044      	beq.n	8004204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d119      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e07f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e067      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4934      	ldr	r1, [pc, #208]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fd fd8e 	bl	8001cf4 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fd fd8a 	bl	8001cf4 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b25      	ldr	r3, [pc, #148]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d20c      	bcs.n	800422c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e032      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4916      	ldr	r1, [pc, #88]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	490e      	ldr	r1, [pc, #56]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426a:	f000 f821 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 800426e:	4602      	mov	r2, r0
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	490a      	ldr	r1, [pc, #40]	; (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	5ccb      	ldrb	r3, [r1, r3]
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fd fc1e 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023c00 	.word	0x40023c00
 80042a0:	40023800 	.word	0x40023800
 80042a4:	0800c300 	.word	0x0800c300
 80042a8:	20000008 	.word	0x20000008
 80042ac:	2000000c 	.word	0x2000000c

080042b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b4:	b090      	sub	sp, #64	; 0x40
 80042b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34
 80042bc:	2300      	movs	r3, #0
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c0:	2300      	movs	r3, #0
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c8:	4b59      	ldr	r3, [pc, #356]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x40>
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	f200 80a1 	bhi.w	800441c <HAL_RCC_GetSysClockFreq+0x16c>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x34>
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x3a>
 80042e2:	e09b      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b53      	ldr	r3, [pc, #332]	; (8004434 <HAL_RCC_GetSysClockFreq+0x184>)
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042e8:	e09b      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ea:	4b53      	ldr	r3, [pc, #332]	; (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ee:	e098      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f0:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fa:	4b4d      	ldr	r3, [pc, #308]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d028      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	2200      	movs	r2, #0
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	627a      	str	r2, [r7, #36]	; 0x24
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004318:	2100      	movs	r1, #0
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 800431c:	fb03 f201 	mul.w	r2, r3, r1
 8004320:	2300      	movs	r3, #0
 8004322:	fb00 f303 	mul.w	r3, r0, r3
 8004326:	4413      	add	r3, r2
 8004328:	4a43      	ldr	r2, [pc, #268]	; (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 800432a:	fba0 1202 	umull	r1, r2, r0, r2
 800432e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004330:	460a      	mov	r2, r1
 8004332:	62ba      	str	r2, [r7, #40]	; 0x28
 8004334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004336:	4413      	add	r3, r2
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433c:	2200      	movs	r2, #0
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004346:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800434a:	f7fb ff49 	bl	80001e0 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4613      	mov	r3, r2
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004356:	e053      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004358:	4b35      	ldr	r3, [pc, #212]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	2200      	movs	r2, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	617a      	str	r2, [r7, #20]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800436a:	f04f 0b00 	mov.w	fp, #0
 800436e:	4652      	mov	r2, sl
 8004370:	465b      	mov	r3, fp
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	0159      	lsls	r1, r3, #5
 800437c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004380:	0150      	lsls	r0, r2, #5
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	ebb2 080a 	subs.w	r8, r2, sl
 800438a:	eb63 090b 	sbc.w	r9, r3, fp
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800439a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800439e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043a2:	ebb2 0408 	subs.w	r4, r2, r8
 80043a6:	eb63 0509 	sbc.w	r5, r3, r9
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	00eb      	lsls	r3, r5, #3
 80043b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b8:	00e2      	lsls	r2, r4, #3
 80043ba:	4614      	mov	r4, r2
 80043bc:	461d      	mov	r5, r3
 80043be:	eb14 030a 	adds.w	r3, r4, sl
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	eb45 030b 	adc.w	r3, r5, fp
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043d6:	4629      	mov	r1, r5
 80043d8:	028b      	lsls	r3, r1, #10
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e0:	4621      	mov	r1, r4
 80043e2:	028a      	lsls	r2, r1, #10
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	2200      	movs	r2, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	60fa      	str	r2, [r7, #12]
 80043f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f4:	f7fb fef4 	bl	80001e0 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	3301      	adds	r3, #1
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800441a:	e002      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetSysClockFreq+0x184>)
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004424:	4618      	mov	r0, r3
 8004426:	3740      	adds	r7, #64	; 0x40
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	00f42400 	.word	0x00f42400
 8004438:	017d7840 	.word	0x017d7840

0800443c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004440:	4b03      	ldr	r3, [pc, #12]	; (8004450 <HAL_RCC_GetHCLKFreq+0x14>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000008 	.word	0x20000008

08004454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004458:	f7ff fff0 	bl	800443c <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	0a9b      	lsrs	r3, r3, #10
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4903      	ldr	r1, [pc, #12]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40023800 	.word	0x40023800
 8004478:	0800c310 	.word	0x0800c310

0800447c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004480:	f7ff ffdc 	bl	800443c <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0b5b      	lsrs	r3, r3, #13
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	0800c310 	.word	0x0800c310

080044a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	220f      	movs	r2, #15
 80044b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCC_GetClockConfig+0x5c>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0203 	and.w	r2, r3, #3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <HAL_RCC_GetClockConfig+0x5c>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RCC_GetClockConfig+0x5c>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_RCC_GetClockConfig+0x5c>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <HAL_RCC_GetClockConfig+0x60>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0207 	and.w	r2, r3, #7
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	601a      	str	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	40023c00 	.word	0x40023c00

08004508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e07b      	b.n	8004612 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452a:	d009      	beq.n	8004540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
 8004532:	e005      	b.n	8004540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fd f9de 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	f003 0104 	and.w	r1, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0210 	and.w	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b088      	sub	sp, #32
 800461e:	af02      	add	r7, sp, #8
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004636:	d112      	bne.n	800465e <HAL_SPI_Receive+0x44>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10e      	bne.n	800465e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2204      	movs	r2, #4
 8004644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f8f1 	bl	800483c <HAL_SPI_TransmitReceive>
 800465a:	4603      	mov	r3, r0
 800465c:	e0ea      	b.n	8004834 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_SPI_Receive+0x52>
 8004668:	2302      	movs	r3, #2
 800466a:	e0e3      	b.n	8004834 <HAL_SPI_Receive+0x21a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004674:	f7fd fb3e 	bl	8001cf4 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d002      	beq.n	800468c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004686:	2302      	movs	r3, #2
 8004688:	75fb      	strb	r3, [r7, #23]
    goto error;
 800468a:	e0ca      	b.n	8004822 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_SPI_Receive+0x7e>
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800469c:	e0c1      	b.n	8004822 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2204      	movs	r2, #4
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	88fa      	ldrh	r2, [r7, #6]
 80046b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e4:	d10f      	bne.n	8004706 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004704:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d007      	beq.n	8004724 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004722:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d162      	bne.n	80047f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800472c:	e02e      	b.n	800478c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d115      	bne.n	8004768 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f103 020c 	add.w	r2, r3, #12
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	7812      	ldrb	r2, [r2, #0]
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475c:	b29b      	uxth	r3, r3
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004766:	e011      	b.n	800478c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004768:	f7fd fac4 	bl	8001cf4 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d803      	bhi.n	8004780 <HAL_SPI_Receive+0x166>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	d102      	bne.n	8004786 <HAL_SPI_Receive+0x16c>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	75fb      	strb	r3, [r7, #23]
          goto error;
 800478a:	e04a      	b.n	8004822 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1cb      	bne.n	800472e <HAL_SPI_Receive+0x114>
 8004796:	e031      	b.n	80047fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d113      	bne.n	80047ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	b292      	uxth	r2, r2
 80047b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	1c9a      	adds	r2, r3, #2
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047cc:	e011      	b.n	80047f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ce:	f7fd fa91 	bl	8001cf4 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d803      	bhi.n	80047e6 <HAL_SPI_Receive+0x1cc>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d102      	bne.n	80047ec <HAL_SPI_Receive+0x1d2>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047f0:	e017      	b.n	8004822 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1cd      	bne.n	8004798 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	6839      	ldr	r1, [r7, #0]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fa45 	bl	8004c90 <SPI_EndRxTransaction>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	75fb      	strb	r3, [r7, #23]
 800481e:	e000      	b.n	8004822 <HAL_SPI_Receive+0x208>
  }

error :
 8004820:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004832:	7dfb      	ldrb	r3, [r7, #23]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08c      	sub	sp, #48	; 0x30
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800484a:	2301      	movs	r3, #1
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x26>
 800485e:	2302      	movs	r3, #2
 8004860:	e18a      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x33c>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800486a:	f7fd fa43 	bl	8001cf4 <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004880:	887b      	ldrh	r3, [r7, #2]
 8004882:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004888:	2b01      	cmp	r3, #1
 800488a:	d00f      	beq.n	80048ac <HAL_SPI_TransmitReceive+0x70>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004892:	d107      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x68>
 800489c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d003      	beq.n	80048ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048aa:	e15b      	b.n	8004b64 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_SPI_TransmitReceive+0x82>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_SPI_TransmitReceive+0x82>
 80048b8:	887b      	ldrh	r3, [r7, #2]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048c4:	e14e      	b.n	8004b64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d003      	beq.n	80048da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2205      	movs	r2, #5
 80048d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	887a      	ldrh	r2, [r7, #2]
 80048ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	887a      	ldrh	r2, [r7, #2]
 8004902:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d007      	beq.n	800492e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800492c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004936:	d178      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_SPI_TransmitReceive+0x10a>
 8004940:	8b7b      	ldrh	r3, [r7, #26]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d166      	bne.n	8004a14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	1c9a      	adds	r2, r3, #2
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800496a:	e053      	b.n	8004a14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d11b      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x176>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d016      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x176>
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d113      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	881a      	ldrh	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	1c9a      	adds	r2, r3, #2
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d119      	bne.n	80049f4 <HAL_SPI_TransmitReceive+0x1b8>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d014      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	b292      	uxth	r2, r2
 80049d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	1c9a      	adds	r2, r3, #2
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049f0:	2301      	movs	r3, #1
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049f4:	f7fd f97e 	bl	8001cf4 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d807      	bhi.n	8004a14 <HAL_SPI_TransmitReceive+0x1d8>
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d003      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a12:	e0a7      	b.n	8004b64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1a6      	bne.n	800496c <HAL_SPI_TransmitReceive+0x130>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1a1      	bne.n	800496c <HAL_SPI_TransmitReceive+0x130>
 8004a28:	e07c      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x1fc>
 8004a32:	8b7b      	ldrh	r3, [r7, #26]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d16b      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a5e:	e057      	b.n	8004b10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x26c>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d017      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x26c>
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d114      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d119      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x2ae>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d014      	beq.n	8004aea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aea:	f7fd f903 	bl	8001cf4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d803      	bhi.n	8004b02 <HAL_SPI_TransmitReceive+0x2c6>
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d102      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x2cc>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b0e:	e029      	b.n	8004b64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1a2      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x224>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d19d      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f917 	bl	8004d5c <SPI_EndRxTxTransaction>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d006      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b40:	e010      	b.n	8004b64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	e000      	b.n	8004b64 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004b62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3730      	adds	r7, #48	; 0x30
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b90:	f7fd f8b0 	bl	8001cf4 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ba0:	f7fd f8a8 	bl	8001cf4 <HAL_GetTick>
 8004ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	015b      	lsls	r3, r3, #5
 8004bac:	0d1b      	lsrs	r3, r3, #20
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bb6:	e054      	b.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d050      	beq.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bc0:	f7fd f898 	bl	8001cf4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d902      	bls.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13d      	bne.n	8004c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bee:	d111      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf8:	d004      	beq.n	8004c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c02:	d107      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1c:	d10f      	bne.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e017      	b.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	bf0c      	ite	eq
 8004c72:	2301      	moveq	r3, #1
 8004c74:	2300      	movne	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d19b      	bne.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000008 	.word	0x20000008

08004c90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ca4:	d111      	bne.n	8004cca <SPI_EndRxTransaction+0x3a>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cae:	d004      	beq.n	8004cba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb8:	d107      	bne.n	8004cca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd2:	d12a      	bne.n	8004d2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cdc:	d012      	beq.n	8004d04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2180      	movs	r1, #128	; 0x80
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff ff49 	bl	8004b80 <SPI_WaitFlagStateUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02d      	beq.n	8004d50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e026      	b.n	8004d52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff ff36 	bl	8004b80 <SPI_WaitFlagStateUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01a      	beq.n	8004d50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e013      	b.n	8004d52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2200      	movs	r2, #0
 8004d32:	2101      	movs	r1, #1
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff ff23 	bl	8004b80 <SPI_WaitFlagStateUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e000      	b.n	8004d52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d68:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <SPI_EndRxTxTransaction+0x7c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <SPI_EndRxTxTransaction+0x80>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	0d5b      	lsrs	r3, r3, #21
 8004d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d78:	fb02 f303 	mul.w	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d86:	d112      	bne.n	8004dae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2180      	movs	r1, #128	; 0x80
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff fef4 	bl	8004b80 <SPI_WaitFlagStateUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d016      	beq.n	8004dcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e00f      	b.n	8004dce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b80      	cmp	r3, #128	; 0x80
 8004dc6:	d0f2      	beq.n	8004dae <SPI_EndRxTxTransaction+0x52>
 8004dc8:	e000      	b.n	8004dcc <SPI_EndRxTxTransaction+0x70>
        break;
 8004dca:	bf00      	nop
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000008 	.word	0x20000008
 8004ddc:	165e9f81 	.word	0x165e9f81

08004de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e041      	b.n	8004e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fc fdd0 	bl	80019ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f000 fefe 	bl	8005c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d001      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e044      	b.n	8004f22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1e      	ldr	r2, [pc, #120]	; (8004f30 <HAL_TIM_Base_Start_IT+0xb0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec2:	d013      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <HAL_TIM_Base_Start_IT+0xb4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a19      	ldr	r2, [pc, #100]	; (8004f38 <HAL_TIM_Base_Start_IT+0xb8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d111      	bne.n	8004f10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d010      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	e007      	b.n	8004f20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40014000 	.word	0x40014000

08004f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e041      	b.n	8004fda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f839 	bl	8004fe2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f000 fe4c 	bl	8005c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e022      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x72>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d109      	bne.n	800503e <HAL_TIM_PWM_Start_DMA+0x46>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	bf0c      	ite	eq
 8005036:	2301      	moveq	r3, #1
 8005038:	2300      	movne	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e015      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x72>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d109      	bne.n	8005058 <HAL_TIM_PWM_Start_DMA+0x60>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e008      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x72>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
 8005070:	e15d      	b.n	800532e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <HAL_TIM_PWM_Start_DMA+0x94>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	e022      	b.n	80050d2 <HAL_TIM_PWM_Start_DMA+0xda>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b04      	cmp	r3, #4
 8005090:	d109      	bne.n	80050a6 <HAL_TIM_PWM_Start_DMA+0xae>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	bf0c      	ite	eq
 800509e:	2301      	moveq	r3, #1
 80050a0:	2300      	movne	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e015      	b.n	80050d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d109      	bne.n	80050c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e008      	b.n	80050d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d024      	beq.n	8005120 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_PWM_Start_DMA+0xee>
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e123      	b.n	800532e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f4:	e016      	b.n	8005124 <HAL_TIM_PWM_Start_DMA+0x12c>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_PWM_Start_DMA+0x10e>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005104:	e00e      	b.n	8005124 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d104      	bne.n	8005116 <HAL_TIM_PWM_Start_DMA+0x11e>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005114:	e006      	b.n	8005124 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2202      	movs	r2, #2
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800511e:	e001      	b.n	8005124 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e104      	b.n	800532e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b0c      	cmp	r3, #12
 8005128:	f200 80ae 	bhi.w	8005288 <HAL_TIM_PWM_Start_DMA+0x290>
 800512c:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005169 	.word	0x08005169
 8005138:	08005289 	.word	0x08005289
 800513c:	08005289 	.word	0x08005289
 8005140:	08005289 	.word	0x08005289
 8005144:	080051b1 	.word	0x080051b1
 8005148:	08005289 	.word	0x08005289
 800514c:	08005289 	.word	0x08005289
 8005150:	08005289 	.word	0x08005289
 8005154:	080051f9 	.word	0x080051f9
 8005158:	08005289 	.word	0x08005289
 800515c:	08005289 	.word	0x08005289
 8005160:	08005289 	.word	0x08005289
 8005164:	08005241 	.word	0x08005241
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	4a72      	ldr	r2, [pc, #456]	; (8005338 <HAL_TIM_PWM_Start_DMA+0x340>)
 800516e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	4a71      	ldr	r2, [pc, #452]	; (800533c <HAL_TIM_PWM_Start_DMA+0x344>)
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	4a70      	ldr	r2, [pc, #448]	; (8005340 <HAL_TIM_PWM_Start_DMA+0x348>)
 800517e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3334      	adds	r3, #52	; 0x34
 800518c:	461a      	mov	r2, r3
 800518e:	887b      	ldrh	r3, [r7, #2]
 8005190:	f7fc ff70 	bl	8002074 <HAL_DMA_Start_IT>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0c7      	b.n	800532e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ac:	60da      	str	r2, [r3, #12]
      break;
 80051ae:	e06e      	b.n	800528e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	4a60      	ldr	r2, [pc, #384]	; (8005338 <HAL_TIM_PWM_Start_DMA+0x340>)
 80051b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	4a5f      	ldr	r2, [pc, #380]	; (800533c <HAL_TIM_PWM_Start_DMA+0x344>)
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	4a5e      	ldr	r2, [pc, #376]	; (8005340 <HAL_TIM_PWM_Start_DMA+0x348>)
 80051c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3338      	adds	r3, #56	; 0x38
 80051d4:	461a      	mov	r2, r3
 80051d6:	887b      	ldrh	r3, [r7, #2]
 80051d8:	f7fc ff4c 	bl	8002074 <HAL_DMA_Start_IT>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e0a3      	b.n	800532e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051f4:	60da      	str	r2, [r3, #12]
      break;
 80051f6:	e04a      	b.n	800528e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	4a4e      	ldr	r2, [pc, #312]	; (8005338 <HAL_TIM_PWM_Start_DMA+0x340>)
 80051fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	4a4d      	ldr	r2, [pc, #308]	; (800533c <HAL_TIM_PWM_Start_DMA+0x344>)
 8005206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4a4c      	ldr	r2, [pc, #304]	; (8005340 <HAL_TIM_PWM_Start_DMA+0x348>)
 800520e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	333c      	adds	r3, #60	; 0x3c
 800521c:	461a      	mov	r2, r3
 800521e:	887b      	ldrh	r3, [r7, #2]
 8005220:	f7fc ff28 	bl	8002074 <HAL_DMA_Start_IT>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e07f      	b.n	800532e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523c:	60da      	str	r2, [r3, #12]
      break;
 800523e:	e026      	b.n	800528e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	4a3c      	ldr	r2, [pc, #240]	; (8005338 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005246:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	4a3b      	ldr	r2, [pc, #236]	; (800533c <HAL_TIM_PWM_Start_DMA+0x344>)
 800524e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	4a3a      	ldr	r2, [pc, #232]	; (8005340 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005256:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3340      	adds	r3, #64	; 0x40
 8005264:	461a      	mov	r2, r3
 8005266:	887b      	ldrh	r3, [r7, #2]
 8005268:	f7fc ff04 	bl	8002074 <HAL_DMA_Start_IT>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e05b      	b.n	800532e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005284:	60da      	str	r2, [r3, #12]
      break;
 8005286:	e002      	b.n	800528e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
      break;
 800528c:	bf00      	nop
  }

  if (status == HAL_OK)
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d14b      	bne.n	800532c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 ff65 	bl	800616c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a27      	ldr	r2, [pc, #156]	; (8005344 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d107      	bne.n	80052bc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a20      	ldr	r2, [pc, #128]	; (8005344 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d013      	beq.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <HAL_TIM_PWM_Start_DMA+0x350>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1b      	ldr	r2, [pc, #108]	; (800534c <HAL_TIM_PWM_Start_DMA+0x354>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a19      	ldr	r2, [pc, #100]	; (8005350 <HAL_TIM_PWM_Start_DMA+0x358>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d111      	bne.n	800531c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b06      	cmp	r3, #6
 8005308:	d010      	beq.n	800532c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	e007      	b.n	800532c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800532c:	7dfb      	ldrb	r3, [r7, #23]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	08005b11 	.word	0x08005b11
 800533c:	08005bb9 	.word	0x08005bb9
 8005340:	08005a7f 	.word	0x08005a7f
 8005344:	40010000 	.word	0x40010000
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40014000 	.word	0x40014000

08005358 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d855      	bhi.n	8005418 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080053a9 	.word	0x080053a9
 8005378:	08005419 	.word	0x08005419
 800537c:	08005419 	.word	0x08005419
 8005380:	08005419 	.word	0x08005419
 8005384:	080053c5 	.word	0x080053c5
 8005388:	08005419 	.word	0x08005419
 800538c:	08005419 	.word	0x08005419
 8005390:	08005419 	.word	0x08005419
 8005394:	080053e1 	.word	0x080053e1
 8005398:	08005419 	.word	0x08005419
 800539c:	08005419 	.word	0x08005419
 80053a0:	08005419 	.word	0x08005419
 80053a4:	080053fd 	.word	0x080053fd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc feb1 	bl	8002124 <HAL_DMA_Abort_IT>
      break;
 80053c2:	e02c      	b.n	800541e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fc fea3 	bl	8002124 <HAL_DMA_Abort_IT>
      break;
 80053de:	e01e      	b.n	800541e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fc fe95 	bl	8002124 <HAL_DMA_Abort_IT>
      break;
 80053fa:	e010      	b.n	800541e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800540a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	4618      	mov	r0, r3
 8005412:	f7fc fe87 	bl	8002124 <HAL_DMA_Abort_IT>
      break;
 8005416:	e002      	b.n	800541e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	bf00      	nop
  }

  if (status == HAL_OK)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d157      	bne.n	80054d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2200      	movs	r2, #0
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fe9d 	bl	800616c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d117      	bne.n	800546c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	f241 1311 	movw	r3, #4369	; 0x1111
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10f      	bne.n	800546c <HAL_TIM_PWM_Stop_DMA+0x114>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6a1a      	ldr	r2, [r3, #32]
 8005452:	f240 4344 	movw	r3, #1092	; 0x444
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d107      	bne.n	800546c <HAL_TIM_PWM_Stop_DMA+0x114>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800546a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	f241 1311 	movw	r3, #4369	; 0x1111
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10f      	bne.n	800549c <HAL_TIM_PWM_Stop_DMA+0x144>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6a1a      	ldr	r2, [r3, #32]
 8005482:	f240 4344 	movw	r3, #1092	; 0x444
 8005486:	4013      	ands	r3, r2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <HAL_TIM_PWM_Stop_DMA+0x144>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <HAL_TIM_PWM_Stop_DMA+0x154>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054aa:	e013      	b.n	80054d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d104      	bne.n	80054bc <HAL_TIM_PWM_Stop_DMA+0x164>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ba:	e00b      	b.n	80054d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d104      	bne.n	80054cc <HAL_TIM_PWM_Stop_DMA+0x174>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ca:	e003      	b.n	80054d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000

080054e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d122      	bne.n	8005540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b02      	cmp	r3, #2
 8005506:	d11b      	bne.n	8005540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0202 	mvn.w	r2, #2
 8005510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa77 	bl	8005a1a <HAL_TIM_IC_CaptureCallback>
 800552c:	e005      	b.n	800553a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa69 	bl	8005a06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fa7a 	bl	8005a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b04      	cmp	r3, #4
 800554c:	d122      	bne.n	8005594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b04      	cmp	r3, #4
 800555a:	d11b      	bne.n	8005594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0204 	mvn.w	r2, #4
 8005564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fa4d 	bl	8005a1a <HAL_TIM_IC_CaptureCallback>
 8005580:	e005      	b.n	800558e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa3f 	bl	8005a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fa50 	bl	8005a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d122      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d11b      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0208 	mvn.w	r2, #8
 80055b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2204      	movs	r2, #4
 80055be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa23 	bl	8005a1a <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa15 	bl	8005a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa26 	bl	8005a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d122      	bne.n	800563c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b10      	cmp	r3, #16
 8005602:	d11b      	bne.n	800563c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0210 	mvn.w	r2, #16
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2208      	movs	r2, #8
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9f9 	bl	8005a1a <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9eb 	bl	8005a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f9fc 	bl	8005a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d10e      	bne.n	8005668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b01      	cmp	r3, #1
 8005656:	d107      	bne.n	8005668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0201 	mvn.w	r2, #1
 8005660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc f8ce 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d10e      	bne.n	8005694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d107      	bne.n	8005694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fe0a 	bl	80062a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d10e      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d107      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9cb 	bl	8005a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d10e      	bne.n	80056ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d107      	bne.n	80056ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0220 	mvn.w	r2, #32
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fdd4 	bl	8006294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800570e:	2302      	movs	r3, #2
 8005710:	e0ae      	b.n	8005870 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b0c      	cmp	r3, #12
 800571e:	f200 809f 	bhi.w	8005860 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	0800575d 	.word	0x0800575d
 800572c:	08005861 	.word	0x08005861
 8005730:	08005861 	.word	0x08005861
 8005734:	08005861 	.word	0x08005861
 8005738:	0800579d 	.word	0x0800579d
 800573c:	08005861 	.word	0x08005861
 8005740:	08005861 	.word	0x08005861
 8005744:	08005861 	.word	0x08005861
 8005748:	080057df 	.word	0x080057df
 800574c:	08005861 	.word	0x08005861
 8005750:	08005861 	.word	0x08005861
 8005754:	08005861 	.word	0x08005861
 8005758:	0800581f 	.word	0x0800581f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68b9      	ldr	r1, [r7, #8]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fadc 	bl	8005d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0208 	orr.w	r2, r2, #8
 8005776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0204 	bic.w	r2, r2, #4
 8005786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6999      	ldr	r1, [r3, #24]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	619a      	str	r2, [r3, #24]
      break;
 800579a:	e064      	b.n	8005866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fb22 	bl	8005dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6999      	ldr	r1, [r3, #24]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	021a      	lsls	r2, r3, #8
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	619a      	str	r2, [r3, #24]
      break;
 80057dc:	e043      	b.n	8005866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fb6d 	bl	8005ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0208 	orr.w	r2, r2, #8
 80057f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69da      	ldr	r2, [r3, #28]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0204 	bic.w	r2, r2, #4
 8005808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69d9      	ldr	r1, [r3, #28]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	61da      	str	r2, [r3, #28]
      break;
 800581c:	e023      	b.n	8005866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fbb7 	bl	8005f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69da      	ldr	r2, [r3, #28]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69d9      	ldr	r1, [r3, #28]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	021a      	lsls	r2, r3, #8
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	61da      	str	r2, [r3, #28]
      break;
 800585e:	e002      	b.n	8005866 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	75fb      	strb	r3, [r7, #23]
      break;
 8005864:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIM_ConfigClockSource+0x1c>
 8005890:	2302      	movs	r3, #2
 8005892:	e0b4      	b.n	80059fe <HAL_TIM_ConfigClockSource+0x186>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058cc:	d03e      	beq.n	800594c <HAL_TIM_ConfigClockSource+0xd4>
 80058ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d2:	f200 8087 	bhi.w	80059e4 <HAL_TIM_ConfigClockSource+0x16c>
 80058d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058da:	f000 8086 	beq.w	80059ea <HAL_TIM_ConfigClockSource+0x172>
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e2:	d87f      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x16c>
 80058e4:	2b70      	cmp	r3, #112	; 0x70
 80058e6:	d01a      	beq.n	800591e <HAL_TIM_ConfigClockSource+0xa6>
 80058e8:	2b70      	cmp	r3, #112	; 0x70
 80058ea:	d87b      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b60      	cmp	r3, #96	; 0x60
 80058ee:	d050      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x11a>
 80058f0:	2b60      	cmp	r3, #96	; 0x60
 80058f2:	d877      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x16c>
 80058f4:	2b50      	cmp	r3, #80	; 0x50
 80058f6:	d03c      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0xfa>
 80058f8:	2b50      	cmp	r3, #80	; 0x50
 80058fa:	d873      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x16c>
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d058      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d86f      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005904:	2b30      	cmp	r3, #48	; 0x30
 8005906:	d064      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005908:	2b30      	cmp	r3, #48	; 0x30
 800590a:	d86b      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x16c>
 800590c:	2b20      	cmp	r3, #32
 800590e:	d060      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005910:	2b20      	cmp	r3, #32
 8005912:	d867      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05c      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005918:	2b10      	cmp	r3, #16
 800591a:	d05a      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x15a>
 800591c:	e062      	b.n	80059e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6899      	ldr	r1, [r3, #8]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f000 fbfd 	bl	800612c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005940:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	609a      	str	r2, [r3, #8]
      break;
 800594a:	e04f      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6899      	ldr	r1, [r3, #8]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f000 fbe6 	bl	800612c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800596e:	609a      	str	r2, [r3, #8]
      break;
 8005970:	e03c      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6859      	ldr	r1, [r3, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	461a      	mov	r2, r3
 8005980:	f000 fb5a 	bl	8006038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2150      	movs	r1, #80	; 0x50
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fbb3 	bl	80060f6 <TIM_ITRx_SetConfig>
      break;
 8005990:	e02c      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6859      	ldr	r1, [r3, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	461a      	mov	r2, r3
 80059a0:	f000 fb79 	bl	8006096 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2160      	movs	r1, #96	; 0x60
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fba3 	bl	80060f6 <TIM_ITRx_SetConfig>
      break;
 80059b0:	e01c      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6859      	ldr	r1, [r3, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	461a      	mov	r2, r3
 80059c0:	f000 fb3a 	bl	8006038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2140      	movs	r1, #64	; 0x40
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fb93 	bl	80060f6 <TIM_ITRx_SetConfig>
      break;
 80059d0:	e00c      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4619      	mov	r1, r3
 80059dc:	4610      	mov	r0, r2
 80059de:	f000 fb8a 	bl	80060f6 <TIM_ITRx_SetConfig>
      break;
 80059e2:	e003      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
      break;
 80059e8:	e000      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d107      	bne.n	8005aa6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa4:	e02a      	b.n	8005afc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d107      	bne.n	8005ac0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005abe:	e01d      	b.n	8005afc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d107      	bne.n	8005ada <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2204      	movs	r2, #4
 8005ace:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad8:	e010      	b.n	8005afc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d107      	bne.n	8005af4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2208      	movs	r2, #8
 8005ae8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005af2:	e003      	b.n	8005afc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff ffb4 	bl	8005a6a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d10b      	bne.n	8005b40 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d136      	bne.n	8005ba4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b3e:	e031      	b.n	8005ba4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d10b      	bne.n	8005b62 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d125      	bne.n	8005ba4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b60:	e020      	b.n	8005ba4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d10b      	bne.n	8005b84 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2204      	movs	r2, #4
 8005b70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d114      	bne.n	8005ba4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b82:	e00f      	b.n	8005ba4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d10a      	bne.n	8005ba4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2208      	movs	r2, #8
 8005b92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d103      	bne.n	8005ba4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff ff42 	bl	8005a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	771a      	strb	r2, [r3, #28]
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d103      	bne.n	8005bd8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	771a      	strb	r2, [r3, #28]
 8005bd6:	e019      	b.n	8005c0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d103      	bne.n	8005bea <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2202      	movs	r2, #2
 8005be6:	771a      	strb	r2, [r3, #28]
 8005be8:	e010      	b.n	8005c0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d103      	bne.n	8005bfc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	771a      	strb	r2, [r3, #28]
 8005bfa:	e007      	b.n	8005c0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d102      	bne.n	8005c0c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2208      	movs	r2, #8
 8005c0a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff ff18 	bl	8005a42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	771a      	strb	r2, [r3, #28]
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <TIM_Base_SetConfig+0xe4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00f      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3e:	d00b      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a31      	ldr	r2, [pc, #196]	; (8005d08 <TIM_Base_SetConfig+0xe8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d007      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <TIM_Base_SetConfig+0xec>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <TIM_Base_SetConfig+0xf0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d108      	bne.n	8005c6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <TIM_Base_SetConfig+0xe4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01b      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d017      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a22      	ldr	r2, [pc, #136]	; (8005d08 <TIM_Base_SetConfig+0xe8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a21      	ldr	r2, [pc, #132]	; (8005d0c <TIM_Base_SetConfig+0xec>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00f      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <TIM_Base_SetConfig+0xf0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00b      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1f      	ldr	r2, [pc, #124]	; (8005d14 <TIM_Base_SetConfig+0xf4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1e      	ldr	r2, [pc, #120]	; (8005d18 <TIM_Base_SetConfig+0xf8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <TIM_Base_SetConfig+0xfc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d108      	bne.n	8005cbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <TIM_Base_SetConfig+0xe4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d103      	bne.n	8005cf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40010000 	.word	0x40010000
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40014400 	.word	0x40014400
 8005d1c:	40014800 	.word	0x40014800

08005d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f023 0201 	bic.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 0302 	bic.w	r3, r3, #2
 8005d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <TIM_OC1_SetConfig+0xc8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d10c      	bne.n	8005d96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f023 0308 	bic.w	r3, r3, #8
 8005d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 0304 	bic.w	r3, r3, #4
 8005d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <TIM_OC1_SetConfig+0xc8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d111      	bne.n	8005dc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	40010000 	.word	0x40010000

08005dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f023 0210 	bic.w	r2, r3, #16
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0320 	bic.w	r3, r3, #32
 8005e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a1e      	ldr	r2, [pc, #120]	; (8005ec0 <TIM_OC2_SetConfig+0xd4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10d      	bne.n	8005e68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <TIM_OC2_SetConfig+0xd4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d113      	bne.n	8005e98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40010000 	.word	0x40010000

08005ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <TIM_OC3_SetConfig+0xd0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10d      	bne.n	8005f3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <TIM_OC3_SetConfig+0xd0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d113      	bne.n	8005f6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	40010000 	.word	0x40010000

08005f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	031b      	lsls	r3, r3, #12
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a10      	ldr	r2, [pc, #64]	; (8006034 <TIM_OC4_SetConfig+0x9c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d109      	bne.n	800600c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	019b      	lsls	r3, r3, #6
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000

08006038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f023 0201 	bic.w	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f023 030a 	bic.w	r3, r3, #10
 8006074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006096:	b480      	push	{r7}
 8006098:	b087      	sub	sp, #28
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f023 0210 	bic.w	r2, r3, #16
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	f043 0307 	orr.w	r3, r3, #7
 8006118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	609a      	str	r2, [r3, #8]
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	021a      	lsls	r2, r3, #8
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	431a      	orrs	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4313      	orrs	r3, r2
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	609a      	str	r2, [r3, #8]
}
 8006160:	bf00      	nop
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	2201      	movs	r2, #1
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1a      	ldr	r2, [r3, #32]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	43db      	mvns	r3, r3
 800618e:	401a      	ands	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	fa01 f303 	lsl.w	r3, r1, r3
 80061a4:	431a      	orrs	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e050      	b.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d018      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621c:	d013      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00e      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d009      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a15      	ldr	r2, [pc, #84]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a13      	ldr	r2, [pc, #76]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d10c      	bne.n	8006260 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	4313      	orrs	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40014000 	.word	0x40014000

08006294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <__NVIC_SetPriority>:
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	6039      	str	r1, [r7, #0]
 80062c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	db0a      	blt.n	80062e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	490c      	ldr	r1, [pc, #48]	; (8006308 <__NVIC_SetPriority+0x4c>)
 80062d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062da:	0112      	lsls	r2, r2, #4
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	440b      	add	r3, r1
 80062e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80062e4:	e00a      	b.n	80062fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	4908      	ldr	r1, [pc, #32]	; (800630c <__NVIC_SetPriority+0x50>)
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	3b04      	subs	r3, #4
 80062f4:	0112      	lsls	r2, r2, #4
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	440b      	add	r3, r1
 80062fa:	761a      	strb	r2, [r3, #24]
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	e000e100 	.word	0xe000e100
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <SysTick_Handler+0x1c>)
 8006316:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006318:	f001 fd28 	bl	8007d6c <xTaskGetSchedulerState>
 800631c:	4603      	mov	r3, r0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d001      	beq.n	8006326 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006322:	f002 fb11 	bl	8008948 <xPortSysTickHandler>
  }
}
 8006326:	bf00      	nop
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	e000e010 	.word	0xe000e010

08006330 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006334:	2100      	movs	r1, #0
 8006336:	f06f 0004 	mvn.w	r0, #4
 800633a:	f7ff ffbf 	bl	80062bc <__NVIC_SetPriority>
#endif
}
 800633e:	bf00      	nop
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800634a:	f3ef 8305 	mrs	r3, IPSR
 800634e:	603b      	str	r3, [r7, #0]
  return(result);
 8006350:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006356:	f06f 0305 	mvn.w	r3, #5
 800635a:	607b      	str	r3, [r7, #4]
 800635c:	e00c      	b.n	8006378 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800635e:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <osKernelInitialize+0x44>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006366:	4b08      	ldr	r3, [pc, #32]	; (8006388 <osKernelInitialize+0x44>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800636c:	2300      	movs	r3, #0
 800636e:	607b      	str	r3, [r7, #4]
 8006370:	e002      	b.n	8006378 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006372:	f04f 33ff 	mov.w	r3, #4294967295
 8006376:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006378:	687b      	ldr	r3, [r7, #4]
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	200021f8 	.word	0x200021f8

0800638c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006392:	f3ef 8305 	mrs	r3, IPSR
 8006396:	603b      	str	r3, [r7, #0]
  return(result);
 8006398:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800639e:	f06f 0305 	mvn.w	r3, #5
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	e010      	b.n	80063c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063a6:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <osKernelStart+0x48>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d109      	bne.n	80063c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063ae:	f7ff ffbf 	bl	8006330 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063b2:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <osKernelStart+0x48>)
 80063b4:	2202      	movs	r2, #2
 80063b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063b8:	f001 f87c 	bl	80074b4 <vTaskStartScheduler>
      stat = osOK;
 80063bc:	2300      	movs	r3, #0
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	e002      	b.n	80063c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063c2:	f04f 33ff 	mov.w	r3, #4294967295
 80063c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063c8:	687b      	ldr	r3, [r7, #4]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	200021f8 	.word	0x200021f8

080063d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08e      	sub	sp, #56	; 0x38
 80063dc:	af04      	add	r7, sp, #16
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e8:	f3ef 8305 	mrs	r3, IPSR
 80063ec:	617b      	str	r3, [r7, #20]
  return(result);
 80063ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d17e      	bne.n	80064f2 <osThreadNew+0x11a>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d07b      	beq.n	80064f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80063fa:	2380      	movs	r3, #128	; 0x80
 80063fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80063fe:	2318      	movs	r3, #24
 8006400:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d045      	beq.n	800649e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <osThreadNew+0x48>
        name = attr->name;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <osThreadNew+0x6e>
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b38      	cmp	r3, #56	; 0x38
 8006438:	d805      	bhi.n	8006446 <osThreadNew+0x6e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <osThreadNew+0x72>
        return (NULL);
 8006446:	2300      	movs	r3, #0
 8006448:	e054      	b.n	80064f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	089b      	lsrs	r3, r3, #2
 8006458:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00e      	beq.n	8006480 <osThreadNew+0xa8>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	2bbb      	cmp	r3, #187	; 0xbb
 8006468:	d90a      	bls.n	8006480 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800646e:	2b00      	cmp	r3, #0
 8006470:	d006      	beq.n	8006480 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <osThreadNew+0xa8>
        mem = 1;
 800647a:	2301      	movs	r3, #1
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e010      	b.n	80064a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10c      	bne.n	80064a2 <osThreadNew+0xca>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d108      	bne.n	80064a2 <osThreadNew+0xca>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <osThreadNew+0xca>
          mem = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	e001      	b.n	80064a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d110      	bne.n	80064ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064b0:	9202      	str	r2, [sp, #8]
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fe0c 	bl	80070dc <xTaskCreateStatic>
 80064c4:	4603      	mov	r3, r0
 80064c6:	613b      	str	r3, [r7, #16]
 80064c8:	e013      	b.n	80064f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d110      	bne.n	80064f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	f107 0310 	add.w	r3, r7, #16
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fe57 	bl	8007196 <xTaskCreate>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d001      	beq.n	80064f2 <osThreadNew+0x11a>
            hTask = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064f2:	693b      	ldr	r3, [r7, #16]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3728      	adds	r7, #40	; 0x28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006504:	f3ef 8305 	mrs	r3, IPSR
 8006508:	60bb      	str	r3, [r7, #8]
  return(result);
 800650a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <osDelay+0x1c>
    stat = osErrorISR;
 8006510:	f06f 0305 	mvn.w	r3, #5
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	e007      	b.n	8006528 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 ff92 	bl	800744c <vTaskDelay>
    }
  }

  return (stat);
 8006528:	68fb      	ldr	r3, [r7, #12]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a07      	ldr	r2, [pc, #28]	; (8006560 <vApplicationGetIdleTaskMemory+0x2c>)
 8006544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a06      	ldr	r2, [pc, #24]	; (8006564 <vApplicationGetIdleTaskMemory+0x30>)
 800654a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2280      	movs	r2, #128	; 0x80
 8006550:	601a      	str	r2, [r3, #0]
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	200021fc 	.word	0x200021fc
 8006564:	200022b8 	.word	0x200022b8

08006568 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4a07      	ldr	r2, [pc, #28]	; (8006594 <vApplicationGetTimerTaskMemory+0x2c>)
 8006578:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a06      	ldr	r2, [pc, #24]	; (8006598 <vApplicationGetTimerTaskMemory+0x30>)
 800657e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006586:	601a      	str	r2, [r3, #0]
}
 8006588:	bf00      	nop
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	200024b8 	.word	0x200024b8
 8006598:	20002574 	.word	0x20002574

0800659c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f103 0208 	add.w	r2, r3, #8
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295
 80065b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f103 0208 	add.w	r2, r3, #8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f103 0208 	add.w	r2, r3, #8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	601a      	str	r2, [r3, #0]
}
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d103      	bne.n	800665e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	e00c      	b.n	8006678 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3308      	adds	r3, #8
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e002      	b.n	800666c <vListInsert+0x2e>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	429a      	cmp	r2, r3
 8006676:	d2f6      	bcs.n	8006666 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6892      	ldr	r2, [r2, #8]
 80066c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6852      	ldr	r2, [r2, #4]
 80066d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d103      	bne.n	80066e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	1e5a      	subs	r2, r3, #1
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800672e:	f002 f879 	bl	8008824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	68f9      	ldr	r1, [r7, #12]
 800673c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800673e:	fb01 f303 	mul.w	r3, r1, r3
 8006742:	441a      	add	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675e:	3b01      	subs	r3, #1
 8006760:	68f9      	ldr	r1, [r7, #12]
 8006762:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	441a      	add	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	22ff      	movs	r2, #255	; 0xff
 8006772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	22ff      	movs	r2, #255	; 0xff
 800677a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d114      	bne.n	80067ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01a      	beq.n	80067c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3310      	adds	r3, #16
 8006790:	4618      	mov	r0, r3
 8006792:	f001 f929 	bl	80079e8 <xTaskRemoveFromEventList>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d012      	beq.n	80067c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <xQueueGenericReset+0xcc>)
 800679e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	e009      	b.n	80067c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3310      	adds	r3, #16
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fef2 	bl	800659c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3324      	adds	r3, #36	; 0x24
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff feed 	bl	800659c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067c2:	f002 f85f 	bl	8008884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067c6:	2301      	movs	r3, #1
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08e      	sub	sp, #56	; 0x38
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <xQueueGenericCreateStatic+0x52>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <xQueueGenericCreateStatic+0x56>
 8006826:	2301      	movs	r3, #1
 8006828:	e000      	b.n	800682c <xQueueGenericCreateStatic+0x58>
 800682a:	2300      	movs	r3, #0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	623b      	str	r3, [r7, #32]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d102      	bne.n	8006852 <xQueueGenericCreateStatic+0x7e>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <xQueueGenericCreateStatic+0x82>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <xQueueGenericCreateStatic+0x84>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	61fb      	str	r3, [r7, #28]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006872:	2350      	movs	r3, #80	; 0x50
 8006874:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b50      	cmp	r3, #80	; 0x50
 800687a:	d00a      	beq.n	8006892 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	61bb      	str	r3, [r7, #24]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006892:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00d      	beq.n	80068ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	4613      	mov	r3, r2
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f805 	bl	80068c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068bc:	4618      	mov	r0, r3
 80068be:	3730      	adds	r7, #48	; 0x30
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d103      	bne.n	80068e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	e002      	b.n	80068e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068f2:	2101      	movs	r1, #1
 80068f4:	69b8      	ldr	r0, [r7, #24]
 80068f6:	f7ff ff05 	bl	8006704 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08e      	sub	sp, #56	; 0x38
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800691a:	2300      	movs	r3, #0
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <xQueueGenericSend+0x32>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d103      	bne.n	800694c <xQueueGenericSend+0x40>
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <xQueueGenericSend+0x44>
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <xQueueGenericSend+0x46>
 8006950:	2300      	movs	r3, #0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <xQueueGenericSend+0x60>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d103      	bne.n	800697a <xQueueGenericSend+0x6e>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <xQueueGenericSend+0x72>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <xQueueGenericSend+0x74>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueGenericSend+0x8e>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	623b      	str	r3, [r7, #32]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800699a:	f001 f9e7 	bl	8007d6c <xTaskGetSchedulerState>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <xQueueGenericSend+0x9e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <xQueueGenericSend+0xa2>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <xQueueGenericSend+0xa4>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xQueueGenericSend+0xbe>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	61fb      	str	r3, [r7, #28]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ca:	f001 ff2b 	bl	8008824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <xQueueGenericSend+0xd4>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d129      	bne.n	8006a34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069e6:	f000 fa0b 	bl	8006e00 <prvCopyDataToQueue>
 80069ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d010      	beq.n	8006a16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fff5 	bl	80079e8 <xTaskRemoveFromEventList>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d013      	beq.n	8006a2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a04:	4b3f      	ldr	r3, [pc, #252]	; (8006b04 <xQueueGenericSend+0x1f8>)
 8006a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	e00a      	b.n	8006a2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a1c:	4b39      	ldr	r3, [pc, #228]	; (8006b04 <xQueueGenericSend+0x1f8>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a2c:	f001 ff2a 	bl	8008884 <vPortExitCritical>
				return pdPASS;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e063      	b.n	8006afc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a3a:	f001 ff23 	bl	8008884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e05c      	b.n	8006afc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a48:	f107 0314 	add.w	r3, r7, #20
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 f82f 	bl	8007ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a52:	2301      	movs	r3, #1
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a56:	f001 ff15 	bl	8008884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a5a:	f000 fd9b 	bl	8007594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a5e:	f001 fee1 	bl	8008824 <vPortEnterCritical>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d103      	bne.n	8006a78 <xQueueGenericSend+0x16c>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a7e:	b25b      	sxtb	r3, r3
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a84:	d103      	bne.n	8006a8e <xQueueGenericSend+0x182>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a8e:	f001 fef9 	bl	8008884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a92:	1d3a      	adds	r2, r7, #4
 8006a94:	f107 0314 	add.w	r3, r7, #20
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 f81e 	bl	8007adc <xTaskCheckForTimeOut>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d124      	bne.n	8006af0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa8:	f000 faa2 	bl	8006ff0 <prvIsQueueFull>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d018      	beq.n	8006ae4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	3310      	adds	r3, #16
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 ff44 	bl	8007948 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac2:	f000 fa2d 	bl	8006f20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ac6:	f000 fd73 	bl	80075b0 <xTaskResumeAll>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f47f af7c 	bne.w	80069ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <xQueueGenericSend+0x1f8>)
 8006ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	e772      	b.n	80069ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ae6:	f000 fa1b 	bl	8006f20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aea:	f000 fd61 	bl	80075b0 <xTaskResumeAll>
 8006aee:	e76c      	b.n	80069ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006af2:	f000 fa15 	bl	8006f20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006af6:	f000 fd5b 	bl	80075b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006afa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3738      	adds	r7, #56	; 0x38
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b090      	sub	sp, #64	; 0x40
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d103      	bne.n	8006b44 <xQueueGenericSendFromISR+0x3c>
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <xQueueGenericSendFromISR+0x40>
 8006b44:	2301      	movs	r3, #1
 8006b46:	e000      	b.n	8006b4a <xQueueGenericSendFromISR+0x42>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d103      	bne.n	8006b72 <xQueueGenericSendFromISR+0x6a>
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <xQueueGenericSendFromISR+0x6e>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <xQueueGenericSendFromISR+0x70>
 8006b76:	2300      	movs	r3, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	623b      	str	r3, [r7, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b92:	f001 ff29 	bl	80089e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b96:	f3ef 8211 	mrs	r2, BASEPRI
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	61fa      	str	r2, [r7, #28]
 8006bac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006bae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d302      	bcc.n	8006bc4 <xQueueGenericSendFromISR+0xbc>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d12f      	bne.n	8006c24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bda:	f000 f911 	bl	8006e00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d112      	bne.n	8006c0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d016      	beq.n	8006c1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	3324      	adds	r3, #36	; 0x24
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fef7 	bl	80079e8 <xTaskRemoveFromEventList>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00e      	beq.n	8006c1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e007      	b.n	8006c1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c12:	3301      	adds	r3, #1
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	b25a      	sxtb	r2, r3
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c22:	e001      	b.n	8006c28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3740      	adds	r7, #64	; 0x40
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08c      	sub	sp, #48	; 0x30
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <xQueueReceive+0x30>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	623b      	str	r3, [r7, #32]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <xQueueReceive+0x3e>
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <xQueueReceive+0x42>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <xQueueReceive+0x44>
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <xQueueReceive+0x5e>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	61fb      	str	r3, [r7, #28]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c9e:	f001 f865 	bl	8007d6c <xTaskGetSchedulerState>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <xQueueReceive+0x6e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <xQueueReceive+0x72>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <xQueueReceive+0x74>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <xQueueReceive+0x8e>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	61bb      	str	r3, [r7, #24]
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cce:	f001 fda9 	bl	8008824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01f      	beq.n	8006d1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce2:	f000 f8f7 	bl	8006ed4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	1e5a      	subs	r2, r3, #1
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00f      	beq.n	8006d16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	3310      	adds	r3, #16
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fe74 	bl	80079e8 <xTaskRemoveFromEventList>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d007      	beq.n	8006d16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d06:	4b3d      	ldr	r3, [pc, #244]	; (8006dfc <xQueueReceive+0x1bc>)
 8006d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d16:	f001 fdb5 	bl	8008884 <vPortExitCritical>
				return pdPASS;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e069      	b.n	8006df2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d103      	bne.n	8006d2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d24:	f001 fdae 	bl	8008884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e062      	b.n	8006df2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d32:	f107 0310 	add.w	r3, r7, #16
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 feba 	bl	8007ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d40:	f001 fda0 	bl	8008884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d44:	f000 fc26 	bl	8007594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d48:	f001 fd6c 	bl	8008824 <vPortEnterCritical>
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d52:	b25b      	sxtb	r3, r3
 8006d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d58:	d103      	bne.n	8006d62 <xQueueReceive+0x122>
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d68:	b25b      	sxtb	r3, r3
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d103      	bne.n	8006d78 <xQueueReceive+0x138>
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d78:	f001 fd84 	bl	8008884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d7c:	1d3a      	adds	r2, r7, #4
 8006d7e:	f107 0310 	add.w	r3, r7, #16
 8006d82:	4611      	mov	r1, r2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fea9 	bl	8007adc <xTaskCheckForTimeOut>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d123      	bne.n	8006dd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d92:	f000 f917 	bl	8006fc4 <prvIsQueueEmpty>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d017      	beq.n	8006dcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	3324      	adds	r3, #36	; 0x24
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	4611      	mov	r1, r2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fdcf 	bl	8007948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dac:	f000 f8b8 	bl	8006f20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006db0:	f000 fbfe 	bl	80075b0 <xTaskResumeAll>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d189      	bne.n	8006cce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <xQueueReceive+0x1bc>)
 8006dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	e780      	b.n	8006cce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dce:	f000 f8a7 	bl	8006f20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dd2:	f000 fbed 	bl	80075b0 <xTaskResumeAll>
 8006dd6:	e77a      	b.n	8006cce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dda:	f000 f8a1 	bl	8006f20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dde:	f000 fbe7 	bl	80075b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006de4:	f000 f8ee 	bl	8006fc4 <prvIsQueueEmpty>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f43f af6f 	beq.w	8006cce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006df0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3730      	adds	r7, #48	; 0x30
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	e000ed04 	.word	0xe000ed04

08006e00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10d      	bne.n	8006e3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d14d      	bne.n	8006ec2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 ffbc 	bl	8007da8 <xTaskPriorityDisinherit>
 8006e30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	609a      	str	r2, [r3, #8]
 8006e38:	e043      	b.n	8006ec2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d119      	bne.n	8006e74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6858      	ldr	r0, [r3, #4]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	461a      	mov	r2, r3
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	f002 f81c 	bl	8008e88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	441a      	add	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d32b      	bcc.n	8006ec2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	e026      	b.n	8006ec2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	68d8      	ldr	r0, [r3, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	68b9      	ldr	r1, [r7, #8]
 8006e80:	f002 f802 	bl	8008e88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8c:	425b      	negs	r3, r3
 8006e8e:	441a      	add	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d207      	bcs.n	8006eb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	425b      	negs	r3, r3
 8006eaa:	441a      	add	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d105      	bne.n	8006ec2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006eca:	697b      	ldr	r3, [r7, #20]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d018      	beq.n	8006f18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	441a      	add	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d303      	bcc.n	8006f08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68d9      	ldr	r1, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	461a      	mov	r2, r3
 8006f12:	6838      	ldr	r0, [r7, #0]
 8006f14:	f001 ffb8 	bl	8008e88 <memcpy>
	}
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f28:	f001 fc7c 	bl	8008824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f34:	e011      	b.n	8006f5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d012      	beq.n	8006f64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3324      	adds	r3, #36	; 0x24
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fd50 	bl	80079e8 <xTaskRemoveFromEventList>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f4e:	f000 fe27 	bl	8007ba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	dce9      	bgt.n	8006f36 <prvUnlockQueue+0x16>
 8006f62:	e000      	b.n	8006f66 <prvUnlockQueue+0x46>
					break;
 8006f64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	22ff      	movs	r2, #255	; 0xff
 8006f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f6e:	f001 fc89 	bl	8008884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f72:	f001 fc57 	bl	8008824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f7e:	e011      	b.n	8006fa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d012      	beq.n	8006fae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3310      	adds	r3, #16
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fd2b 	bl	80079e8 <xTaskRemoveFromEventList>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f98:	f000 fe02 	bl	8007ba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dce9      	bgt.n	8006f80 <prvUnlockQueue+0x60>
 8006fac:	e000      	b.n	8006fb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	22ff      	movs	r2, #255	; 0xff
 8006fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fb8:	f001 fc64 	bl	8008884 <vPortExitCritical>
}
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fcc:	f001 fc2a 	bl	8008824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e001      	b.n	8006fe2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fe2:	f001 fc4f 	bl	8008884 <vPortExitCritical>

	return xReturn;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ff8:	f001 fc14 	bl	8008824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007004:	429a      	cmp	r2, r3
 8007006:	d102      	bne.n	800700e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007008:	2301      	movs	r3, #1
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e001      	b.n	8007012 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007012:	f001 fc37 	bl	8008884 <vPortExitCritical>

	return xReturn;
 8007016:	68fb      	ldr	r3, [r7, #12]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e014      	b.n	800705a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007030:	4a0f      	ldr	r2, [pc, #60]	; (8007070 <vQueueAddToRegistry+0x50>)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800703c:	490c      	ldr	r1, [pc, #48]	; (8007070 <vQueueAddToRegistry+0x50>)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007046:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <vQueueAddToRegistry+0x50>)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007052:	e006      	b.n	8007062 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b07      	cmp	r3, #7
 800705e:	d9e7      	bls.n	8007030 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20002974 	.word	0x20002974

08007074 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007084:	f001 fbce 	bl	8008824 <vPortEnterCritical>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800708e:	b25b      	sxtb	r3, r3
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007094:	d103      	bne.n	800709e <vQueueWaitForMessageRestricted+0x2a>
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070a4:	b25b      	sxtb	r3, r3
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d103      	bne.n	80070b4 <vQueueWaitForMessageRestricted+0x40>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b4:	f001 fbe6 	bl	8008884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	3324      	adds	r3, #36	; 0x24
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 fc61 	bl	8007990 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070ce:	6978      	ldr	r0, [r7, #20]
 80070d0:	f7ff ff26 	bl	8006f20 <prvUnlockQueue>
	}
 80070d4:	bf00      	nop
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08e      	sub	sp, #56	; 0x38
 80070e0:	af04      	add	r7, sp, #16
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <xTaskCreateStatic+0x2a>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	623b      	str	r3, [r7, #32]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xTaskCreateStatic+0x46>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	61fb      	str	r3, [r7, #28]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007122:	23bc      	movs	r3, #188	; 0xbc
 8007124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2bbc      	cmp	r3, #188	; 0xbc
 800712a:	d00a      	beq.n	8007142 <xTaskCreateStatic+0x66>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	61bb      	str	r3, [r7, #24]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007142:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01e      	beq.n	8007188 <xTaskCreateStatic+0xac>
 800714a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01b      	beq.n	8007188 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007158:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	2202      	movs	r2, #2
 800715e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007162:	2300      	movs	r3, #0
 8007164:	9303      	str	r3, [sp, #12]
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	9302      	str	r3, [sp, #8]
 800716a:	f107 0314 	add.w	r3, r7, #20
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	68b9      	ldr	r1, [r7, #8]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f850 	bl	8007220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007182:	f000 f8f3 	bl	800736c <prvAddNewTaskToReadyList>
 8007186:	e001      	b.n	800718c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800718c:	697b      	ldr	r3, [r7, #20]
	}
 800718e:	4618      	mov	r0, r3
 8007190:	3728      	adds	r7, #40	; 0x28
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007196:	b580      	push	{r7, lr}
 8007198:	b08c      	sub	sp, #48	; 0x30
 800719a:	af04      	add	r7, sp, #16
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 fc5c 	bl	8008a68 <pvPortMalloc>
 80071b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00e      	beq.n	80071d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071b8:	20bc      	movs	r0, #188	; 0xbc
 80071ba:	f001 fc55 	bl	8008a68 <pvPortMalloc>
 80071be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30
 80071cc:	e005      	b.n	80071da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071ce:	6978      	ldr	r0, [r7, #20]
 80071d0:	f001 fd16 	bl	8008c00 <vPortFree>
 80071d4:	e001      	b.n	80071da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d017      	beq.n	8007210 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071e8:	88fa      	ldrh	r2, [r7, #6]
 80071ea:	2300      	movs	r3, #0
 80071ec:	9303      	str	r3, [sp, #12]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	9302      	str	r3, [sp, #8]
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f80e 	bl	8007220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007204:	69f8      	ldr	r0, [r7, #28]
 8007206:	f000 f8b1 	bl	800736c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800720a:	2301      	movs	r3, #1
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	e002      	b.n	8007216 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007210:	f04f 33ff 	mov.w	r3, #4294967295
 8007214:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007216:	69bb      	ldr	r3, [r7, #24]
	}
 8007218:	4618      	mov	r0, r3
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	461a      	mov	r2, r3
 8007238:	21a5      	movs	r1, #165	; 0xa5
 800723a:	f001 fe33 	bl	8008ea4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007248:	3b01      	subs	r3, #1
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	f023 0307 	bic.w	r3, r3, #7
 8007256:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	617b      	str	r3, [r7, #20]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01f      	beq.n	80072be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800727e:	2300      	movs	r3, #0
 8007280:	61fb      	str	r3, [r7, #28]
 8007282:	e012      	b.n	80072aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	7819      	ldrb	r1, [r3, #0]
 800728c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	3334      	adds	r3, #52	; 0x34
 8007294:	460a      	mov	r2, r1
 8007296:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d006      	beq.n	80072b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	3301      	adds	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	2b0f      	cmp	r3, #15
 80072ae:	d9e9      	bls.n	8007284 <prvInitialiseNewTask+0x64>
 80072b0:	e000      	b.n	80072b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80072b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072bc:	e003      	b.n	80072c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	2b37      	cmp	r3, #55	; 0x37
 80072ca:	d901      	bls.n	80072d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072cc:	2337      	movs	r3, #55	; 0x37
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	2200      	movs	r2, #0
 80072e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	3304      	adds	r3, #4
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff f978 	bl	80065dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	3318      	adds	r3, #24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff f973 	bl	80065dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	2200      	movs	r2, #0
 8007318:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	3354      	adds	r3, #84	; 0x54
 8007320:	2260      	movs	r2, #96	; 0x60
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f001 fdbd 	bl	8008ea4 <memset>
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	4a0c      	ldr	r2, [pc, #48]	; (8007360 <prvInitialiseNewTask+0x140>)
 800732e:	659a      	str	r2, [r3, #88]	; 0x58
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	4a0c      	ldr	r2, [pc, #48]	; (8007364 <prvInitialiseNewTask+0x144>)
 8007334:	65da      	str	r2, [r3, #92]	; 0x5c
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	4a0b      	ldr	r2, [pc, #44]	; (8007368 <prvInitialiseNewTask+0x148>)
 800733a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	68f9      	ldr	r1, [r7, #12]
 8007340:	69b8      	ldr	r0, [r7, #24]
 8007342:	f001 f941 	bl	80085c8 <pxPortInitialiseStack>
 8007346:	4602      	mov	r2, r0
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007356:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007358:	bf00      	nop
 800735a:	3720      	adds	r7, #32
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	0800c340 	.word	0x0800c340
 8007364:	0800c360 	.word	0x0800c360
 8007368:	0800c320 	.word	0x0800c320

0800736c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007374:	f001 fa56 	bl	8008824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007378:	4b2d      	ldr	r3, [pc, #180]	; (8007430 <prvAddNewTaskToReadyList+0xc4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3301      	adds	r3, #1
 800737e:	4a2c      	ldr	r2, [pc, #176]	; (8007430 <prvAddNewTaskToReadyList+0xc4>)
 8007380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007382:	4b2c      	ldr	r3, [pc, #176]	; (8007434 <prvAddNewTaskToReadyList+0xc8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d109      	bne.n	800739e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800738a:	4a2a      	ldr	r2, [pc, #168]	; (8007434 <prvAddNewTaskToReadyList+0xc8>)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007390:	4b27      	ldr	r3, [pc, #156]	; (8007430 <prvAddNewTaskToReadyList+0xc4>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d110      	bne.n	80073ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007398:	f000 fc26 	bl	8007be8 <prvInitialiseTaskLists>
 800739c:	e00d      	b.n	80073ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800739e:	4b26      	ldr	r3, [pc, #152]	; (8007438 <prvAddNewTaskToReadyList+0xcc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073a6:	4b23      	ldr	r3, [pc, #140]	; (8007434 <prvAddNewTaskToReadyList+0xc8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d802      	bhi.n	80073ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073b4:	4a1f      	ldr	r2, [pc, #124]	; (8007434 <prvAddNewTaskToReadyList+0xc8>)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073ba:	4b20      	ldr	r3, [pc, #128]	; (800743c <prvAddNewTaskToReadyList+0xd0>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3301      	adds	r3, #1
 80073c0:	4a1e      	ldr	r2, [pc, #120]	; (800743c <prvAddNewTaskToReadyList+0xd0>)
 80073c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073c4:	4b1d      	ldr	r3, [pc, #116]	; (800743c <prvAddNewTaskToReadyList+0xd0>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <prvAddNewTaskToReadyList+0xd4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d903      	bls.n	80073e0 <prvAddNewTaskToReadyList+0x74>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	4a18      	ldr	r2, [pc, #96]	; (8007440 <prvAddNewTaskToReadyList+0xd4>)
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4a15      	ldr	r2, [pc, #84]	; (8007444 <prvAddNewTaskToReadyList+0xd8>)
 80073ee:	441a      	add	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3304      	adds	r3, #4
 80073f4:	4619      	mov	r1, r3
 80073f6:	4610      	mov	r0, r2
 80073f8:	f7ff f8fd 	bl	80065f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073fc:	f001 fa42 	bl	8008884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007400:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <prvAddNewTaskToReadyList+0xcc>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00e      	beq.n	8007426 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <prvAddNewTaskToReadyList+0xc8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	429a      	cmp	r2, r3
 8007414:	d207      	bcs.n	8007426 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007416:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <prvAddNewTaskToReadyList+0xdc>)
 8007418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20002e88 	.word	0x20002e88
 8007434:	200029b4 	.word	0x200029b4
 8007438:	20002e94 	.word	0x20002e94
 800743c:	20002ea4 	.word	0x20002ea4
 8007440:	20002e90 	.word	0x20002e90
 8007444:	200029b8 	.word	0x200029b8
 8007448:	e000ed04 	.word	0xe000ed04

0800744c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d017      	beq.n	800748e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800745e:	4b13      	ldr	r3, [pc, #76]	; (80074ac <vTaskDelay+0x60>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <vTaskDelay+0x30>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60bb      	str	r3, [r7, #8]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800747c:	f000 f88a 	bl	8007594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007480:	2100      	movs	r1, #0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fcfe 	bl	8007e84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007488:	f000 f892 	bl	80075b0 <xTaskResumeAll>
 800748c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d107      	bne.n	80074a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007494:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <vTaskDelay+0x64>)
 8007496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20002eb0 	.word	0x20002eb0
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074c2:	463a      	mov	r2, r7
 80074c4:	1d39      	adds	r1, r7, #4
 80074c6:	f107 0308 	add.w	r3, r7, #8
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff f832 	bl	8006534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	9202      	str	r2, [sp, #8]
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	2300      	movs	r3, #0
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	2300      	movs	r3, #0
 80074e0:	460a      	mov	r2, r1
 80074e2:	4924      	ldr	r1, [pc, #144]	; (8007574 <vTaskStartScheduler+0xc0>)
 80074e4:	4824      	ldr	r0, [pc, #144]	; (8007578 <vTaskStartScheduler+0xc4>)
 80074e6:	f7ff fdf9 	bl	80070dc <xTaskCreateStatic>
 80074ea:	4603      	mov	r3, r0
 80074ec:	4a23      	ldr	r2, [pc, #140]	; (800757c <vTaskStartScheduler+0xc8>)
 80074ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074f0:	4b22      	ldr	r3, [pc, #136]	; (800757c <vTaskStartScheduler+0xc8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074f8:	2301      	movs	r3, #1
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	e001      	b.n	8007502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d102      	bne.n	800750e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007508:	f000 fd10 	bl	8007f2c <xTimerCreateTimerTask>
 800750c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d11b      	bne.n	800754c <vTaskStartScheduler+0x98>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	613b      	str	r3, [r7, #16]
}
 8007526:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007528:	4b15      	ldr	r3, [pc, #84]	; (8007580 <vTaskStartScheduler+0xcc>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3354      	adds	r3, #84	; 0x54
 800752e:	4a15      	ldr	r2, [pc, #84]	; (8007584 <vTaskStartScheduler+0xd0>)
 8007530:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <vTaskStartScheduler+0xd4>)
 8007534:	f04f 32ff 	mov.w	r2, #4294967295
 8007538:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <vTaskStartScheduler+0xd8>)
 800753c:	2201      	movs	r2, #1
 800753e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007540:	4b13      	ldr	r3, [pc, #76]	; (8007590 <vTaskStartScheduler+0xdc>)
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007546:	f001 f8cb 	bl	80086e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800754a:	e00e      	b.n	800756a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	d10a      	bne.n	800756a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	60fb      	str	r3, [r7, #12]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <vTaskStartScheduler+0xb4>
}
 800756a:	bf00      	nop
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	08009068 	.word	0x08009068
 8007578:	08007bb9 	.word	0x08007bb9
 800757c:	20002eac 	.word	0x20002eac
 8007580:	200029b4 	.word	0x200029b4
 8007584:	20000018 	.word	0x20000018
 8007588:	20002ea8 	.word	0x20002ea8
 800758c:	20002e94 	.word	0x20002e94
 8007590:	20002e8c 	.word	0x20002e8c

08007594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007594:	b480      	push	{r7}
 8007596:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007598:	4b04      	ldr	r3, [pc, #16]	; (80075ac <vTaskSuspendAll+0x18>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3301      	adds	r3, #1
 800759e:	4a03      	ldr	r2, [pc, #12]	; (80075ac <vTaskSuspendAll+0x18>)
 80075a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80075a2:	bf00      	nop
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	20002eb0 	.word	0x20002eb0

080075b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075be:	4b42      	ldr	r3, [pc, #264]	; (80076c8 <xTaskResumeAll+0x118>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10a      	bne.n	80075dc <xTaskResumeAll+0x2c>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	603b      	str	r3, [r7, #0]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075dc:	f001 f922 	bl	8008824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075e0:	4b39      	ldr	r3, [pc, #228]	; (80076c8 <xTaskResumeAll+0x118>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	4a38      	ldr	r2, [pc, #224]	; (80076c8 <xTaskResumeAll+0x118>)
 80075e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ea:	4b37      	ldr	r3, [pc, #220]	; (80076c8 <xTaskResumeAll+0x118>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d162      	bne.n	80076b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075f2:	4b36      	ldr	r3, [pc, #216]	; (80076cc <xTaskResumeAll+0x11c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d05e      	beq.n	80076b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075fa:	e02f      	b.n	800765c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075fc:	4b34      	ldr	r3, [pc, #208]	; (80076d0 <xTaskResumeAll+0x120>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3318      	adds	r3, #24
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff f851 	bl	80066b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3304      	adds	r3, #4
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff f84c 	bl	80066b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761c:	4b2d      	ldr	r3, [pc, #180]	; (80076d4 <xTaskResumeAll+0x124>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d903      	bls.n	800762c <xTaskResumeAll+0x7c>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	4a2a      	ldr	r2, [pc, #168]	; (80076d4 <xTaskResumeAll+0x124>)
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4a27      	ldr	r2, [pc, #156]	; (80076d8 <xTaskResumeAll+0x128>)
 800763a:	441a      	add	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3304      	adds	r3, #4
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f7fe ffd7 	bl	80065f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4b23      	ldr	r3, [pc, #140]	; (80076dc <xTaskResumeAll+0x12c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007652:	429a      	cmp	r2, r3
 8007654:	d302      	bcc.n	800765c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007656:	4b22      	ldr	r3, [pc, #136]	; (80076e0 <xTaskResumeAll+0x130>)
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800765c:	4b1c      	ldr	r3, [pc, #112]	; (80076d0 <xTaskResumeAll+0x120>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1cb      	bne.n	80075fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800766a:	f000 fb5f 	bl	8007d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800766e:	4b1d      	ldr	r3, [pc, #116]	; (80076e4 <xTaskResumeAll+0x134>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d010      	beq.n	800769c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800767a:	f000 f847 	bl	800770c <xTaskIncrementTick>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <xTaskResumeAll+0x130>)
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3b01      	subs	r3, #1
 800768e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f1      	bne.n	800767a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007696:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <xTaskResumeAll+0x134>)
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800769c:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <xTaskResumeAll+0x130>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d009      	beq.n	80076b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076a4:	2301      	movs	r3, #1
 80076a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076a8:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <xTaskResumeAll+0x138>)
 80076aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076b8:	f001 f8e4 	bl	8008884 <vPortExitCritical>

	return xAlreadyYielded;
 80076bc:	68bb      	ldr	r3, [r7, #8]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20002eb0 	.word	0x20002eb0
 80076cc:	20002e88 	.word	0x20002e88
 80076d0:	20002e48 	.word	0x20002e48
 80076d4:	20002e90 	.word	0x20002e90
 80076d8:	200029b8 	.word	0x200029b8
 80076dc:	200029b4 	.word	0x200029b4
 80076e0:	20002e9c 	.word	0x20002e9c
 80076e4:	20002e98 	.word	0x20002e98
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <xTaskGetTickCount+0x1c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076f8:	687b      	ldr	r3, [r7, #4]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	20002e8c 	.word	0x20002e8c

0800770c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007716:	4b4f      	ldr	r3, [pc, #316]	; (8007854 <xTaskIncrementTick+0x148>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 808f 	bne.w	800783e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007720:	4b4d      	ldr	r3, [pc, #308]	; (8007858 <xTaskIncrementTick+0x14c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3301      	adds	r3, #1
 8007726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007728:	4a4b      	ldr	r2, [pc, #300]	; (8007858 <xTaskIncrementTick+0x14c>)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d120      	bne.n	8007776 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007734:	4b49      	ldr	r3, [pc, #292]	; (800785c <xTaskIncrementTick+0x150>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <xTaskIncrementTick+0x48>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	603b      	str	r3, [r7, #0]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <xTaskIncrementTick+0x46>
 8007754:	4b41      	ldr	r3, [pc, #260]	; (800785c <xTaskIncrementTick+0x150>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	4b41      	ldr	r3, [pc, #260]	; (8007860 <xTaskIncrementTick+0x154>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a3f      	ldr	r2, [pc, #252]	; (800785c <xTaskIncrementTick+0x150>)
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	4a3f      	ldr	r2, [pc, #252]	; (8007860 <xTaskIncrementTick+0x154>)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <xTaskIncrementTick+0x158>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	4a3d      	ldr	r2, [pc, #244]	; (8007864 <xTaskIncrementTick+0x158>)
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	f000 fadb 	bl	8007d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007776:	4b3c      	ldr	r3, [pc, #240]	; (8007868 <xTaskIncrementTick+0x15c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	d349      	bcc.n	8007814 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007780:	4b36      	ldr	r3, [pc, #216]	; (800785c <xTaskIncrementTick+0x150>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778a:	4b37      	ldr	r3, [pc, #220]	; (8007868 <xTaskIncrementTick+0x15c>)
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	601a      	str	r2, [r3, #0]
					break;
 8007792:	e03f      	b.n	8007814 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007794:	4b31      	ldr	r3, [pc, #196]	; (800785c <xTaskIncrementTick+0x150>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d203      	bcs.n	80077b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077ac:	4a2e      	ldr	r2, [pc, #184]	; (8007868 <xTaskIncrementTick+0x15c>)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077b2:	e02f      	b.n	8007814 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fe ff79 	bl	80066b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	3318      	adds	r3, #24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe ff70 	bl	80066b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <xTaskIncrementTick+0x160>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d903      	bls.n	80077e4 <xTaskIncrementTick+0xd8>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	4a22      	ldr	r2, [pc, #136]	; (800786c <xTaskIncrementTick+0x160>)
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4a1f      	ldr	r2, [pc, #124]	; (8007870 <xTaskIncrementTick+0x164>)
 80077f2:	441a      	add	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f7fe fefb 	bl	80065f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007804:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <xTaskIncrementTick+0x168>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	429a      	cmp	r2, r3
 800780c:	d3b8      	bcc.n	8007780 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800780e:	2301      	movs	r3, #1
 8007810:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007812:	e7b5      	b.n	8007780 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007814:	4b17      	ldr	r3, [pc, #92]	; (8007874 <xTaskIncrementTick+0x168>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781a:	4915      	ldr	r1, [pc, #84]	; (8007870 <xTaskIncrementTick+0x164>)
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	440b      	add	r3, r1
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d901      	bls.n	8007830 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007830:	4b11      	ldr	r3, [pc, #68]	; (8007878 <xTaskIncrementTick+0x16c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007838:	2301      	movs	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e004      	b.n	8007848 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800783e:	4b0f      	ldr	r3, [pc, #60]	; (800787c <xTaskIncrementTick+0x170>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3301      	adds	r3, #1
 8007844:	4a0d      	ldr	r2, [pc, #52]	; (800787c <xTaskIncrementTick+0x170>)
 8007846:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007848:	697b      	ldr	r3, [r7, #20]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20002eb0 	.word	0x20002eb0
 8007858:	20002e8c 	.word	0x20002e8c
 800785c:	20002e40 	.word	0x20002e40
 8007860:	20002e44 	.word	0x20002e44
 8007864:	20002ea0 	.word	0x20002ea0
 8007868:	20002ea8 	.word	0x20002ea8
 800786c:	20002e90 	.word	0x20002e90
 8007870:	200029b8 	.word	0x200029b8
 8007874:	200029b4 	.word	0x200029b4
 8007878:	20002e9c 	.word	0x20002e9c
 800787c:	20002e98 	.word	0x20002e98

08007880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007886:	4b2a      	ldr	r3, [pc, #168]	; (8007930 <vTaskSwitchContext+0xb0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800788e:	4b29      	ldr	r3, [pc, #164]	; (8007934 <vTaskSwitchContext+0xb4>)
 8007890:	2201      	movs	r2, #1
 8007892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007894:	e046      	b.n	8007924 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007896:	4b27      	ldr	r3, [pc, #156]	; (8007934 <vTaskSwitchContext+0xb4>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789c:	4b26      	ldr	r3, [pc, #152]	; (8007938 <vTaskSwitchContext+0xb8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e010      	b.n	80078c6 <vTaskSwitchContext+0x46>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	607b      	str	r3, [r7, #4]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <vTaskSwitchContext+0x3e>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	491d      	ldr	r1, [pc, #116]	; (800793c <vTaskSwitchContext+0xbc>)
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0e4      	beq.n	80078a4 <vTaskSwitchContext+0x24>
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4a15      	ldr	r2, [pc, #84]	; (800793c <vTaskSwitchContext+0xbc>)
 80078e6:	4413      	add	r3, r2
 80078e8:	60bb      	str	r3, [r7, #8]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	3308      	adds	r3, #8
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d104      	bne.n	800790a <vTaskSwitchContext+0x8a>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	605a      	str	r2, [r3, #4]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4a0b      	ldr	r2, [pc, #44]	; (8007940 <vTaskSwitchContext+0xc0>)
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	4a08      	ldr	r2, [pc, #32]	; (8007938 <vTaskSwitchContext+0xb8>)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800791a:	4b09      	ldr	r3, [pc, #36]	; (8007940 <vTaskSwitchContext+0xc0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3354      	adds	r3, #84	; 0x54
 8007920:	4a08      	ldr	r2, [pc, #32]	; (8007944 <vTaskSwitchContext+0xc4>)
 8007922:	6013      	str	r3, [r2, #0]
}
 8007924:	bf00      	nop
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20002eb0 	.word	0x20002eb0
 8007934:	20002e9c 	.word	0x20002e9c
 8007938:	20002e90 	.word	0x20002e90
 800793c:	200029b8 	.word	0x200029b8
 8007940:	200029b4 	.word	0x200029b4
 8007944:	20000018 	.word	0x20000018

08007948 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60fb      	str	r3, [r7, #12]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800796e:	4b07      	ldr	r3, [pc, #28]	; (800798c <vTaskPlaceOnEventList+0x44>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3318      	adds	r3, #24
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7fe fe61 	bl	800663e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800797c:	2101      	movs	r1, #1
 800797e:	6838      	ldr	r0, [r7, #0]
 8007980:	f000 fa80 	bl	8007e84 <prvAddCurrentTaskToDelayedList>
}
 8007984:	bf00      	nop
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	200029b4 	.word	0x200029b4

08007990 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	617b      	str	r3, [r7, #20]
}
 80079b4:	bf00      	nop
 80079b6:	e7fe      	b.n	80079b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079b8:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3318      	adds	r3, #24
 80079be:	4619      	mov	r1, r3
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7fe fe18 	bl	80065f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80079cc:	f04f 33ff 	mov.w	r3, #4294967295
 80079d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	68b8      	ldr	r0, [r7, #8]
 80079d6:	f000 fa55 	bl	8007e84 <prvAddCurrentTaskToDelayedList>
	}
 80079da:	bf00      	nop
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	200029b4 	.word	0x200029b4

080079e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	60fb      	str	r3, [r7, #12]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	3318      	adds	r3, #24
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe fe49 	bl	80066b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a1e:	4b1e      	ldr	r3, [pc, #120]	; (8007a98 <xTaskRemoveFromEventList+0xb0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d11d      	bne.n	8007a62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fe40 	bl	80066b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a34:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <xTaskRemoveFromEventList+0xb4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d903      	bls.n	8007a44 <xTaskRemoveFromEventList+0x5c>
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	4a16      	ldr	r2, [pc, #88]	; (8007a9c <xTaskRemoveFromEventList+0xb4>)
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <xTaskRemoveFromEventList+0xb8>)
 8007a52:	441a      	add	r2, r3
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	f7fe fdcb 	bl	80065f6 <vListInsertEnd>
 8007a60:	e005      	b.n	8007a6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	3318      	adds	r3, #24
 8007a66:	4619      	mov	r1, r3
 8007a68:	480e      	ldr	r0, [pc, #56]	; (8007aa4 <xTaskRemoveFromEventList+0xbc>)
 8007a6a:	f7fe fdc4 	bl	80065f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a72:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <xTaskRemoveFromEventList+0xc0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d905      	bls.n	8007a88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a80:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <xTaskRemoveFromEventList+0xc4>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e001      	b.n	8007a8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a8c:	697b      	ldr	r3, [r7, #20]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20002eb0 	.word	0x20002eb0
 8007a9c:	20002e90 	.word	0x20002e90
 8007aa0:	200029b8 	.word	0x200029b8
 8007aa4:	20002e48 	.word	0x20002e48
 8007aa8:	200029b4 	.word	0x200029b4
 8007aac:	20002e9c 	.word	0x20002e9c

08007ab0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ab8:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <vTaskInternalSetTimeOutState+0x24>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <vTaskInternalSetTimeOutState+0x28>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	605a      	str	r2, [r3, #4]
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	20002ea0 	.word	0x20002ea0
 8007ad8:	20002e8c 	.word	0x20002e8c

08007adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	613b      	str	r3, [r7, #16]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	60fb      	str	r3, [r7, #12]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b1e:	f000 fe81 	bl	8008824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b22:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <xTaskCheckForTimeOut+0xbc>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d102      	bne.n	8007b42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61fb      	str	r3, [r7, #28]
 8007b40:	e023      	b.n	8007b8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <xTaskCheckForTimeOut+0xc0>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d007      	beq.n	8007b5e <xTaskCheckForTimeOut+0x82>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d302      	bcc.n	8007b5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	e015      	b.n	8007b8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d20b      	bcs.n	8007b80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ff9b 	bl	8007ab0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	e004      	b.n	8007b8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b86:	2301      	movs	r3, #1
 8007b88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b8a:	f000 fe7b 	bl	8008884 <vPortExitCritical>

	return xReturn;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20002e8c 	.word	0x20002e8c
 8007b9c:	20002ea0 	.word	0x20002ea0

08007ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ba4:	4b03      	ldr	r3, [pc, #12]	; (8007bb4 <vTaskMissedYield+0x14>)
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]
}
 8007baa:	bf00      	nop
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	20002e9c 	.word	0x20002e9c

08007bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bc0:	f000 f852 	bl	8007c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bc4:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <prvIdleTask+0x28>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d9f9      	bls.n	8007bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bcc:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <prvIdleTask+0x2c>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bdc:	e7f0      	b.n	8007bc0 <prvIdleTask+0x8>
 8007bde:	bf00      	nop
 8007be0:	200029b8 	.word	0x200029b8
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
 8007bf2:	e00c      	b.n	8007c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4a12      	ldr	r2, [pc, #72]	; (8007c48 <prvInitialiseTaskLists+0x60>)
 8007c00:	4413      	add	r3, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fcca 	bl	800659c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b37      	cmp	r3, #55	; 0x37
 8007c12:	d9ef      	bls.n	8007bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c14:	480d      	ldr	r0, [pc, #52]	; (8007c4c <prvInitialiseTaskLists+0x64>)
 8007c16:	f7fe fcc1 	bl	800659c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c1a:	480d      	ldr	r0, [pc, #52]	; (8007c50 <prvInitialiseTaskLists+0x68>)
 8007c1c:	f7fe fcbe 	bl	800659c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c20:	480c      	ldr	r0, [pc, #48]	; (8007c54 <prvInitialiseTaskLists+0x6c>)
 8007c22:	f7fe fcbb 	bl	800659c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c26:	480c      	ldr	r0, [pc, #48]	; (8007c58 <prvInitialiseTaskLists+0x70>)
 8007c28:	f7fe fcb8 	bl	800659c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c2c:	480b      	ldr	r0, [pc, #44]	; (8007c5c <prvInitialiseTaskLists+0x74>)
 8007c2e:	f7fe fcb5 	bl	800659c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c32:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <prvInitialiseTaskLists+0x78>)
 8007c34:	4a05      	ldr	r2, [pc, #20]	; (8007c4c <prvInitialiseTaskLists+0x64>)
 8007c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c38:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <prvInitialiseTaskLists+0x7c>)
 8007c3a:	4a05      	ldr	r2, [pc, #20]	; (8007c50 <prvInitialiseTaskLists+0x68>)
 8007c3c:	601a      	str	r2, [r3, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200029b8 	.word	0x200029b8
 8007c4c:	20002e18 	.word	0x20002e18
 8007c50:	20002e2c 	.word	0x20002e2c
 8007c54:	20002e48 	.word	0x20002e48
 8007c58:	20002e5c 	.word	0x20002e5c
 8007c5c:	20002e74 	.word	0x20002e74
 8007c60:	20002e40 	.word	0x20002e40
 8007c64:	20002e44 	.word	0x20002e44

08007c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c6e:	e019      	b.n	8007ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c70:	f000 fdd8 	bl	8008824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c74:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <prvCheckTasksWaitingTermination+0x50>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe fd15 	bl	80066b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c86:	4b0d      	ldr	r3, [pc, #52]	; (8007cbc <prvCheckTasksWaitingTermination+0x54>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	4a0b      	ldr	r2, [pc, #44]	; (8007cbc <prvCheckTasksWaitingTermination+0x54>)
 8007c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <prvCheckTasksWaitingTermination+0x58>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	4a0a      	ldr	r2, [pc, #40]	; (8007cc0 <prvCheckTasksWaitingTermination+0x58>)
 8007c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c9a:	f000 fdf3 	bl	8008884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f810 	bl	8007cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ca4:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <prvCheckTasksWaitingTermination+0x58>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e1      	bne.n	8007c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20002e5c 	.word	0x20002e5c
 8007cbc:	20002e88 	.word	0x20002e88
 8007cc0:	20002e70 	.word	0x20002e70

08007cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3354      	adds	r3, #84	; 0x54
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 f949 	bl	8008f68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d108      	bne.n	8007cf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 ff8b 	bl	8008c00 <vPortFree>
				vPortFree( pxTCB );
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 ff88 	bl	8008c00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cf0:	e018      	b.n	8007d24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d103      	bne.n	8007d04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 ff7f 	bl	8008c00 <vPortFree>
	}
 8007d02:	e00f      	b.n	8007d24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d00a      	beq.n	8007d24 <prvDeleteTCB+0x60>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	60fb      	str	r3, [r7, #12]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <prvDeleteTCB+0x5e>
	}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d32:	4b0c      	ldr	r3, [pc, #48]	; (8007d64 <prvResetNextTaskUnblockTime+0x38>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d104      	bne.n	8007d46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <prvResetNextTaskUnblockTime+0x3c>)
 8007d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d44:	e008      	b.n	8007d58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <prvResetNextTaskUnblockTime+0x38>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	4a04      	ldr	r2, [pc, #16]	; (8007d68 <prvResetNextTaskUnblockTime+0x3c>)
 8007d56:	6013      	str	r3, [r2, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	20002e40 	.word	0x20002e40
 8007d68:	20002ea8 	.word	0x20002ea8

08007d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d72:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <xTaskGetSchedulerState+0x34>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	607b      	str	r3, [r7, #4]
 8007d7e:	e008      	b.n	8007d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d80:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <xTaskGetSchedulerState+0x38>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d102      	bne.n	8007d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	607b      	str	r3, [r7, #4]
 8007d8c:	e001      	b.n	8007d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d92:	687b      	ldr	r3, [r7, #4]
	}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	20002e94 	.word	0x20002e94
 8007da4:	20002eb0 	.word	0x20002eb0

08007da8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d056      	beq.n	8007e6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dbe:	4b2e      	ldr	r3, [pc, #184]	; (8007e78 <xTaskPriorityDisinherit+0xd0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d00a      	beq.n	8007dde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60fb      	str	r3, [r7, #12]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	60bb      	str	r3, [r7, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e00:	1e5a      	subs	r2, r3, #1
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d02c      	beq.n	8007e6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d128      	bne.n	8007e6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fc46 	bl	80066b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3c:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <xTaskPriorityDisinherit+0xd4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d903      	bls.n	8007e4c <xTaskPriorityDisinherit+0xa4>
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	4a0c      	ldr	r2, [pc, #48]	; (8007e7c <xTaskPriorityDisinherit+0xd4>)
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4a09      	ldr	r2, [pc, #36]	; (8007e80 <xTaskPriorityDisinherit+0xd8>)
 8007e5a:	441a      	add	r2, r3
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4619      	mov	r1, r3
 8007e62:	4610      	mov	r0, r2
 8007e64:	f7fe fbc7 	bl	80065f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e6c:	697b      	ldr	r3, [r7, #20]
	}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	200029b4 	.word	0x200029b4
 8007e7c:	20002e90 	.word	0x20002e90
 8007e80:	200029b8 	.word	0x200029b8

08007e84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e8e:	4b21      	ldr	r3, [pc, #132]	; (8007f14 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e94:	4b20      	ldr	r3, [pc, #128]	; (8007f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fc08 	bl	80066b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea6:	d10a      	bne.n	8007ebe <prvAddCurrentTaskToDelayedList+0x3a>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eae:	4b1a      	ldr	r3, [pc, #104]	; (8007f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4819      	ldr	r0, [pc, #100]	; (8007f1c <prvAddCurrentTaskToDelayedList+0x98>)
 8007eb8:	f7fe fb9d 	bl	80065f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ebc:	e026      	b.n	8007f0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d209      	bcs.n	8007eea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ed6:	4b12      	ldr	r3, [pc, #72]	; (8007f20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b0f      	ldr	r3, [pc, #60]	; (8007f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	f7fe fbab 	bl	800663e <vListInsert>
}
 8007ee8:	e010      	b.n	8007f0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eea:	4b0e      	ldr	r3, [pc, #56]	; (8007f24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	f7fe fba1 	bl	800663e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d202      	bcs.n	8007f0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f06:	4a08      	ldr	r2, [pc, #32]	; (8007f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	6013      	str	r3, [r2, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20002e8c 	.word	0x20002e8c
 8007f18:	200029b4 	.word	0x200029b4
 8007f1c:	20002e74 	.word	0x20002e74
 8007f20:	20002e44 	.word	0x20002e44
 8007f24:	20002e40 	.word	0x20002e40
 8007f28:	20002ea8 	.word	0x20002ea8

08007f2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	; 0x28
 8007f30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f36:	f000 fb07 	bl	8008548 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f3a:	4b1c      	ldr	r3, [pc, #112]	; (8007fac <xTimerCreateTimerTask+0x80>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d021      	beq.n	8007f86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f4a:	1d3a      	adds	r2, r7, #4
 8007f4c:	f107 0108 	add.w	r1, r7, #8
 8007f50:	f107 030c 	add.w	r3, r7, #12
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe fb07 	bl	8006568 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	9202      	str	r2, [sp, #8]
 8007f62:	9301      	str	r3, [sp, #4]
 8007f64:	2302      	movs	r3, #2
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	460a      	mov	r2, r1
 8007f6c:	4910      	ldr	r1, [pc, #64]	; (8007fb0 <xTimerCreateTimerTask+0x84>)
 8007f6e:	4811      	ldr	r0, [pc, #68]	; (8007fb4 <xTimerCreateTimerTask+0x88>)
 8007f70:	f7ff f8b4 	bl	80070dc <xTaskCreateStatic>
 8007f74:	4603      	mov	r3, r0
 8007f76:	4a10      	ldr	r2, [pc, #64]	; (8007fb8 <xTimerCreateTimerTask+0x8c>)
 8007f78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f7a:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <xTimerCreateTimerTask+0x8c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f82:	2301      	movs	r3, #1
 8007f84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10a      	bne.n	8007fa2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	613b      	str	r3, [r7, #16]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007fa2:	697b      	ldr	r3, [r7, #20]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20002ee4 	.word	0x20002ee4
 8007fb0:	08009070 	.word	0x08009070
 8007fb4:	080080f1 	.word	0x080080f1
 8007fb8:	20002ee8 	.word	0x20002ee8

08007fbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08a      	sub	sp, #40	; 0x28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <xTimerGenericCommand+0x2e>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	623b      	str	r3, [r7, #32]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fea:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <xTimerGenericCommand+0x98>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d02a      	beq.n	8008048 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b05      	cmp	r3, #5
 8008002:	dc18      	bgt.n	8008036 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008004:	f7ff feb2 	bl	8007d6c <xTaskGetSchedulerState>
 8008008:	4603      	mov	r3, r0
 800800a:	2b02      	cmp	r3, #2
 800800c:	d109      	bne.n	8008022 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800800e:	4b11      	ldr	r3, [pc, #68]	; (8008054 <xTimerGenericCommand+0x98>)
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	f107 0110 	add.w	r1, r7, #16
 8008016:	2300      	movs	r3, #0
 8008018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801a:	f7fe fc77 	bl	800690c <xQueueGenericSend>
 800801e:	6278      	str	r0, [r7, #36]	; 0x24
 8008020:	e012      	b.n	8008048 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008022:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <xTimerGenericCommand+0x98>)
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	f107 0110 	add.w	r1, r7, #16
 800802a:	2300      	movs	r3, #0
 800802c:	2200      	movs	r2, #0
 800802e:	f7fe fc6d 	bl	800690c <xQueueGenericSend>
 8008032:	6278      	str	r0, [r7, #36]	; 0x24
 8008034:	e008      	b.n	8008048 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008036:	4b07      	ldr	r3, [pc, #28]	; (8008054 <xTimerGenericCommand+0x98>)
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	f107 0110 	add.w	r1, r7, #16
 800803e:	2300      	movs	r3, #0
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	f7fe fd61 	bl	8006b08 <xQueueGenericSendFromISR>
 8008046:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800804a:	4618      	mov	r0, r3
 800804c:	3728      	adds	r7, #40	; 0x28
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20002ee4 	.word	0x20002ee4

08008058 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af02      	add	r7, sp, #8
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008062:	4b22      	ldr	r3, [pc, #136]	; (80080ec <prvProcessExpiredTimer+0x94>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	3304      	adds	r3, #4
 8008070:	4618      	mov	r0, r3
 8008072:	f7fe fb1d 	bl	80066b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d022      	beq.n	80080ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	18d1      	adds	r1, r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	6978      	ldr	r0, [r7, #20]
 8008092:	f000 f8d1 	bl	8008238 <prvInsertTimerInActiveList>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01f      	beq.n	80080dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800809c:	2300      	movs	r3, #0
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	2300      	movs	r3, #0
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	2100      	movs	r1, #0
 80080a6:	6978      	ldr	r0, [r7, #20]
 80080a8:	f7ff ff88 	bl	8007fbc <xTimerGenericCommand>
 80080ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d113      	bne.n	80080dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	60fb      	str	r3, [r7, #12]
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d0:	f023 0301 	bic.w	r3, r3, #1
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	6978      	ldr	r0, [r7, #20]
 80080e2:	4798      	blx	r3
}
 80080e4:	bf00      	nop
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	20002edc 	.word	0x20002edc

080080f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080f8:	f107 0308 	add.w	r3, r7, #8
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 f857 	bl	80081b0 <prvGetNextExpireTime>
 8008102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4619      	mov	r1, r3
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f803 	bl	8008114 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800810e:	f000 f8d5 	bl	80082bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008112:	e7f1      	b.n	80080f8 <prvTimerTask+0x8>

08008114 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800811e:	f7ff fa39 	bl	8007594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f866 	bl	80081f8 <prvSampleTimeNow>
 800812c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d130      	bne.n	8008196 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <prvProcessTimerOrBlockTask+0x3c>
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	429a      	cmp	r2, r3
 8008140:	d806      	bhi.n	8008150 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008142:	f7ff fa35 	bl	80075b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008146:	68f9      	ldr	r1, [r7, #12]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7ff ff85 	bl	8008058 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800814e:	e024      	b.n	800819a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d008      	beq.n	8008168 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008156:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <prvProcessTimerOrBlockTask+0x90>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <prvProcessTimerOrBlockTask+0x50>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <prvProcessTimerOrBlockTask+0x52>
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008168:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <prvProcessTimerOrBlockTask+0x94>)
 800816a:	6818      	ldr	r0, [r3, #0]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	4619      	mov	r1, r3
 8008176:	f7fe ff7d 	bl	8007074 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800817a:	f7ff fa19 	bl	80075b0 <xTaskResumeAll>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10a      	bne.n	800819a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008184:	4b09      	ldr	r3, [pc, #36]	; (80081ac <prvProcessTimerOrBlockTask+0x98>)
 8008186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	f3bf 8f6f 	isb	sy
}
 8008194:	e001      	b.n	800819a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008196:	f7ff fa0b 	bl	80075b0 <xTaskResumeAll>
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20002ee0 	.word	0x20002ee0
 80081a8:	20002ee4 	.word	0x20002ee4
 80081ac:	e000ed04 	.word	0xe000ed04

080081b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081b8:	4b0e      	ldr	r3, [pc, #56]	; (80081f4 <prvGetNextExpireTime+0x44>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <prvGetNextExpireTime+0x16>
 80081c2:	2201      	movs	r2, #1
 80081c4:	e000      	b.n	80081c8 <prvGetNextExpireTime+0x18>
 80081c6:	2200      	movs	r2, #0
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d105      	bne.n	80081e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081d4:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <prvGetNextExpireTime+0x44>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	e001      	b.n	80081e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081e4:	68fb      	ldr	r3, [r7, #12]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20002edc 	.word	0x20002edc

080081f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008200:	f7ff fa74 	bl	80076ec <xTaskGetTickCount>
 8008204:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <prvSampleTimeNow+0x3c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	429a      	cmp	r2, r3
 800820e:	d205      	bcs.n	800821c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008210:	f000 f936 	bl	8008480 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	e002      	b.n	8008222 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008222:	4a04      	ldr	r2, [pc, #16]	; (8008234 <prvSampleTimeNow+0x3c>)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008228:	68fb      	ldr	r3, [r7, #12]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20002eec 	.word	0x20002eec

08008238 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	429a      	cmp	r2, r3
 800825c:	d812      	bhi.n	8008284 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	1ad2      	subs	r2, r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	429a      	cmp	r2, r3
 800826a:	d302      	bcc.n	8008272 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800826c:	2301      	movs	r3, #1
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	e01b      	b.n	80082aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008272:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <prvInsertTimerInActiveList+0x7c>)
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3304      	adds	r3, #4
 800827a:	4619      	mov	r1, r3
 800827c:	4610      	mov	r0, r2
 800827e:	f7fe f9de 	bl	800663e <vListInsert>
 8008282:	e012      	b.n	80082aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d206      	bcs.n	800829a <prvInsertTimerInActiveList+0x62>
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d302      	bcc.n	800829a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008294:	2301      	movs	r3, #1
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	e007      	b.n	80082aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800829a:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <prvInsertTimerInActiveList+0x80>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4619      	mov	r1, r3
 80082a4:	4610      	mov	r0, r2
 80082a6:	f7fe f9ca 	bl	800663e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082aa:	697b      	ldr	r3, [r7, #20]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20002ee0 	.word	0x20002ee0
 80082b8:	20002edc 	.word	0x20002edc

080082bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08e      	sub	sp, #56	; 0x38
 80082c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082c2:	e0ca      	b.n	800845a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	da18      	bge.n	80082fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082ca:	1d3b      	adds	r3, r7, #4
 80082cc:	3304      	adds	r3, #4
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10a      	bne.n	80082ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	61fb      	str	r3, [r7, #28]
}
 80082e8:	bf00      	nop
 80082ea:	e7fe      	b.n	80082ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f2:	6850      	ldr	r0, [r2, #4]
 80082f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f6:	6892      	ldr	r2, [r2, #8]
 80082f8:	4611      	mov	r1, r2
 80082fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f2c0 80aa 	blt.w	8008458 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d004      	beq.n	800831a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	3304      	adds	r3, #4
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe f9cb 	bl	80066b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800831a:	463b      	mov	r3, r7
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff ff6b 	bl	80081f8 <prvSampleTimeNow>
 8008322:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b09      	cmp	r3, #9
 8008328:	f200 8097 	bhi.w	800845a <prvProcessReceivedCommands+0x19e>
 800832c:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <prvProcessReceivedCommands+0x78>)
 800832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	0800835d 	.word	0x0800835d
 8008338:	0800835d 	.word	0x0800835d
 800833c:	0800835d 	.word	0x0800835d
 8008340:	080083d1 	.word	0x080083d1
 8008344:	080083e5 	.word	0x080083e5
 8008348:	0800842f 	.word	0x0800842f
 800834c:	0800835d 	.word	0x0800835d
 8008350:	0800835d 	.word	0x0800835d
 8008354:	080083d1 	.word	0x080083d1
 8008358:	080083e5 	.word	0x080083e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	b2da      	uxtb	r2, r3
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	18d1      	adds	r1, r2, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837c:	f7ff ff5c 	bl	8008238 <prvInsertTimerInActiveList>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d069      	beq.n	800845a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d05e      	beq.n	800845a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	441a      	add	r2, r3
 80083a4:	2300      	movs	r3, #0
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	2300      	movs	r3, #0
 80083aa:	2100      	movs	r1, #0
 80083ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ae:	f7ff fe05 	bl	8007fbc <xTimerGenericCommand>
 80083b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d14f      	bne.n	800845a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	61bb      	str	r3, [r7, #24]
}
 80083cc:	bf00      	nop
 80083ce:	e7fe      	b.n	80083ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d6:	f023 0301 	bic.w	r3, r3, #1
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80083e2:	e03a      	b.n	800845a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083ea:	f043 0301 	orr.w	r3, r3, #1
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10a      	bne.n	800841a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	617b      	str	r3, [r7, #20]
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	699a      	ldr	r2, [r3, #24]
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	18d1      	adds	r1, r2, r3
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008428:	f7ff ff06 	bl	8008238 <prvInsertTimerInActiveList>
					break;
 800842c:	e015      	b.n	800845a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d103      	bne.n	8008444 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800843c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800843e:	f000 fbdf 	bl	8008c00 <vPortFree>
 8008442:	e00a      	b.n	800845a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800844a:	f023 0301 	bic.w	r3, r3, #1
 800844e:	b2da      	uxtb	r2, r3
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008456:	e000      	b.n	800845a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008458:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800845a:	4b08      	ldr	r3, [pc, #32]	; (800847c <prvProcessReceivedCommands+0x1c0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	1d39      	adds	r1, r7, #4
 8008460:	2200      	movs	r2, #0
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe fbec 	bl	8006c40 <xQueueReceive>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	f47f af2a 	bne.w	80082c4 <prvProcessReceivedCommands+0x8>
	}
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	3730      	adds	r7, #48	; 0x30
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20002ee4 	.word	0x20002ee4

08008480 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008486:	e048      	b.n	800851a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008488:	4b2d      	ldr	r3, [pc, #180]	; (8008540 <prvSwitchTimerLists+0xc0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008492:	4b2b      	ldr	r3, [pc, #172]	; (8008540 <prvSwitchTimerLists+0xc0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3304      	adds	r3, #4
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe f905 	bl	80066b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d02e      	beq.n	800851a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4413      	add	r3, r2
 80084c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d90e      	bls.n	80084ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084da:	4b19      	ldr	r3, [pc, #100]	; (8008540 <prvSwitchTimerLists+0xc0>)
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3304      	adds	r3, #4
 80084e2:	4619      	mov	r1, r3
 80084e4:	4610      	mov	r0, r2
 80084e6:	f7fe f8aa 	bl	800663e <vListInsert>
 80084ea:	e016      	b.n	800851a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084ec:	2300      	movs	r3, #0
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	2300      	movs	r3, #0
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	2100      	movs	r1, #0
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fd60 	bl	8007fbc <xTimerGenericCommand>
 80084fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10a      	bne.n	800851a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	603b      	str	r3, [r7, #0]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800851a:	4b09      	ldr	r3, [pc, #36]	; (8008540 <prvSwitchTimerLists+0xc0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1b1      	bne.n	8008488 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008524:	4b06      	ldr	r3, [pc, #24]	; (8008540 <prvSwitchTimerLists+0xc0>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <prvSwitchTimerLists+0xc4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a04      	ldr	r2, [pc, #16]	; (8008540 <prvSwitchTimerLists+0xc0>)
 8008530:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008532:	4a04      	ldr	r2, [pc, #16]	; (8008544 <prvSwitchTimerLists+0xc4>)
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	6013      	str	r3, [r2, #0]
}
 8008538:	bf00      	nop
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	20002edc 	.word	0x20002edc
 8008544:	20002ee0 	.word	0x20002ee0

08008548 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800854e:	f000 f969 	bl	8008824 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008552:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <prvCheckForValidListAndQueue+0x60>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d120      	bne.n	800859c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800855a:	4814      	ldr	r0, [pc, #80]	; (80085ac <prvCheckForValidListAndQueue+0x64>)
 800855c:	f7fe f81e 	bl	800659c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008560:	4813      	ldr	r0, [pc, #76]	; (80085b0 <prvCheckForValidListAndQueue+0x68>)
 8008562:	f7fe f81b 	bl	800659c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008566:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <prvCheckForValidListAndQueue+0x6c>)
 8008568:	4a10      	ldr	r2, [pc, #64]	; (80085ac <prvCheckForValidListAndQueue+0x64>)
 800856a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800856c:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <prvCheckForValidListAndQueue+0x70>)
 800856e:	4a10      	ldr	r2, [pc, #64]	; (80085b0 <prvCheckForValidListAndQueue+0x68>)
 8008570:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008572:	2300      	movs	r3, #0
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	4b11      	ldr	r3, [pc, #68]	; (80085bc <prvCheckForValidListAndQueue+0x74>)
 8008578:	4a11      	ldr	r2, [pc, #68]	; (80085c0 <prvCheckForValidListAndQueue+0x78>)
 800857a:	2110      	movs	r1, #16
 800857c:	200a      	movs	r0, #10
 800857e:	f7fe f929 	bl	80067d4 <xQueueGenericCreateStatic>
 8008582:	4603      	mov	r3, r0
 8008584:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <prvCheckForValidListAndQueue+0x60>)
 8008586:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008588:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <prvCheckForValidListAndQueue+0x60>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d005      	beq.n	800859c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <prvCheckForValidListAndQueue+0x60>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	490b      	ldr	r1, [pc, #44]	; (80085c4 <prvCheckForValidListAndQueue+0x7c>)
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fd42 	bl	8007020 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800859c:	f000 f972 	bl	8008884 <vPortExitCritical>
}
 80085a0:	bf00      	nop
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20002ee4 	.word	0x20002ee4
 80085ac:	20002eb4 	.word	0x20002eb4
 80085b0:	20002ec8 	.word	0x20002ec8
 80085b4:	20002edc 	.word	0x20002edc
 80085b8:	20002ee0 	.word	0x20002ee0
 80085bc:	20002f90 	.word	0x20002f90
 80085c0:	20002ef0 	.word	0x20002ef0
 80085c4:	08009078 	.word	0x08009078

080085c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3b04      	subs	r3, #4
 80085d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3b04      	subs	r3, #4
 80085e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f023 0201 	bic.w	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3b04      	subs	r3, #4
 80085f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085f8:	4a0c      	ldr	r2, [pc, #48]	; (800862c <pxPortInitialiseStack+0x64>)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3b14      	subs	r3, #20
 8008602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3b04      	subs	r3, #4
 800860e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f06f 0202 	mvn.w	r2, #2
 8008616:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3b20      	subs	r3, #32
 800861c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800861e:	68fb      	ldr	r3, [r7, #12]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	08008631 	.word	0x08008631

08008630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800863a:	4b12      	ldr	r3, [pc, #72]	; (8008684 <prvTaskExitError+0x54>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008642:	d00a      	beq.n	800865a <prvTaskExitError+0x2a>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	60fb      	str	r3, [r7, #12]
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <prvTaskExitError+0x28>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	60bb      	str	r3, [r7, #8]
}
 800866c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800866e:	bf00      	nop
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0fc      	beq.n	8008670 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008676:	bf00      	nop
 8008678:	bf00      	nop
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	20000014 	.word	0x20000014
	...

08008690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008690:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <pxCurrentTCBConst2>)
 8008692:	6819      	ldr	r1, [r3, #0]
 8008694:	6808      	ldr	r0, [r1, #0]
 8008696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	f380 8809 	msr	PSP, r0
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8811 	msr	BASEPRI, r0
 80086aa:	4770      	bx	lr
 80086ac:	f3af 8000 	nop.w

080086b0 <pxCurrentTCBConst2>:
 80086b0:	200029b4 	.word	0x200029b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop

080086b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086b8:	4808      	ldr	r0, [pc, #32]	; (80086dc <prvPortStartFirstTask+0x24>)
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	6800      	ldr	r0, [r0, #0]
 80086be:	f380 8808 	msr	MSP, r0
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f380 8814 	msr	CONTROL, r0
 80086ca:	b662      	cpsie	i
 80086cc:	b661      	cpsie	f
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	df00      	svc	0
 80086d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086da:	bf00      	nop
 80086dc:	e000ed08 	.word	0xe000ed08

080086e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086e6:	4b46      	ldr	r3, [pc, #280]	; (8008800 <xPortStartScheduler+0x120>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a46      	ldr	r2, [pc, #280]	; (8008804 <xPortStartScheduler+0x124>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d10a      	bne.n	8008706 <xPortStartScheduler+0x26>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	613b      	str	r3, [r7, #16]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008706:	4b3e      	ldr	r3, [pc, #248]	; (8008800 <xPortStartScheduler+0x120>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a3f      	ldr	r2, [pc, #252]	; (8008808 <xPortStartScheduler+0x128>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d10a      	bne.n	8008726 <xPortStartScheduler+0x46>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	60fb      	str	r3, [r7, #12]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008726:	4b39      	ldr	r3, [pc, #228]	; (800880c <xPortStartScheduler+0x12c>)
 8008728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	22ff      	movs	r2, #255	; 0xff
 8008736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008748:	b2da      	uxtb	r2, r3
 800874a:	4b31      	ldr	r3, [pc, #196]	; (8008810 <xPortStartScheduler+0x130>)
 800874c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800874e:	4b31      	ldr	r3, [pc, #196]	; (8008814 <xPortStartScheduler+0x134>)
 8008750:	2207      	movs	r2, #7
 8008752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008754:	e009      	b.n	800876a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008756:	4b2f      	ldr	r3, [pc, #188]	; (8008814 <xPortStartScheduler+0x134>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3b01      	subs	r3, #1
 800875c:	4a2d      	ldr	r2, [pc, #180]	; (8008814 <xPortStartScheduler+0x134>)
 800875e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	b2db      	uxtb	r3, r3
 8008768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008772:	2b80      	cmp	r3, #128	; 0x80
 8008774:	d0ef      	beq.n	8008756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008776:	4b27      	ldr	r3, [pc, #156]	; (8008814 <xPortStartScheduler+0x134>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f1c3 0307 	rsb	r3, r3, #7
 800877e:	2b04      	cmp	r3, #4
 8008780:	d00a      	beq.n	8008798 <xPortStartScheduler+0xb8>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	60bb      	str	r3, [r7, #8]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008798:	4b1e      	ldr	r3, [pc, #120]	; (8008814 <xPortStartScheduler+0x134>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	4a1d      	ldr	r2, [pc, #116]	; (8008814 <xPortStartScheduler+0x134>)
 80087a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087a2:	4b1c      	ldr	r3, [pc, #112]	; (8008814 <xPortStartScheduler+0x134>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087aa:	4a1a      	ldr	r2, [pc, #104]	; (8008814 <xPortStartScheduler+0x134>)
 80087ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087b6:	4b18      	ldr	r3, [pc, #96]	; (8008818 <xPortStartScheduler+0x138>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a17      	ldr	r2, [pc, #92]	; (8008818 <xPortStartScheduler+0x138>)
 80087bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087c2:	4b15      	ldr	r3, [pc, #84]	; (8008818 <xPortStartScheduler+0x138>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a14      	ldr	r2, [pc, #80]	; (8008818 <xPortStartScheduler+0x138>)
 80087c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087ce:	f000 f8dd 	bl	800898c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087d2:	4b12      	ldr	r3, [pc, #72]	; (800881c <xPortStartScheduler+0x13c>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087d8:	f000 f8fc 	bl	80089d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087dc:	4b10      	ldr	r3, [pc, #64]	; (8008820 <xPortStartScheduler+0x140>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a0f      	ldr	r2, [pc, #60]	; (8008820 <xPortStartScheduler+0x140>)
 80087e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087e8:	f7ff ff66 	bl	80086b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087ec:	f7ff f848 	bl	8007880 <vTaskSwitchContext>
	prvTaskExitError();
 80087f0:	f7ff ff1e 	bl	8008630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	e000ed00 	.word	0xe000ed00
 8008804:	410fc271 	.word	0x410fc271
 8008808:	410fc270 	.word	0x410fc270
 800880c:	e000e400 	.word	0xe000e400
 8008810:	20002fe0 	.word	0x20002fe0
 8008814:	20002fe4 	.word	0x20002fe4
 8008818:	e000ed20 	.word	0xe000ed20
 800881c:	20000014 	.word	0x20000014
 8008820:	e000ef34 	.word	0xe000ef34

08008824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	607b      	str	r3, [r7, #4]
}
 800883c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800883e:	4b0f      	ldr	r3, [pc, #60]	; (800887c <vPortEnterCritical+0x58>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3301      	adds	r3, #1
 8008844:	4a0d      	ldr	r2, [pc, #52]	; (800887c <vPortEnterCritical+0x58>)
 8008846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008848:	4b0c      	ldr	r3, [pc, #48]	; (800887c <vPortEnterCritical+0x58>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d10f      	bne.n	8008870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008850:	4b0b      	ldr	r3, [pc, #44]	; (8008880 <vPortEnterCritical+0x5c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <vPortEnterCritical+0x4c>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	603b      	str	r3, [r7, #0]
}
 800886c:	bf00      	nop
 800886e:	e7fe      	b.n	800886e <vPortEnterCritical+0x4a>
	}
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	20000014 	.word	0x20000014
 8008880:	e000ed04 	.word	0xe000ed04

08008884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800888a:	4b12      	ldr	r3, [pc, #72]	; (80088d4 <vPortExitCritical+0x50>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <vPortExitCritical+0x24>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	607b      	str	r3, [r7, #4]
}
 80088a4:	bf00      	nop
 80088a6:	e7fe      	b.n	80088a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <vPortExitCritical+0x50>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	4a09      	ldr	r2, [pc, #36]	; (80088d4 <vPortExitCritical+0x50>)
 80088b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088b2:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <vPortExitCritical+0x50>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d105      	bne.n	80088c6 <vPortExitCritical+0x42>
 80088ba:	2300      	movs	r3, #0
 80088bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	f383 8811 	msr	BASEPRI, r3
}
 80088c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20000014 	.word	0x20000014
	...

080088e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088e0:	f3ef 8009 	mrs	r0, PSP
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	4b15      	ldr	r3, [pc, #84]	; (8008940 <pxCurrentTCBConst>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	f01e 0f10 	tst.w	lr, #16
 80088f0:	bf08      	it	eq
 80088f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	6010      	str	r0, [r2, #0]
 80088fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008904:	f380 8811 	msr	BASEPRI, r0
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f7fe ffb6 	bl	8007880 <vTaskSwitchContext>
 8008914:	f04f 0000 	mov.w	r0, #0
 8008918:	f380 8811 	msr	BASEPRI, r0
 800891c:	bc09      	pop	{r0, r3}
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	6808      	ldr	r0, [r1, #0]
 8008922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008926:	f01e 0f10 	tst.w	lr, #16
 800892a:	bf08      	it	eq
 800892c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008930:	f380 8809 	msr	PSP, r0
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	f3af 8000 	nop.w

08008940 <pxCurrentTCBConst>:
 8008940:	200029b4 	.word	0x200029b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop

08008948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
}
 8008960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008962:	f7fe fed3 	bl	800770c <xTaskIncrementTick>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800896c:	4b06      	ldr	r3, [pc, #24]	; (8008988 <xPortSysTickHandler+0x40>)
 800896e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	f383 8811 	msr	BASEPRI, r3
}
 800897e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008990:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <vPortSetupTimerInterrupt+0x34>)
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <vPortSetupTimerInterrupt+0x38>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <vPortSetupTimerInterrupt+0x3c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a0a      	ldr	r2, [pc, #40]	; (80089cc <vPortSetupTimerInterrupt+0x40>)
 80089a2:	fba2 2303 	umull	r2, r3, r2, r3
 80089a6:	099b      	lsrs	r3, r3, #6
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <vPortSetupTimerInterrupt+0x44>)
 80089aa:	3b01      	subs	r3, #1
 80089ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089ae:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <vPortSetupTimerInterrupt+0x34>)
 80089b0:	2207      	movs	r2, #7
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	e000e010 	.word	0xe000e010
 80089c4:	e000e018 	.word	0xe000e018
 80089c8:	20000008 	.word	0x20000008
 80089cc:	10624dd3 	.word	0x10624dd3
 80089d0:	e000e014 	.word	0xe000e014

080089d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089e4 <vPortEnableVFP+0x10>
 80089d8:	6801      	ldr	r1, [r0, #0]
 80089da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089de:	6001      	str	r1, [r0, #0]
 80089e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089e2:	bf00      	nop
 80089e4:	e000ed88 	.word	0xe000ed88

080089e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089ee:	f3ef 8305 	mrs	r3, IPSR
 80089f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b0f      	cmp	r3, #15
 80089f8:	d914      	bls.n	8008a24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089fa:	4a17      	ldr	r2, [pc, #92]	; (8008a58 <vPortValidateInterruptPriority+0x70>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a04:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <vPortValidateInterruptPriority+0x74>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	7afa      	ldrb	r2, [r7, #11]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d20a      	bcs.n	8008a24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	607b      	str	r3, [r7, #4]
}
 8008a20:	bf00      	nop
 8008a22:	e7fe      	b.n	8008a22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a24:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <vPortValidateInterruptPriority+0x78>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <vPortValidateInterruptPriority+0x7c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d90a      	bls.n	8008a4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	603b      	str	r3, [r7, #0]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <vPortValidateInterruptPriority+0x60>
	}
 8008a4a:	bf00      	nop
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	e000e3f0 	.word	0xe000e3f0
 8008a5c:	20002fe0 	.word	0x20002fe0
 8008a60:	e000ed0c 	.word	0xe000ed0c
 8008a64:	20002fe4 	.word	0x20002fe4

08008a68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	; 0x28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a74:	f7fe fd8e 	bl	8007594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a78:	4b5b      	ldr	r3, [pc, #364]	; (8008be8 <pvPortMalloc+0x180>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a80:	f000 f920 	bl	8008cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a84:	4b59      	ldr	r3, [pc, #356]	; (8008bec <pvPortMalloc+0x184>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f040 8093 	bne.w	8008bb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d01d      	beq.n	8008ad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a98:	2208      	movs	r2, #8
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f003 0307 	and.w	r3, r3, #7
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d014      	beq.n	8008ad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f023 0307 	bic.w	r3, r3, #7
 8008ab0:	3308      	adds	r3, #8
 8008ab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <pvPortMalloc+0x6c>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	617b      	str	r3, [r7, #20]
}
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d06e      	beq.n	8008bb8 <pvPortMalloc+0x150>
 8008ada:	4b45      	ldr	r3, [pc, #276]	; (8008bf0 <pvPortMalloc+0x188>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d869      	bhi.n	8008bb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ae4:	4b43      	ldr	r3, [pc, #268]	; (8008bf4 <pvPortMalloc+0x18c>)
 8008ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ae8:	4b42      	ldr	r3, [pc, #264]	; (8008bf4 <pvPortMalloc+0x18c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aee:	e004      	b.n	8008afa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d903      	bls.n	8008b0c <pvPortMalloc+0xa4>
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1f1      	bne.n	8008af0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b0c:	4b36      	ldr	r3, [pc, #216]	; (8008be8 <pvPortMalloc+0x180>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d050      	beq.n	8008bb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	4413      	add	r3, r2
 8008b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	2308      	movs	r3, #8
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d91f      	bls.n	8008b78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <pvPortMalloc+0xf8>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	613b      	str	r3, [r7, #16]
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	1ad2      	subs	r2, r2, r3
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b72:	69b8      	ldr	r0, [r7, #24]
 8008b74:	f000 f908 	bl	8008d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b78:	4b1d      	ldr	r3, [pc, #116]	; (8008bf0 <pvPortMalloc+0x188>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	4a1b      	ldr	r2, [pc, #108]	; (8008bf0 <pvPortMalloc+0x188>)
 8008b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b86:	4b1a      	ldr	r3, [pc, #104]	; (8008bf0 <pvPortMalloc+0x188>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4b1b      	ldr	r3, [pc, #108]	; (8008bf8 <pvPortMalloc+0x190>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d203      	bcs.n	8008b9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b92:	4b17      	ldr	r3, [pc, #92]	; (8008bf0 <pvPortMalloc+0x188>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <pvPortMalloc+0x190>)
 8008b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	4b13      	ldr	r3, [pc, #76]	; (8008bec <pvPortMalloc+0x184>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008bae:	4b13      	ldr	r3, [pc, #76]	; (8008bfc <pvPortMalloc+0x194>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	4a11      	ldr	r2, [pc, #68]	; (8008bfc <pvPortMalloc+0x194>)
 8008bb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bb8:	f7fe fcfa 	bl	80075b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f003 0307 	and.w	r3, r3, #7
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00a      	beq.n	8008bdc <pvPortMalloc+0x174>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	60fb      	str	r3, [r7, #12]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <pvPortMalloc+0x172>
	return pvReturn;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3728      	adds	r7, #40	; 0x28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20006bf0 	.word	0x20006bf0
 8008bec:	20006c04 	.word	0x20006c04
 8008bf0:	20006bf4 	.word	0x20006bf4
 8008bf4:	20006be8 	.word	0x20006be8
 8008bf8:	20006bf8 	.word	0x20006bf8
 8008bfc:	20006bfc 	.word	0x20006bfc

08008c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d04d      	beq.n	8008cae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c12:	2308      	movs	r3, #8
 8008c14:	425b      	negs	r3, r3
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	4413      	add	r3, r2
 8008c1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	4b24      	ldr	r3, [pc, #144]	; (8008cb8 <vPortFree+0xb8>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10a      	bne.n	8008c44 <vPortFree+0x44>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	60fb      	str	r3, [r7, #12]
}
 8008c40:	bf00      	nop
 8008c42:	e7fe      	b.n	8008c42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00a      	beq.n	8008c62 <vPortFree+0x62>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60bb      	str	r3, [r7, #8]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	4b14      	ldr	r3, [pc, #80]	; (8008cb8 <vPortFree+0xb8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01e      	beq.n	8008cae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d11a      	bne.n	8008cae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <vPortFree+0xb8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	43db      	mvns	r3, r3
 8008c82:	401a      	ands	r2, r3
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c88:	f7fe fc84 	bl	8007594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <vPortFree+0xbc>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4413      	add	r3, r2
 8008c96:	4a09      	ldr	r2, [pc, #36]	; (8008cbc <vPortFree+0xbc>)
 8008c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c9a:	6938      	ldr	r0, [r7, #16]
 8008c9c:	f000 f874 	bl	8008d88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ca0:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <vPortFree+0xc0>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	4a06      	ldr	r2, [pc, #24]	; (8008cc0 <vPortFree+0xc0>)
 8008ca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008caa:	f7fe fc81 	bl	80075b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cae:	bf00      	nop
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20006c04 	.word	0x20006c04
 8008cbc:	20006bf4 	.word	0x20006bf4
 8008cc0:	20006c00 	.word	0x20006c00

08008cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cd0:	4b27      	ldr	r3, [pc, #156]	; (8008d70 <prvHeapInit+0xac>)
 8008cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00c      	beq.n	8008cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0307 	bic.w	r3, r3, #7
 8008cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	4a1f      	ldr	r2, [pc, #124]	; (8008d70 <prvHeapInit+0xac>)
 8008cf4:	4413      	add	r3, r2
 8008cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cfc:	4a1d      	ldr	r2, [pc, #116]	; (8008d74 <prvHeapInit+0xb0>)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d02:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <prvHeapInit+0xb0>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d10:	2208      	movs	r2, #8
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0307 	bic.w	r3, r3, #7
 8008d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <prvHeapInit+0xb4>)
 8008d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d26:	4b14      	ldr	r3, [pc, #80]	; (8008d78 <prvHeapInit+0xb4>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d2e:	4b12      	ldr	r3, [pc, #72]	; (8008d78 <prvHeapInit+0xb4>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d44:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <prvHeapInit+0xb4>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4a0a      	ldr	r2, [pc, #40]	; (8008d7c <prvHeapInit+0xb8>)
 8008d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	4a09      	ldr	r2, [pc, #36]	; (8008d80 <prvHeapInit+0xbc>)
 8008d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d5c:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <prvHeapInit+0xc0>)
 8008d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d62:	601a      	str	r2, [r3, #0]
}
 8008d64:	bf00      	nop
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	20002fe8 	.word	0x20002fe8
 8008d74:	20006be8 	.word	0x20006be8
 8008d78:	20006bf0 	.word	0x20006bf0
 8008d7c:	20006bf8 	.word	0x20006bf8
 8008d80:	20006bf4 	.word	0x20006bf4
 8008d84:	20006c04 	.word	0x20006c04

08008d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d90:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <prvInsertBlockIntoFreeList+0xac>)
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e002      	b.n	8008d9c <prvInsertBlockIntoFreeList+0x14>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d8f7      	bhi.n	8008d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	4413      	add	r3, r2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d108      	bne.n	8008dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	441a      	add	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d118      	bne.n	8008e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <prvInsertBlockIntoFreeList+0xb0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d00d      	beq.n	8008e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	e008      	b.n	8008e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <prvInsertBlockIntoFreeList+0xb0>)
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	e003      	b.n	8008e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d002      	beq.n	8008e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e26:	bf00      	nop
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20006be8 	.word	0x20006be8
 8008e38:	20006bf0 	.word	0x20006bf0

08008e3c <__libc_init_array>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4d0d      	ldr	r5, [pc, #52]	; (8008e74 <__libc_init_array+0x38>)
 8008e40:	4c0d      	ldr	r4, [pc, #52]	; (8008e78 <__libc_init_array+0x3c>)
 8008e42:	1b64      	subs	r4, r4, r5
 8008e44:	10a4      	asrs	r4, r4, #2
 8008e46:	2600      	movs	r6, #0
 8008e48:	42a6      	cmp	r6, r4
 8008e4a:	d109      	bne.n	8008e60 <__libc_init_array+0x24>
 8008e4c:	4d0b      	ldr	r5, [pc, #44]	; (8008e7c <__libc_init_array+0x40>)
 8008e4e:	4c0c      	ldr	r4, [pc, #48]	; (8008e80 <__libc_init_array+0x44>)
 8008e50:	f000 f8f2 	bl	8009038 <_init>
 8008e54:	1b64      	subs	r4, r4, r5
 8008e56:	10a4      	asrs	r4, r4, #2
 8008e58:	2600      	movs	r6, #0
 8008e5a:	42a6      	cmp	r6, r4
 8008e5c:	d105      	bne.n	8008e6a <__libc_init_array+0x2e>
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e64:	4798      	blx	r3
 8008e66:	3601      	adds	r6, #1
 8008e68:	e7ee      	b.n	8008e48 <__libc_init_array+0xc>
 8008e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e6e:	4798      	blx	r3
 8008e70:	3601      	adds	r6, #1
 8008e72:	e7f2      	b.n	8008e5a <__libc_init_array+0x1e>
 8008e74:	0800c388 	.word	0x0800c388
 8008e78:	0800c388 	.word	0x0800c388
 8008e7c:	0800c388 	.word	0x0800c388
 8008e80:	0800c38c 	.word	0x0800c38c

08008e84 <__retarget_lock_acquire_recursive>:
 8008e84:	4770      	bx	lr

08008e86 <__retarget_lock_release_recursive>:
 8008e86:	4770      	bx	lr

08008e88 <memcpy>:
 8008e88:	440a      	add	r2, r1
 8008e8a:	4291      	cmp	r1, r2
 8008e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e90:	d100      	bne.n	8008e94 <memcpy+0xc>
 8008e92:	4770      	bx	lr
 8008e94:	b510      	push	{r4, lr}
 8008e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e9e:	4291      	cmp	r1, r2
 8008ea0:	d1f9      	bne.n	8008e96 <memcpy+0xe>
 8008ea2:	bd10      	pop	{r4, pc}

08008ea4 <memset>:
 8008ea4:	4402      	add	r2, r0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d100      	bne.n	8008eae <memset+0xa>
 8008eac:	4770      	bx	lr
 8008eae:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb2:	e7f9      	b.n	8008ea8 <memset+0x4>

08008eb4 <_free_r>:
 8008eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	d044      	beq.n	8008f44 <_free_r+0x90>
 8008eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ebe:	9001      	str	r0, [sp, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ec6:	bfb8      	it	lt
 8008ec8:	18e4      	addlt	r4, r4, r3
 8008eca:	f000 f8a9 	bl	8009020 <__malloc_lock>
 8008ece:	4a1e      	ldr	r2, [pc, #120]	; (8008f48 <_free_r+0x94>)
 8008ed0:	9801      	ldr	r0, [sp, #4]
 8008ed2:	6813      	ldr	r3, [r2, #0]
 8008ed4:	b933      	cbnz	r3, 8008ee4 <_free_r+0x30>
 8008ed6:	6063      	str	r3, [r4, #4]
 8008ed8:	6014      	str	r4, [r2, #0]
 8008eda:	b003      	add	sp, #12
 8008edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ee0:	f000 b8a4 	b.w	800902c <__malloc_unlock>
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	d908      	bls.n	8008efa <_free_r+0x46>
 8008ee8:	6825      	ldr	r5, [r4, #0]
 8008eea:	1961      	adds	r1, r4, r5
 8008eec:	428b      	cmp	r3, r1
 8008eee:	bf01      	itttt	eq
 8008ef0:	6819      	ldreq	r1, [r3, #0]
 8008ef2:	685b      	ldreq	r3, [r3, #4]
 8008ef4:	1949      	addeq	r1, r1, r5
 8008ef6:	6021      	streq	r1, [r4, #0]
 8008ef8:	e7ed      	b.n	8008ed6 <_free_r+0x22>
 8008efa:	461a      	mov	r2, r3
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	b10b      	cbz	r3, 8008f04 <_free_r+0x50>
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	d9fa      	bls.n	8008efa <_free_r+0x46>
 8008f04:	6811      	ldr	r1, [r2, #0]
 8008f06:	1855      	adds	r5, r2, r1
 8008f08:	42a5      	cmp	r5, r4
 8008f0a:	d10b      	bne.n	8008f24 <_free_r+0x70>
 8008f0c:	6824      	ldr	r4, [r4, #0]
 8008f0e:	4421      	add	r1, r4
 8008f10:	1854      	adds	r4, r2, r1
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	6011      	str	r1, [r2, #0]
 8008f16:	d1e0      	bne.n	8008eda <_free_r+0x26>
 8008f18:	681c      	ldr	r4, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	6053      	str	r3, [r2, #4]
 8008f1e:	4421      	add	r1, r4
 8008f20:	6011      	str	r1, [r2, #0]
 8008f22:	e7da      	b.n	8008eda <_free_r+0x26>
 8008f24:	d902      	bls.n	8008f2c <_free_r+0x78>
 8008f26:	230c      	movs	r3, #12
 8008f28:	6003      	str	r3, [r0, #0]
 8008f2a:	e7d6      	b.n	8008eda <_free_r+0x26>
 8008f2c:	6825      	ldr	r5, [r4, #0]
 8008f2e:	1961      	adds	r1, r4, r5
 8008f30:	428b      	cmp	r3, r1
 8008f32:	bf04      	itt	eq
 8008f34:	6819      	ldreq	r1, [r3, #0]
 8008f36:	685b      	ldreq	r3, [r3, #4]
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	bf04      	itt	eq
 8008f3c:	1949      	addeq	r1, r1, r5
 8008f3e:	6021      	streq	r1, [r4, #0]
 8008f40:	6054      	str	r4, [r2, #4]
 8008f42:	e7ca      	b.n	8008eda <_free_r+0x26>
 8008f44:	b003      	add	sp, #12
 8008f46:	bd30      	pop	{r4, r5, pc}
 8008f48:	20006c0c 	.word	0x20006c0c

08008f4c <cleanup_glue>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	460c      	mov	r4, r1
 8008f50:	6809      	ldr	r1, [r1, #0]
 8008f52:	4605      	mov	r5, r0
 8008f54:	b109      	cbz	r1, 8008f5a <cleanup_glue+0xe>
 8008f56:	f7ff fff9 	bl	8008f4c <cleanup_glue>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f62:	f7ff bfa7 	b.w	8008eb4 <_free_r>
	...

08008f68 <_reclaim_reent>:
 8008f68:	4b2c      	ldr	r3, [pc, #176]	; (800901c <_reclaim_reent+0xb4>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4283      	cmp	r3, r0
 8008f6e:	b570      	push	{r4, r5, r6, lr}
 8008f70:	4604      	mov	r4, r0
 8008f72:	d051      	beq.n	8009018 <_reclaim_reent+0xb0>
 8008f74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008f76:	b143      	cbz	r3, 8008f8a <_reclaim_reent+0x22>
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d14a      	bne.n	8009014 <_reclaim_reent+0xac>
 8008f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f80:	6819      	ldr	r1, [r3, #0]
 8008f82:	b111      	cbz	r1, 8008f8a <_reclaim_reent+0x22>
 8008f84:	4620      	mov	r0, r4
 8008f86:	f7ff ff95 	bl	8008eb4 <_free_r>
 8008f8a:	6961      	ldr	r1, [r4, #20]
 8008f8c:	b111      	cbz	r1, 8008f94 <_reclaim_reent+0x2c>
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7ff ff90 	bl	8008eb4 <_free_r>
 8008f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f96:	b111      	cbz	r1, 8008f9e <_reclaim_reent+0x36>
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7ff ff8b 	bl	8008eb4 <_free_r>
 8008f9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008fa0:	b111      	cbz	r1, 8008fa8 <_reclaim_reent+0x40>
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff ff86 	bl	8008eb4 <_free_r>
 8008fa8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008faa:	b111      	cbz	r1, 8008fb2 <_reclaim_reent+0x4a>
 8008fac:	4620      	mov	r0, r4
 8008fae:	f7ff ff81 	bl	8008eb4 <_free_r>
 8008fb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008fb4:	b111      	cbz	r1, 8008fbc <_reclaim_reent+0x54>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f7ff ff7c 	bl	8008eb4 <_free_r>
 8008fbc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008fbe:	b111      	cbz	r1, 8008fc6 <_reclaim_reent+0x5e>
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f7ff ff77 	bl	8008eb4 <_free_r>
 8008fc6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008fc8:	b111      	cbz	r1, 8008fd0 <_reclaim_reent+0x68>
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7ff ff72 	bl	8008eb4 <_free_r>
 8008fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fd2:	b111      	cbz	r1, 8008fda <_reclaim_reent+0x72>
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f7ff ff6d 	bl	8008eb4 <_free_r>
 8008fda:	69a3      	ldr	r3, [r4, #24]
 8008fdc:	b1e3      	cbz	r3, 8009018 <_reclaim_reent+0xb0>
 8008fde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	4798      	blx	r3
 8008fe4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008fe6:	b1b9      	cbz	r1, 8009018 <_reclaim_reent+0xb0>
 8008fe8:	4620      	mov	r0, r4
 8008fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fee:	f7ff bfad 	b.w	8008f4c <cleanup_glue>
 8008ff2:	5949      	ldr	r1, [r1, r5]
 8008ff4:	b941      	cbnz	r1, 8009008 <_reclaim_reent+0xa0>
 8008ff6:	3504      	adds	r5, #4
 8008ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ffa:	2d80      	cmp	r5, #128	; 0x80
 8008ffc:	68d9      	ldr	r1, [r3, #12]
 8008ffe:	d1f8      	bne.n	8008ff2 <_reclaim_reent+0x8a>
 8009000:	4620      	mov	r0, r4
 8009002:	f7ff ff57 	bl	8008eb4 <_free_r>
 8009006:	e7ba      	b.n	8008f7e <_reclaim_reent+0x16>
 8009008:	680e      	ldr	r6, [r1, #0]
 800900a:	4620      	mov	r0, r4
 800900c:	f7ff ff52 	bl	8008eb4 <_free_r>
 8009010:	4631      	mov	r1, r6
 8009012:	e7ef      	b.n	8008ff4 <_reclaim_reent+0x8c>
 8009014:	2500      	movs	r5, #0
 8009016:	e7ef      	b.n	8008ff8 <_reclaim_reent+0x90>
 8009018:	bd70      	pop	{r4, r5, r6, pc}
 800901a:	bf00      	nop
 800901c:	20000018 	.word	0x20000018

08009020 <__malloc_lock>:
 8009020:	4801      	ldr	r0, [pc, #4]	; (8009028 <__malloc_lock+0x8>)
 8009022:	f7ff bf2f 	b.w	8008e84 <__retarget_lock_acquire_recursive>
 8009026:	bf00      	nop
 8009028:	20006c08 	.word	0x20006c08

0800902c <__malloc_unlock>:
 800902c:	4801      	ldr	r0, [pc, #4]	; (8009034 <__malloc_unlock+0x8>)
 800902e:	f7ff bf2a 	b.w	8008e86 <__retarget_lock_release_recursive>
 8009032:	bf00      	nop
 8009034:	20006c08 	.word	0x20006c08

08009038 <_init>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr

08009044 <_fini>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr
